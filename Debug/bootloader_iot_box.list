
bootloader_iot_box.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045f4  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000029c  080047d8  080047d8  000057d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a74  08004a74  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004a74  08004a74  00005a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a7c  08004a7c  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a7c  08004a7c  00005a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a80  08004a80  00005a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004a84  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a88  20000060  08004ae0  00006060  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000ae8  08004ae0  00006ae8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e15d  00000000  00000000  00006085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002786  00000000  00000000  000141e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e40  00000000  00000000  00016968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b13  00000000  00000000  000177a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001abc4  00000000  00000000  000182bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011b15  00000000  00000000  00032e7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a06a  00000000  00000000  00044994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  000de9fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004038  00000000  00000000  000dea84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000e2abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000060 	.word	0x20000060
 8000200:	00000000 	.word	0x00000000
 8000204:	080047c0 	.word	0x080047c0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000064 	.word	0x20000064
 8000220:	080047c0 	.word	0x080047c0

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <GetPage>:
 * Some STM32F103C8 have 64 KB FLASH Memory, so I guess they have Page 0 to Page 63 only.
 */

/* FLASH_PAGE_SIZE should be able to get the size of the Page according to the controller */
static uint32_t GetPage(uint32_t Address)
{
 8000234:	b480      	push	{r7}
 8000236:	b085      	sub	sp, #20
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
  for (int indx=0; indx<128; indx++)
 800023c:	2300      	movs	r3, #0
 800023e:	60fb      	str	r3, [r7, #12]
 8000240:	e015      	b.n	800026e <GetPage+0x3a>
  {
	  if((Address < (0x08000000 + (FLASH_PAGE_SIZE *(indx+1))) ) && (Address >= (0x08000000 + FLASH_PAGE_SIZE*indx)))
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	f103 1301 	add.w	r3, r3, #65537	@ 0x10001
 8000248:	02db      	lsls	r3, r3, #11
 800024a:	687a      	ldr	r2, [r7, #4]
 800024c:	429a      	cmp	r2, r3
 800024e:	d20b      	bcs.n	8000268 <GetPage+0x34>
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8000256:	02db      	lsls	r3, r3, #11
 8000258:	687a      	ldr	r2, [r7, #4]
 800025a:	429a      	cmp	r2, r3
 800025c:	d304      	bcc.n	8000268 <GetPage+0x34>
	  {
		  return (0x08000000 + FLASH_PAGE_SIZE*indx);
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8000264:	02db      	lsls	r3, r3, #11
 8000266:	e006      	b.n	8000276 <GetPage+0x42>
  for (int indx=0; indx<128; indx++)
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	3301      	adds	r3, #1
 800026c:	60fb      	str	r3, [r7, #12]
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	2b7f      	cmp	r3, #127	@ 0x7f
 8000272:	dde6      	ble.n	8000242 <GetPage+0xe>
	  }
  }

  return 0;
 8000274:	2300      	movs	r3, #0
}
 8000276:	4618      	mov	r0, r3
 8000278:	3714      	adds	r7, #20
 800027a:	46bd      	mov	sp, r7
 800027c:	bc80      	pop	{r7}
 800027e:	4770      	bx	lr

08000280 <Flash_Write_Data>:
   float float_variable =  thing.a;
   return float_variable;
}

uint32_t Flash_Write_Data (uint32_t StartPageAddress, uint32_t *Data, uint16_t numberofwords)
{
 8000280:	b5b0      	push	{r4, r5, r7, lr}
 8000282:	b08a      	sub	sp, #40	@ 0x28
 8000284:	af00      	add	r7, sp, #0
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	4613      	mov	r3, r2
 800028c:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar=0;
 800028e:	2300      	movs	r3, #0
 8000290:	627b      	str	r3, [r7, #36]	@ 0x24

	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 8000292:	f001 fa13 	bl	80016bc <HAL_FLASH_Unlock>

	   /* Erase the user Flash area*/

	  uint32_t StartPage = GetPage(StartPageAddress);
 8000296:	68f8      	ldr	r0, [r7, #12]
 8000298:	f7ff ffcc 	bl	8000234 <GetPage>
 800029c:	6238      	str	r0, [r7, #32]
	  uint32_t EndPageAdress = StartPageAddress + numberofwords*4;
 800029e:	88fb      	ldrh	r3, [r7, #6]
 80002a0:	009b      	lsls	r3, r3, #2
 80002a2:	461a      	mov	r2, r3
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	4413      	add	r3, r2
 80002a8:	61fb      	str	r3, [r7, #28]
	  uint32_t EndPage = GetPage(EndPageAdress);
 80002aa:	69f8      	ldr	r0, [r7, #28]
 80002ac:	f7ff ffc2 	bl	8000234 <GetPage>
 80002b0:	61b8      	str	r0, [r7, #24]

	   /* Fill EraseInit structure*/
	   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 80002b2:	4b20      	ldr	r3, [pc, #128]	@ (8000334 <Flash_Write_Data+0xb4>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	601a      	str	r2, [r3, #0]
	   EraseInitStruct.PageAddress = StartPage;
 80002b8:	4a1e      	ldr	r2, [pc, #120]	@ (8000334 <Flash_Write_Data+0xb4>)
 80002ba:	6a3b      	ldr	r3, [r7, #32]
 80002bc:	6093      	str	r3, [r2, #8]
	   EraseInitStruct.NbPages     = ((EndPage - StartPage)/FLASH_PAGE_SIZE) +1;
 80002be:	69ba      	ldr	r2, [r7, #24]
 80002c0:	6a3b      	ldr	r3, [r7, #32]
 80002c2:	1ad3      	subs	r3, r2, r3
 80002c4:	0adb      	lsrs	r3, r3, #11
 80002c6:	3301      	adds	r3, #1
 80002c8:	4a1a      	ldr	r2, [pc, #104]	@ (8000334 <Flash_Write_Data+0xb4>)
 80002ca:	60d3      	str	r3, [r2, #12]

	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 80002cc:	f107 0314 	add.w	r3, r7, #20
 80002d0:	4619      	mov	r1, r3
 80002d2:	4818      	ldr	r0, [pc, #96]	@ (8000334 <Flash_Write_Data+0xb4>)
 80002d4:	f001 fae4 	bl	80018a0 <HAL_FLASHEx_Erase>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d01f      	beq.n	800031e <Flash_Write_Data+0x9e>
	   {
	     /*Error occurred while page erase.*/
		  return HAL_FLASH_GetError ();
 80002de:	f001 fa23 	bl	8001728 <HAL_FLASH_GetError>
 80002e2:	4603      	mov	r3, r0
 80002e4:	e022      	b.n	800032c <Flash_Write_Data+0xac>

	   /* Program the user Flash area word by word*/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress, Data[sofar]) == HAL_OK)
 80002e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80002e8:	009b      	lsls	r3, r3, #2
 80002ea:	68ba      	ldr	r2, [r7, #8]
 80002ec:	4413      	add	r3, r2
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	2200      	movs	r2, #0
 80002f2:	461c      	mov	r4, r3
 80002f4:	4615      	mov	r5, r2
 80002f6:	4622      	mov	r2, r4
 80002f8:	462b      	mov	r3, r5
 80002fa:	68f9      	ldr	r1, [r7, #12]
 80002fc:	2002      	movs	r0, #2
 80002fe:	f001 f96d 	bl	80015dc <HAL_FLASH_Program>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d106      	bne.n	8000316 <Flash_Write_Data+0x96>
	     {
	    	 StartPageAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	3304      	adds	r3, #4
 800030c:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 800030e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000310:	3301      	adds	r3, #1
 8000312:	627b      	str	r3, [r7, #36]	@ 0x24
 8000314:	e003      	b.n	800031e <Flash_Write_Data+0x9e>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8000316:	f001 fa07 	bl	8001728 <HAL_FLASH_GetError>
 800031a:	4603      	mov	r3, r0
 800031c:	e006      	b.n	800032c <Flash_Write_Data+0xac>
	   while (sofar<numberofwords)
 800031e:	88fb      	ldrh	r3, [r7, #6]
 8000320:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000322:	429a      	cmp	r2, r3
 8000324:	dbdf      	blt.n	80002e6 <Flash_Write_Data+0x66>
	     }
	   }

	   /* Lock the Flash to disable the flash control register access (recommended
	      to protect the FLASH memory against possible unwanted operation) *********/
	   HAL_FLASH_Lock();
 8000326:	f001 f9ef 	bl	8001708 <HAL_FLASH_Lock>

	   return 0;
 800032a:	2300      	movs	r3, #0
}
 800032c:	4618      	mov	r0, r3
 800032e:	3728      	adds	r7, #40	@ 0x28
 8000330:	46bd      	mov	sp, r7
 8000332:	bdb0      	pop	{r4, r5, r7, pc}
 8000334:	2000007c 	.word	0x2000007c

08000338 <Flash_Write_Array>:
	Flash_Read_Data(StartSectorAddress, (uint32_t *)buffer, 1);
	value = Bytes2float(buffer);
	return value;
}
uint32_t Flash_Write_Array(uint32_t StartAddress, uint8_t *data, uint16_t len)
{
 8000338:	b5b0      	push	{r4, r5, r7, lr}
 800033a:	b08e      	sub	sp, #56	@ 0x38
 800033c:	af00      	add	r7, sp, #0
 800033e:	60f8      	str	r0, [r7, #12]
 8000340:	60b9      	str	r1, [r7, #8]
 8000342:	4613      	mov	r3, r2
 8000344:	80fb      	strh	r3, [r7, #6]
    FLASH_EraseInitTypeDef EraseInitStruct;
    uint32_t PAGEError;
    uint32_t CurrentAddress = StartAddress;
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	637b      	str	r3, [r7, #52]	@ 0x34
    uint32_t tempData = 0;
 800034a:	2300      	movs	r3, #0
 800034c:	633b      	str	r3, [r7, #48]	@ 0x30
    uint16_t i = 0;
 800034e:	2300      	movs	r3, #0
 8000350:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    // Mở khóa Flash
    HAL_FLASH_Unlock();
 8000352:	f001 f9b3 	bl	80016bc <HAL_FLASH_Unlock>

    // Xóa Flash từ trang bắt đầu
    uint32_t StartPage = StartAddress & ~(FLASH_PAGE_SIZE - 1); // Căn chỉnh về đầu trang
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800035c:	f023 0307 	bic.w	r3, r3, #7
 8000360:	62bb      	str	r3, [r7, #40]	@ 0x28
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000362:	2300      	movs	r3, #0
 8000364:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.PageAddress = StartPage;
 8000366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000368:	623b      	str	r3, [r7, #32]
    EraseInitStruct.NbPages = ((len + FLASH_PAGE_SIZE - 1) / FLASH_PAGE_SIZE); // Tính số trang cần xóa
 800036a:	88fb      	ldrh	r3, [r7, #6]
 800036c:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8000370:	0adb      	lsrs	r3, r3, #11
 8000372:	627b      	str	r3, [r7, #36]	@ 0x24

    if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8000374:	f107 0214 	add.w	r2, r7, #20
 8000378:	f107 0318 	add.w	r3, r7, #24
 800037c:	4611      	mov	r1, r2
 800037e:	4618      	mov	r0, r3
 8000380:	f001 fa8e 	bl	80018a0 <HAL_FLASHEx_Erase>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d03f      	beq.n	800040a <Flash_Write_Array+0xd2>
    {
        // Xử lý lỗi xóa
        HAL_FLASH_Lock();
 800038a:	f001 f9bd 	bl	8001708 <HAL_FLASH_Lock>
        return HAL_FLASH_GetError();
 800038e:	f001 f9cb 	bl	8001728 <HAL_FLASH_GetError>
 8000392:	4603      	mov	r3, r0
 8000394:	e040      	b.n	8000418 <Flash_Write_Array+0xe0>

    // Ghi dữ liệu
    while (i < len)
    {
        // Ghép 4 byte (hoặc ít hơn nếu còn lại < 4 byte)
        tempData = 0;
 8000396:	2300      	movs	r3, #0
 8000398:	633b      	str	r3, [r7, #48]	@ 0x30
        for (uint8_t j = 0; j < 4; j++)
 800039a:	2300      	movs	r3, #0
 800039c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80003a0:	e019      	b.n	80003d6 <Flash_Write_Array+0x9e>
        {
            if (i < len)
 80003a2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80003a4:	88fb      	ldrh	r3, [r7, #6]
 80003a6:	429a      	cmp	r2, r3
 80003a8:	d210      	bcs.n	80003cc <Flash_Write_Array+0x94>
            {
                tempData |= (data[i] << (8 * j));
 80003aa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80003ac:	68ba      	ldr	r2, [r7, #8]
 80003ae:	4413      	add	r3, r2
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	461a      	mov	r2, r3
 80003b4:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80003b8:	00db      	lsls	r3, r3, #3
 80003ba:	fa02 f303 	lsl.w	r3, r2, r3
 80003be:	461a      	mov	r2, r3
 80003c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80003c2:	4313      	orrs	r3, r2
 80003c4:	633b      	str	r3, [r7, #48]	@ 0x30
                i++;
 80003c6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80003c8:	3301      	adds	r3, #1
 80003ca:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        for (uint8_t j = 0; j < 4; j++)
 80003cc:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80003d0:	3301      	adds	r3, #1
 80003d2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80003d6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80003da:	2b03      	cmp	r3, #3
 80003dc:	d9e1      	bls.n	80003a2 <Flash_Write_Array+0x6a>
            }
        }

        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, CurrentAddress, tempData) != HAL_OK)
 80003de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80003e0:	2200      	movs	r2, #0
 80003e2:	461c      	mov	r4, r3
 80003e4:	4615      	mov	r5, r2
 80003e6:	4622      	mov	r2, r4
 80003e8:	462b      	mov	r3, r5
 80003ea:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80003ec:	2002      	movs	r0, #2
 80003ee:	f001 f8f5 	bl	80015dc <HAL_FLASH_Program>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d005      	beq.n	8000404 <Flash_Write_Array+0xcc>
        {
            // Xử lý lỗi ghi
            HAL_FLASH_Lock();
 80003f8:	f001 f986 	bl	8001708 <HAL_FLASH_Lock>
            return HAL_FLASH_GetError();
 80003fc:	f001 f994 	bl	8001728 <HAL_FLASH_GetError>
 8000400:	4603      	mov	r3, r0
 8000402:	e009      	b.n	8000418 <Flash_Write_Array+0xe0>
        }

        CurrentAddress += 4; // Tiến đến địa chỉ tiếp theo (ghi 4 byte mỗi lần)
 8000404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000406:	3304      	adds	r3, #4
 8000408:	637b      	str	r3, [r7, #52]	@ 0x34
    while (i < len)
 800040a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800040c:	88fb      	ldrh	r3, [r7, #6]
 800040e:	429a      	cmp	r2, r3
 8000410:	d3c1      	bcc.n	8000396 <Flash_Write_Array+0x5e>
    }

    // Khóa Flash sau khi ghi xong
    HAL_FLASH_Lock();
 8000412:	f001 f979 	bl	8001708 <HAL_FLASH_Lock>

    return 0; // Thành công
 8000416:	2300      	movs	r3, #0
}
 8000418:	4618      	mov	r0, r3
 800041a:	3738      	adds	r7, #56	@ 0x38
 800041c:	46bd      	mov	sp, r7
 800041e:	bdb0      	pop	{r4, r5, r7, pc}

08000420 <debugPrint>:
extern CRC_HandleTypeDef hcrc;
extern UART_HandleTypeDef huart1;


void debugPrint(const char *fmt, ...)
{
 8000420:	b40f      	push	{r0, r1, r2, r3}
 8000422:	b580      	push	{r7, lr}
 8000424:	f5ad 7d1c 	sub.w	sp, sp, #624	@ 0x270
 8000428:	af00      	add	r7, sp, #0
	char buff[300] = {0};
 800042a:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800042e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000432:	2200      	movs	r2, #0
 8000434:	601a      	str	r2, [r3, #0]
 8000436:	3304      	adds	r3, #4
 8000438:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800043c:	2100      	movs	r1, #0
 800043e:	4618      	mov	r0, r3
 8000440:	f003 fd2e 	bl	8003ea0 <memset>
	char buff2[320] = {0};
 8000444:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8000448:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 800044c:	2200      	movs	r2, #0
 800044e:	601a      	str	r2, [r3, #0]
 8000450:	3304      	adds	r3, #4
 8000452:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8000456:	2100      	movs	r1, #0
 8000458:	4618      	mov	r0, r3
 800045a:	f003 fd21 	bl	8003ea0 <memset>
	va_list arg;
	va_start(arg, fmt);
 800045e:	f507 721f 	add.w	r2, r7, #636	@ 0x27c
 8000462:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8000466:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 800046a:	601a      	str	r2, [r3, #0]
	vsprintf(buff, fmt, arg);
 800046c:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8000470:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 8000474:	f507 70a2 	add.w	r0, r7, #324	@ 0x144
 8000478:	681a      	ldr	r2, [r3, #0]
 800047a:	f8d7 1278 	ldr.w	r1, [r7, #632]	@ 0x278
 800047e:	f003 fd05 	bl	8003e8c <vsiprintf>
	va_end(arg);
	sprintf(buff2,"@>%03d%s",strlen(buff),buff);
 8000482:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8000486:	4618      	mov	r0, r3
 8000488:	f7ff fecc 	bl	8000224 <strlen>
 800048c:	4602      	mov	r2, r0
 800048e:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8000492:	1d38      	adds	r0, r7, #4
 8000494:	490a      	ldr	r1, [pc, #40]	@ (80004c0 <debugPrint+0xa0>)
 8000496:	f003 fcc3 	bl	8003e20 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)buff2,strlen(buff2),100);
 800049a:	1d3b      	adds	r3, r7, #4
 800049c:	4618      	mov	r0, r3
 800049e:	f7ff fec1 	bl	8000224 <strlen>
 80004a2:	4603      	mov	r3, r0
 80004a4:	b29a      	uxth	r2, r3
 80004a6:	1d39      	adds	r1, r7, #4
 80004a8:	2364      	movs	r3, #100	@ 0x64
 80004aa:	4806      	ldr	r0, [pc, #24]	@ (80004c4 <debugPrint+0xa4>)
 80004ac:	f002 fef2 	bl	8003294 <HAL_UART_Transmit>
}
 80004b0:	bf00      	nop
 80004b2:	f507 771c 	add.w	r7, r7, #624	@ 0x270
 80004b6:	46bd      	mov	sp, r7
 80004b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80004bc:	b004      	add	sp, #16
 80004be:	4770      	bx	lr
 80004c0:	080047d8 	.word	0x080047d8
 80004c4:	200008e8 	.word	0x200008e8

080004c8 <round_up_u32>:
//	.isNeedUpdateFirmware = 1,
//	.crc32 = 0x96655B80
//};
uint8_t buffer_page_read_write[CODE_PAGE_SIZE];//buffer to read write flash, assurance roundup 4 byte unit write flash
static uint32_t round_up_u32(uint32_t len)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
    if (len % sizeof(uint32_t))
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	f003 0303 	and.w	r3, r3, #3
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d004      	beq.n	80004e4 <round_up_u32+0x1c>
    {
        return (len + sizeof(uint32_t) - (len % sizeof(uint32_t)));
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	f023 0303 	bic.w	r3, r3, #3
 80004e0:	3304      	adds	r3, #4
 80004e2:	e000      	b.n	80004e6 <round_up_u32+0x1e>
    }

    return len;
 80004e4:	687b      	ldr	r3, [r7, #4]
}
 80004e6:	4618      	mov	r0, r3
 80004e8:	370c      	adds	r7, #12
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bc80      	pop	{r7}
 80004ee:	4770      	bx	lr

080004f0 <firmware_update_commitStateFirmware>:
    	debugPrint("%02X ", *((uint8_t*)buf + i));
    }
    debugPrint("\n");
}
void firmware_update_commitStateFirmware(bool isSuccess)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	4603      	mov	r3, r0
 80004f8:	71fb      	strb	r3, [r7, #7]
		fwUpdateInfo.isNeedUpdateFirmware = false;
 80004fa:	4b11      	ldr	r3, [pc, #68]	@ (8000540 <firmware_update_commitStateFirmware+0x50>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	605a      	str	r2, [r3, #4]
		uint32_t crc32 = HAL_CRC_Calculate(&hcrc, (uint32_t*)&fwUpdateInfo, 2);
 8000500:	2202      	movs	r2, #2
 8000502:	490f      	ldr	r1, [pc, #60]	@ (8000540 <firmware_update_commitStateFirmware+0x50>)
 8000504:	480f      	ldr	r0, [pc, #60]	@ (8000544 <firmware_update_commitStateFirmware+0x54>)
 8000506:	f000 fef4 	bl	80012f2 <HAL_CRC_Calculate>
 800050a:	60f8      	str	r0, [r7, #12]
//		uint32_t crc32 = crc32_compute((uint8_t*)&fwUpdateInfo,sizeof(firmware_update_info_t) - 4, NULL);
		fwUpdateInfo.crc32 = crc32;
 800050c:	4a0c      	ldr	r2, [pc, #48]	@ (8000540 <firmware_update_commitStateFirmware+0x50>)
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	6093      	str	r3, [r2, #8]
		memset(buffer_page_read_write, 0, CODE_PAGE_SIZE);
 8000512:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000516:	2100      	movs	r1, #0
 8000518:	480b      	ldr	r0, [pc, #44]	@ (8000548 <firmware_update_commitStateFirmware+0x58>)
 800051a:	f003 fcc1 	bl	8003ea0 <memset>
		memcpy(buffer_page_read_write, &fwUpdateInfo, sizeof(fwUpdateInfo));
 800051e:	4b0a      	ldr	r3, [pc, #40]	@ (8000548 <firmware_update_commitStateFirmware+0x58>)
 8000520:	4a07      	ldr	r2, [pc, #28]	@ (8000540 <firmware_update_commitStateFirmware+0x50>)
 8000522:	ca07      	ldmia	r2, {r0, r1, r2}
 8000524:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		FLASH_PageErase(FLASH_ADDR_FIRMWARE_UPDATE_INFO);
 8000528:	4808      	ldr	r0, [pc, #32]	@ (800054c <firmware_update_commitStateFirmware+0x5c>)
 800052a:	f001 fa41 	bl	80019b0 <FLASH_PageErase>
		Flash_Write_Data(FLASH_ADDR_FIRMWARE_UPDATE_INFO, (uint32_t*)buffer_page_read_write,3);
 800052e:	2203      	movs	r2, #3
 8000530:	4905      	ldr	r1, [pc, #20]	@ (8000548 <firmware_update_commitStateFirmware+0x58>)
 8000532:	4806      	ldr	r0, [pc, #24]	@ (800054c <firmware_update_commitStateFirmware+0x5c>)
 8000534:	f7ff fea4 	bl	8000280 <Flash_Write_Data>
//		fmc_erase_page_address(FLASH_ADDR_FIRMWARE_UPDATE_INFO);
//		fmc_program(FLASH_ADDR_FIRMWARE_UPDATE_INFO, (uint32_t*)buffer_page_read_write, round_up_u32(sizeof(fwUpdateInfo))/4);

}
 8000538:	bf00      	nop
 800053a:	3710      	adds	r7, #16
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	2000008c 	.word	0x2000008c
 8000544:	20000898 	.word	0x20000898
 8000548:	20000098 	.word	0x20000098
 800054c:	0803f000 	.word	0x0803f000

08000550 <firmware_update_checkHaveNewFimrware>:
bool firmware_update_checkHaveNewFimrware()
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
//		memset(buffer_page_read_write, 0, CODE_PAGE_SIZE);
//		memcpy(buffer_page_read_write, &fwUpdateInfo, sizeof(fwUpdateInfo));
//		user_flash_erase(FLASH_ADDR_FIRMWARE_UPDATE_INFO, 1);
//		user_flash_writeToFlash(FLASH_ADDR_FIRMWARE_UPDATE_INFO, (uint8_t*)buffer_page_read_write, round_up_u32(sizeof(fwUpdateInfo))/4);

		memcpy((void*)&fwUpdateInfo, (void*)FLASH_ADDR_FIRMWARE_UPDATE_INFO, sizeof(fwUpdateInfo));
 8000556:	4b1f      	ldr	r3, [pc, #124]	@ (80005d4 <firmware_update_checkHaveNewFimrware+0x84>)
 8000558:	4a1f      	ldr	r2, [pc, #124]	@ (80005d8 <firmware_update_checkHaveNewFimrware+0x88>)
 800055a:	ca07      	ldmia	r2, {r0, r1, r2}
 800055c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		FIRMWARE_UPDATE_DGB("firmware info size %d: crc - 0x%08X\n", sizeof(firmware_update_info_t), fwUpdateInfo.crc32);
 8000560:	4b1c      	ldr	r3, [pc, #112]	@ (80005d4 <firmware_update_checkHaveNewFimrware+0x84>)
 8000562:	689b      	ldr	r3, [r3, #8]
 8000564:	461a      	mov	r2, r3
 8000566:	210c      	movs	r1, #12
 8000568:	481c      	ldr	r0, [pc, #112]	@ (80005dc <firmware_update_checkHaveNewFimrware+0x8c>)
 800056a:	f7ff ff59 	bl	8000420 <debugPrint>
//		NRF_LOG_HEXDUMP_INFO(&fwUpdateInfo, sizeof(firmware_update_info_t));
		uint32_t crc32 = HAL_CRC_Calculate(&hcrc, (uint32_t*)&fwUpdateInfo, 2);
 800056e:	2202      	movs	r2, #2
 8000570:	4918      	ldr	r1, [pc, #96]	@ (80005d4 <firmware_update_checkHaveNewFimrware+0x84>)
 8000572:	481b      	ldr	r0, [pc, #108]	@ (80005e0 <firmware_update_checkHaveNewFimrware+0x90>)
 8000574:	f000 febd 	bl	80012f2 <HAL_CRC_Calculate>
 8000578:	6078      	str	r0, [r7, #4]
//		uint32_t crc32 = crc32_compute((uint8_t*)&fwUpdateInfo,sizeof(firmware_update_info_t) - 4, NULL);
		FIRMWARE_UPDATE_DGB("crc cal: 0x%08X\n", crc32);
 800057a:	6879      	ldr	r1, [r7, #4]
 800057c:	4819      	ldr	r0, [pc, #100]	@ (80005e4 <firmware_update_checkHaveNewFimrware+0x94>)
 800057e:	f7ff ff4f 	bl	8000420 <debugPrint>
		if(fwUpdateInfo.crc32 == 0xFFFFFFFF || fwUpdateInfo.crc32 != crc32)
 8000582:	4b14      	ldr	r3, [pc, #80]	@ (80005d4 <firmware_update_checkHaveNewFimrware+0x84>)
 8000584:	689b      	ldr	r3, [r3, #8]
 8000586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800058a:	d004      	beq.n	8000596 <firmware_update_checkHaveNewFimrware+0x46>
 800058c:	4b11      	ldr	r3, [pc, #68]	@ (80005d4 <firmware_update_checkHaveNewFimrware+0x84>)
 800058e:	689b      	ldr	r3, [r3, #8]
 8000590:	687a      	ldr	r2, [r7, #4]
 8000592:	429a      	cmp	r2, r3
 8000594:	d003      	beq.n	800059e <firmware_update_checkHaveNewFimrware+0x4e>
		{
				FIRMWARE_UPDATE_DGB("fw info empty\n");
 8000596:	4814      	ldr	r0, [pc, #80]	@ (80005e8 <firmware_update_checkHaveNewFimrware+0x98>)
 8000598:	f7ff ff42 	bl	8000420 <debugPrint>
 800059c:	e00b      	b.n	80005b6 <firmware_update_checkHaveNewFimrware+0x66>
		}
		else
		{
				if(fwUpdateInfo.isNeedUpdateFirmware != 0)
 800059e:	4b0d      	ldr	r3, [pc, #52]	@ (80005d4 <firmware_update_checkHaveNewFimrware+0x84>)
 80005a0:	685b      	ldr	r3, [r3, #4]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d007      	beq.n	80005b6 <firmware_update_checkHaveNewFimrware+0x66>
				{
						FIRMWARE_UPDATE_DGB("Need update new firmware size %d byte\n",fwUpdateInfo.firmwareSize);
 80005a6:	4b0b      	ldr	r3, [pc, #44]	@ (80005d4 <firmware_update_checkHaveNewFimrware+0x84>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4619      	mov	r1, r3
 80005ac:	480f      	ldr	r0, [pc, #60]	@ (80005ec <firmware_update_checkHaveNewFimrware+0x9c>)
 80005ae:	f7ff ff37 	bl	8000420 <debugPrint>
						return true;
 80005b2:	2301      	movs	r3, #1
 80005b4:	e009      	b.n	80005ca <firmware_update_checkHaveNewFimrware+0x7a>
				}
		}
		FIRMWARE_UPDATE_DGB("No need update firmware\n");
 80005b6:	480e      	ldr	r0, [pc, #56]	@ (80005f0 <firmware_update_checkHaveNewFimrware+0xa0>)
 80005b8:	f7ff ff32 	bl	8000420 <debugPrint>
		FIRMWARE_UPDATE_DGB("Current firmware size %d byte\n",fwUpdateInfo.firmwareSize);
 80005bc:	4b05      	ldr	r3, [pc, #20]	@ (80005d4 <firmware_update_checkHaveNewFimrware+0x84>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4619      	mov	r1, r3
 80005c2:	480c      	ldr	r0, [pc, #48]	@ (80005f4 <firmware_update_checkHaveNewFimrware+0xa4>)
 80005c4:	f7ff ff2c 	bl	8000420 <debugPrint>
		return false;
 80005c8:	2300      	movs	r3, #0
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	2000008c 	.word	0x2000008c
 80005d8:	0803f000 	.word	0x0803f000
 80005dc:	080047f4 	.word	0x080047f4
 80005e0:	20000898 	.word	0x20000898
 80005e4:	0800481c 	.word	0x0800481c
 80005e8:	08004830 	.word	0x08004830
 80005ec:	08004840 	.word	0x08004840
 80005f0:	08004868 	.word	0x08004868
 80005f4:	08004884 	.word	0x08004884

080005f8 <firmware_update_updateNewFirmware>:


bool firmware_update_updateNewFirmware()
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b088      	sub	sp, #32
 80005fc:	af00      	add	r7, sp, #0
		uint32_t firmware_size = fwUpdateInfo.firmwareSize;
 80005fe:	4b30      	ldr	r3, [pc, #192]	@ (80006c0 <firmware_update_updateNewFirmware+0xc8>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	60bb      	str	r3, [r7, #8]
		uint32_t num_page_need_erase;
		uint32_t firmware_bytes_left = firmware_size % CODE_PAGE_SIZE;
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800060a:	607b      	str	r3, [r7, #4]
		if(firmware_bytes_left == 0)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d103      	bne.n	800061a <firmware_update_updateNewFirmware+0x22>
		{
				num_page_need_erase = firmware_size/CODE_PAGE_SIZE;
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	0adb      	lsrs	r3, r3, #11
 8000616:	61fb      	str	r3, [r7, #28]
 8000618:	e003      	b.n	8000622 <firmware_update_updateNewFirmware+0x2a>
		}
		else
		{
				num_page_need_erase = 1 + firmware_size/CODE_PAGE_SIZE;
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	0adb      	lsrs	r3, r3, #11
 800061e:	3301      	adds	r3, #1
 8000620:	61fb      	str	r3, [r7, #28]
		}

		uint32_t dst_addr = FLASH_ADDR_START_APPLICATION;
 8000622:	4b28      	ldr	r3, [pc, #160]	@ (80006c4 <firmware_update_updateNewFirmware+0xcc>)
 8000624:	61bb      	str	r3, [r7, #24]
		uint32_t src_addr = FLASH_ADDR_FIRMWARE_UPDATE_DOWNLOAD;
 8000626:	4b28      	ldr	r3, [pc, #160]	@ (80006c8 <firmware_update_updateNewFirmware+0xd0>)
 8000628:	617b      	str	r3, [r7, #20]


		FIRMWARE_UPDATE_DGB("Firmware size: %d bytes, num page erase: %d\n",firmware_size, num_page_need_erase);
 800062a:	69fa      	ldr	r2, [r7, #28]
 800062c:	68b9      	ldr	r1, [r7, #8]
 800062e:	4827      	ldr	r0, [pc, #156]	@ (80006cc <firmware_update_updateNewFirmware+0xd4>)
 8000630:	f7ff fef6 	bl	8000420 <debugPrint>

		FIRMWARE_UPDATE_DGB("src_start_addr: 0x%08X, dst_start_addr: 0x%08X\n",src_addr,dst_addr);
 8000634:	69ba      	ldr	r2, [r7, #24]
 8000636:	6979      	ldr	r1, [r7, #20]
 8000638:	4825      	ldr	r0, [pc, #148]	@ (80006d0 <firmware_update_updateNewFirmware+0xd8>)
 800063a:	f7ff fef1 	bl	8000420 <debugPrint>

		for(uint32_t page_idx = 0; page_idx < num_page_need_erase; page_idx++)
 800063e:	2300      	movs	r3, #0
 8000640:	613b      	str	r3, [r7, #16]
 8000642:	e02f      	b.n	80006a4 <firmware_update_updateNewFirmware+0xac>
		{
				uint32_t size_copy = CODE_PAGE_SIZE;
 8000644:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000648:	60fb      	str	r3, [r7, #12]
				FLASH_PageErase(dst_addr);
 800064a:	69b8      	ldr	r0, [r7, #24]
 800064c:	f001 f9b0 	bl	80019b0 <FLASH_PageErase>
				if((page_idx	== num_page_need_erase - 1) && firmware_bytes_left > 0)
 8000650:	69fb      	ldr	r3, [r7, #28]
 8000652:	3b01      	subs	r3, #1
 8000654:	693a      	ldr	r2, [r7, #16]
 8000656:	429a      	cmp	r2, r3
 8000658:	d106      	bne.n	8000668 <firmware_update_updateNewFirmware+0x70>
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d003      	beq.n	8000668 <firmware_update_updateNewFirmware+0x70>
				{
						size_copy = round_up_u32(firmware_bytes_left);
 8000660:	6878      	ldr	r0, [r7, #4]
 8000662:	f7ff ff31 	bl	80004c8 <round_up_u32>
 8000666:	60f8      	str	r0, [r7, #12]
				}
				FIRMWARE_UPDATE_DGB("copy from 0x%08X to 0x%08X with %d bytes\n",src_addr, dst_addr, size_copy);
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	69ba      	ldr	r2, [r7, #24]
 800066c:	6979      	ldr	r1, [r7, #20]
 800066e:	4819      	ldr	r0, [pc, #100]	@ (80006d4 <firmware_update_updateNewFirmware+0xdc>)
 8000670:	f7ff fed6 	bl	8000420 <debugPrint>
				memcpy(buffer_page_read_write, (void*)src_addr, size_copy);
 8000674:	697b      	ldr	r3, [r7, #20]
 8000676:	68fa      	ldr	r2, [r7, #12]
 8000678:	4619      	mov	r1, r3
 800067a:	4817      	ldr	r0, [pc, #92]	@ (80006d8 <firmware_update_updateNewFirmware+0xe0>)
 800067c:	f003 fc44 	bl	8003f08 <memcpy>
				Flash_Write_Array(dst_addr, (uint8_t*)buffer_page_read_write, size_copy);
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	b29b      	uxth	r3, r3
 8000684:	461a      	mov	r2, r3
 8000686:	4914      	ldr	r1, [pc, #80]	@ (80006d8 <firmware_update_updateNewFirmware+0xe0>)
 8000688:	69b8      	ldr	r0, [r7, #24]
 800068a:	f7ff fe55 	bl	8000338 <Flash_Write_Array>

				dst_addr = dst_addr + CODE_PAGE_SIZE;
 800068e:	69bb      	ldr	r3, [r7, #24]
 8000690:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8000694:	61bb      	str	r3, [r7, #24]
				src_addr = src_addr + CODE_PAGE_SIZE;
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800069c:	617b      	str	r3, [r7, #20]
		for(uint32_t page_idx = 0; page_idx < num_page_need_erase; page_idx++)
 800069e:	693b      	ldr	r3, [r7, #16]
 80006a0:	3301      	adds	r3, #1
 80006a2:	613b      	str	r3, [r7, #16]
 80006a4:	693a      	ldr	r2, [r7, #16]
 80006a6:	69fb      	ldr	r3, [r7, #28]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	d3cb      	bcc.n	8000644 <firmware_update_updateNewFirmware+0x4c>
		}

		//calculate checksum or hash to verify
		dst_addr = FLASH_ADDR_START_APPLICATION;
 80006ac:	4b05      	ldr	r3, [pc, #20]	@ (80006c4 <firmware_update_updateNewFirmware+0xcc>)
 80006ae:	61bb      	str	r3, [r7, #24]
//		{
//				FIRMWARE_UPDATE_DGB("hash not match\n");
//				return false;
//		}
//		FIRMWARE_UPDATE_DGB("hash check OK\n");
		firmware_update_commitStateFirmware(true);
 80006b0:	2001      	movs	r0, #1
 80006b2:	f7ff ff1d 	bl	80004f0 <firmware_update_commitStateFirmware>
		return true;
 80006b6:	2301      	movs	r3, #1
//			FIRMWARE_UPDATE_DGB("Something error!!!\n");
//
//		//return false if verify fails or any error
//		return false;
//
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3720      	adds	r7, #32
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	2000008c 	.word	0x2000008c
 80006c4:	08005000 	.word	0x08005000
 80006c8:	08021800 	.word	0x08021800
 80006cc:	080048a4 	.word	0x080048a4
 80006d0:	080048d4 	.word	0x080048d4
 80006d4:	08004904 	.word	0x08004904
 80006d8:	20000098 	.word	0x20000098

080006dc <BootJumpToApplication>:
#include "stdio.h"
#define ADDR_APP_PROGRAM 0x08005000
#include "stm32f1xx_hal.h"

void BootJumpToApplication(uint32_t appAddress)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e4:	b672      	cpsid	i
}
 80006e6:	bf00      	nop
    // VÃ´ hiá»‡u hÃ³a táº¥t cáº£ cÃ¡c ngáº¯t

	__disable_irq();
    // Reset táº¥t cáº£ cÃ¡c ngáº¯t pending trong NVIC
    for (uint32_t i = 0; i < 8; i++) {
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
 80006ec:	e010      	b.n	8000710 <BootJumpToApplication+0x34>
        NVIC->ICER[i] = 0xFFFFFFFF;
 80006ee:	4a1c      	ldr	r2, [pc, #112]	@ (8000760 <BootJumpToApplication+0x84>)
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	3320      	adds	r3, #32
 80006f4:	f04f 31ff 	mov.w	r1, #4294967295
 80006f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        NVIC->ICPR[i] = 0xFFFFFFFF;
 80006fc:	4a18      	ldr	r2, [pc, #96]	@ (8000760 <BootJumpToApplication+0x84>)
 80006fe:	697b      	ldr	r3, [r7, #20]
 8000700:	3360      	adds	r3, #96	@ 0x60
 8000702:	f04f 31ff 	mov.w	r1, #4294967295
 8000706:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint32_t i = 0; i < 8; i++) {
 800070a:	697b      	ldr	r3, [r7, #20]
 800070c:	3301      	adds	r3, #1
 800070e:	617b      	str	r3, [r7, #20]
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	2b07      	cmp	r3, #7
 8000714:	d9eb      	bls.n	80006ee <BootJumpToApplication+0x12>
    }
    // Táº¯t bá»™ Ä‘áº¿m SysTick
    SysTick->CTRL = 0;
 8000716:	4b13      	ldr	r3, [pc, #76]	@ (8000764 <BootJumpToApplication+0x88>)
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
    SCB->ICSR |= SCB_ICSR_PENDSTCLR_Msk;
 800071c:	4b12      	ldr	r3, [pc, #72]	@ (8000768 <BootJumpToApplication+0x8c>)
 800071e:	685b      	ldr	r3, [r3, #4]
 8000720:	4a11      	ldr	r2, [pc, #68]	@ (8000768 <BootJumpToApplication+0x8c>)
 8000722:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000726:	6053      	str	r3, [r2, #4]

    // VÃ´ hiá»‡u hÃ³a cÃ¡c lá»—i há»‡ thá»‘ng (usage, bus, memory faults)
    SCB->SHCSR &= ~(SCB_SHCSR_USGFAULTENA_Msk |
 8000728:	4b0f      	ldr	r3, [pc, #60]	@ (8000768 <BootJumpToApplication+0x8c>)
 800072a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800072c:	4a0e      	ldr	r2, [pc, #56]	@ (8000768 <BootJumpToApplication+0x8c>)
 800072e:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8000732:	6253      	str	r3, [r2, #36]	@ 0x24
                    SCB_SHCSR_BUSFAULTENA_Msk |
                    SCB_SHCSR_MEMFAULTENA_Msk);

    // Thiáº¿t láº­p láº¡i vector table Ä‘á»ƒ trá»? Ä‘áº¿n á»©ng dá»¥ng
    SCB->VTOR = appAddress;
 8000734:	4a0c      	ldr	r2, [pc, #48]	@ (8000768 <BootJumpToApplication+0x8c>)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	6093      	str	r3, [r2, #8]

    // Thiáº¿t láº­p Main Stack Pointer tá»« vector table cá»§a á»©ng dá»¥ng
    __set_MSP(*((volatile uint32_t*)appAddress));
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	f383 8808 	msr	MSP, r3
}
 8000746:	bf00      	nop

    // Láº¥y Ä‘á»‹a chá»‰ cá»§a hÃ m reset handler tá»« vector table
    uint32_t jumpAddress = *((volatile uint32_t*)(appAddress + 4));
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	3304      	adds	r3, #4
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	613b      	str	r3, [r7, #16]
    void (*resetHandler)(void) = (void*)jumpAddress;
 8000750:	693b      	ldr	r3, [r7, #16]
 8000752:	60fb      	str	r3, [r7, #12]
    // Nháº£y Ä‘áº¿n hÃ m reset handler cá»§a á»©ng dá»¥ng
    resetHandler();
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	4798      	blx	r3
}
 8000758:	bf00      	nop
 800075a:	3718      	adds	r7, #24
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	e000e100 	.word	0xe000e100
 8000764:	e000e010 	.word	0xe000e010
 8000768:	e000ed00 	.word	0xe000ed00

0800076c <SOFT_RESET>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SOFT_RESET(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000770:	b672      	cpsid	i
}
 8000772:	bf00      	nop
    __disable_irq();// Close all interrupts
	HAL_NVIC_SystemReset();//RESET MCU
 8000774:	f000 fd91 	bl	800129a <HAL_NVIC_SystemReset>
}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}

0800077c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8000782:	b662      	cpsie	i
}
 8000784:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000786:	f000 fbeb 	bl	8000f60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800078a:	f000 f889 	bl	80008a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078e:	f000 f9ad 	bl	8000aec <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000792:	f000 f957 	bl	8000a44 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000796:	f000 f97f 	bl	8000a98 <MX_USART2_UART_Init>
  MX_CRC_Init();
 800079a:	f000 f8c7 	bl	800092c <MX_CRC_Init>
  MX_TIM3_Init();
 800079e:	f000 f8d9 	bl	8000954 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80007a2:	210c      	movs	r1, #12
 80007a4:	4834      	ldr	r0, [pc, #208]	@ (8000878 <main+0xfc>)
 80007a6:	f001 ff89 	bl	80026bc <HAL_TIM_PWM_Start>
  htim3.Instance->CCR4 = 200;
 80007aa:	4b33      	ldr	r3, [pc, #204]	@ (8000878 <main+0xfc>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	22c8      	movs	r2, #200	@ 0xc8
 80007b0:	641a      	str	r2, [r3, #64]	@ 0x40
  debugPrint("BOOTLOADER: Init done\r\n");
 80007b2:	4832      	ldr	r0, [pc, #200]	@ (800087c <main+0x100>)
 80007b4:	f7ff fe34 	bl	8000420 <debugPrint>
  debugPrint("BOOTLOADER: HW_VER: %d, FW_VER: %d\n", HW_VER_NUMBER, FIRM_VER);
 80007b8:	2201      	movs	r2, #1
 80007ba:	2101      	movs	r1, #1
 80007bc:	4830      	ldr	r0, [pc, #192]	@ (8000880 <main+0x104>)
 80007be:	f7ff fe2f 	bl	8000420 <debugPrint>
  uint16_t cnt = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	807b      	strh	r3, [r7, #2]
  debugPrint("Bootloader custom start!\n");
 80007c6:	482f      	ldr	r0, [pc, #188]	@ (8000884 <main+0x108>)
 80007c8:	f7ff fe2a 	bl	8000420 <debugPrint>
  HAL_Delay(100);
 80007cc:	2064      	movs	r0, #100	@ 0x64
 80007ce:	f000 fc29 	bl	8001024 <HAL_Delay>
  volatile uint8_t retry = 4;
 80007d2:	2304      	movs	r3, #4
 80007d4:	707b      	strb	r3, [r7, #1]

  if(firmware_update_checkHaveNewFimrware())
 80007d6:	f7ff febb 	bl	8000550 <firmware_update_checkHaveNewFimrware>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d02a      	beq.n	8000836 <main+0xba>
  		{
  			while (--retry)
 80007e0:	e012      	b.n	8000808 <main+0x8c>
  			{
  				if(firmware_update_updateNewFirmware())
 80007e2:	f7ff ff09 	bl	80005f8 <firmware_update_updateNewFirmware>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d003      	beq.n	80007f4 <main+0x78>
  				{
  					debugPrint("update firmware success!\n");
 80007ec:	4826      	ldr	r0, [pc, #152]	@ (8000888 <main+0x10c>)
 80007ee:	f7ff fe17 	bl	8000420 <debugPrint>
  						break;
 80007f2:	e011      	b.n	8000818 <main+0x9c>
  				}
  				else
  				{
  					debugPrint("update firmware fail, retry left %d",retry);
 80007f4:	787b      	ldrb	r3, [r7, #1]
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	4619      	mov	r1, r3
 80007fa:	4824      	ldr	r0, [pc, #144]	@ (800088c <main+0x110>)
 80007fc:	f7ff fe10 	bl	8000420 <debugPrint>
  				}
  				HAL_Delay(5000);
 8000800:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000804:	f000 fc0e 	bl	8001024 <HAL_Delay>
  			while (--retry)
 8000808:	787b      	ldrb	r3, [r7, #1]
 800080a:	b2db      	uxtb	r3, r3
 800080c:	3b01      	subs	r3, #1
 800080e:	b2db      	uxtb	r3, r3
 8000810:	461a      	mov	r2, r3
 8000812:	707a      	strb	r2, [r7, #1]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d1e4      	bne.n	80007e2 <main+0x66>
  			}
  			if(retry == 0)
 8000818:	787b      	ldrb	r3, [r7, #1]
 800081a:	b2db      	uxtb	r3, r3
 800081c:	2b00      	cmp	r3, #0
 800081e:	d10a      	bne.n	8000836 <main+0xba>
  			{
  				debugPrint("restart....\n");
 8000820:	481b      	ldr	r0, [pc, #108]	@ (8000890 <main+0x114>)
 8000822:	f7ff fdfd 	bl	8000420 <debugPrint>
  				HAL_Delay(10000);
 8000826:	f242 7010 	movw	r0, #10000	@ 0x2710
 800082a:	f000 fbfb 	bl	8001024 <HAL_Delay>
  				SOFT_RESET();
 800082e:	f7ff ff9d 	bl	800076c <SOFT_RESET>
  				while(1);
 8000832:	bf00      	nop
 8000834:	e7fd      	b.n	8000832 <main+0xb6>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  for (int i = 0; i < 6; i++)
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	e00a      	b.n	8000852 <main+0xd6>
      {
		debugPrint("jump to app ... %d\n",i);
 800083c:	6879      	ldr	r1, [r7, #4]
 800083e:	4815      	ldr	r0, [pc, #84]	@ (8000894 <main+0x118>)
 8000840:	f7ff fdee 	bl	8000420 <debugPrint>
//		 HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
		 HAL_Delay(1000);
 8000844:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000848:	f000 fbec 	bl	8001024 <HAL_Delay>
	  for (int i = 0; i < 6; i++)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	3301      	adds	r3, #1
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2b05      	cmp	r3, #5
 8000856:	ddf1      	ble.n	800083c <main+0xc0>
      }
				cnt++;
 8000858:	887b      	ldrh	r3, [r7, #2]
 800085a:	3301      	adds	r3, #1
 800085c:	807b      	strh	r3, [r7, #2]
				break;
 800085e:	bf00      	nop
  }
  BootJumpToApplication(FLASH_ADDR_START_APPLICATION);
 8000860:	480d      	ldr	r0, [pc, #52]	@ (8000898 <main+0x11c>)
 8000862:	f7ff ff3b 	bl	80006dc <BootJumpToApplication>
  debugPrint("After main, should never be reached.\n");
 8000866:	480d      	ldr	r0, [pc, #52]	@ (800089c <main+0x120>)
 8000868:	f7ff fdda 	bl	8000420 <debugPrint>
 800086c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800086e:	4618      	mov	r0, r3
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	200008a0 	.word	0x200008a0
 800087c:	08004930 	.word	0x08004930
 8000880:	08004948 	.word	0x08004948
 8000884:	0800496c 	.word	0x0800496c
 8000888:	08004988 	.word	0x08004988
 800088c:	080049a4 	.word	0x080049a4
 8000890:	080049c8 	.word	0x080049c8
 8000894:	080049d8 	.word	0x080049d8
 8000898:	08005000 	.word	0x08005000
 800089c:	080049ec 	.word	0x080049ec

080008a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b090      	sub	sp, #64	@ 0x40
 80008a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a6:	f107 0318 	add.w	r3, r7, #24
 80008aa:	2228      	movs	r2, #40	@ 0x28
 80008ac:	2100      	movs	r1, #0
 80008ae:	4618      	mov	r0, r3
 80008b0:	f003 faf6 	bl	8003ea0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b4:	1d3b      	adds	r3, r7, #4
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
 80008c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008c2:	2301      	movs	r3, #1
 80008c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80008cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80008d0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008d2:	2301      	movs	r3, #1
 80008d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d6:	2302      	movs	r3, #2
 80008d8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008de:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008e0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80008e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e6:	f107 0318 	add.w	r3, r7, #24
 80008ea:	4618      	mov	r0, r3
 80008ec:	f001 fa2c 	bl	8001d48 <HAL_RCC_OscConfig>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80008f6:	f000 f957 	bl	8000ba8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fa:	230f      	movs	r3, #15
 80008fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008fe:	2302      	movs	r3, #2
 8000900:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000906:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800090a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800090c:	2300      	movs	r3, #0
 800090e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	2102      	movs	r1, #2
 8000914:	4618      	mov	r0, r3
 8000916:	f001 fc99 	bl	800224c <HAL_RCC_ClockConfig>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000920:	f000 f942 	bl	8000ba8 <Error_Handler>
  }
}
 8000924:	bf00      	nop
 8000926:	3740      	adds	r7, #64	@ 0x40
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}

0800092c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000930:	4b06      	ldr	r3, [pc, #24]	@ (800094c <MX_CRC_Init+0x20>)
 8000932:	4a07      	ldr	r2, [pc, #28]	@ (8000950 <MX_CRC_Init+0x24>)
 8000934:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000936:	4805      	ldr	r0, [pc, #20]	@ (800094c <MX_CRC_Init+0x20>)
 8000938:	f000 fcbf 	bl	80012ba <HAL_CRC_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000942:	f000 f931 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000898 	.word	0x20000898
 8000950:	40023000 	.word	0x40023000

08000954 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08e      	sub	sp, #56	@ 0x38
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800095a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]
 8000966:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000968:	f107 0320 	add.w	r3, r7, #32
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
 8000980:	615a      	str	r2, [r3, #20]
 8000982:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000984:	4b2d      	ldr	r3, [pc, #180]	@ (8000a3c <MX_TIM3_Init+0xe8>)
 8000986:	4a2e      	ldr	r2, [pc, #184]	@ (8000a40 <MX_TIM3_Init+0xec>)
 8000988:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = 18000-1;
 800098a:	4b2c      	ldr	r3, [pc, #176]	@ (8000a3c <MX_TIM3_Init+0xe8>)
 800098c:	f244 624f 	movw	r2, #17999	@ 0x464f
 8000990:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000992:	4b2a      	ldr	r3, [pc, #168]	@ (8000a3c <MX_TIM3_Init+0xe8>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
    htim3.Init.Period = 2000-1;
 8000998:	4b28      	ldr	r3, [pc, #160]	@ (8000a3c <MX_TIM3_Init+0xe8>)
 800099a:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800099e:	60da      	str	r2, [r3, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a0:	4b26      	ldr	r3, [pc, #152]	@ (8000a3c <MX_TIM3_Init+0xe8>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	611a      	str	r2, [r3, #16]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009a6:	4b25      	ldr	r3, [pc, #148]	@ (8000a3c <MX_TIM3_Init+0xe8>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009ac:	4823      	ldr	r0, [pc, #140]	@ (8000a3c <MX_TIM3_Init+0xe8>)
 80009ae:	f001 fddd 	bl	800256c <HAL_TIM_Base_Init>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80009b8:	f000 f8f6 	bl	8000ba8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009c6:	4619      	mov	r1, r3
 80009c8:	481c      	ldr	r0, [pc, #112]	@ (8000a3c <MX_TIM3_Init+0xe8>)
 80009ca:	f001 fff3 	bl	80029b4 <HAL_TIM_ConfigClockSource>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80009d4:	f000 f8e8 	bl	8000ba8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80009d8:	4818      	ldr	r0, [pc, #96]	@ (8000a3c <MX_TIM3_Init+0xe8>)
 80009da:	f001 fe16 	bl	800260a <HAL_TIM_PWM_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80009e4:	f000 f8e0 	bl	8000ba8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009e8:	2300      	movs	r3, #0
 80009ea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ec:	2300      	movs	r3, #0
 80009ee:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009f0:	f107 0320 	add.w	r3, r7, #32
 80009f4:	4619      	mov	r1, r3
 80009f6:	4811      	ldr	r0, [pc, #68]	@ (8000a3c <MX_TIM3_Init+0xe8>)
 80009f8:	f002 fb90 	bl	800311c <HAL_TIMEx_MasterConfigSynchronization>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000a02:	f000 f8d1 	bl	8000ba8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a06:	2360      	movs	r3, #96	@ 0x60
 8000a08:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	220c      	movs	r2, #12
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4807      	ldr	r0, [pc, #28]	@ (8000a3c <MX_TIM3_Init+0xe8>)
 8000a1e:	f001 ff07 	bl	8002830 <HAL_TIM_PWM_ConfigChannel>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000a28:	f000 f8be 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a2c:	4803      	ldr	r0, [pc, #12]	@ (8000a3c <MX_TIM3_Init+0xe8>)
 8000a2e:	f000 f92f 	bl	8000c90 <HAL_TIM_MspPostInit>

}
 8000a32:	bf00      	nop
 8000a34:	3738      	adds	r7, #56	@ 0x38
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	200008a0 	.word	0x200008a0
 8000a40:	40000400 	.word	0x40000400

08000a44 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a48:	4b11      	ldr	r3, [pc, #68]	@ (8000a90 <MX_USART1_UART_Init+0x4c>)
 8000a4a:	4a12      	ldr	r2, [pc, #72]	@ (8000a94 <MX_USART1_UART_Init+0x50>)
 8000a4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000a4e:	4b10      	ldr	r3, [pc, #64]	@ (8000a90 <MX_USART1_UART_Init+0x4c>)
 8000a50:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000a54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a56:	4b0e      	ldr	r3, [pc, #56]	@ (8000a90 <MX_USART1_UART_Init+0x4c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a90 <MX_USART1_UART_Init+0x4c>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a62:	4b0b      	ldr	r3, [pc, #44]	@ (8000a90 <MX_USART1_UART_Init+0x4c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a68:	4b09      	ldr	r3, [pc, #36]	@ (8000a90 <MX_USART1_UART_Init+0x4c>)
 8000a6a:	220c      	movs	r2, #12
 8000a6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6e:	4b08      	ldr	r3, [pc, #32]	@ (8000a90 <MX_USART1_UART_Init+0x4c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a74:	4b06      	ldr	r3, [pc, #24]	@ (8000a90 <MX_USART1_UART_Init+0x4c>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a7a:	4805      	ldr	r0, [pc, #20]	@ (8000a90 <MX_USART1_UART_Init+0x4c>)
 8000a7c:	f002 fbba 	bl	80031f4 <HAL_UART_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a86:	f000 f88f 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	200008e8 	.word	0x200008e8
 8000a94:	40013800 	.word	0x40013800

08000a98 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a9c:	4b11      	ldr	r3, [pc, #68]	@ (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000a9e:	4a12      	ldr	r2, [pc, #72]	@ (8000ae8 <MX_USART2_UART_Init+0x50>)
 8000aa0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aa2:	4b10      	ldr	r3, [pc, #64]	@ (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000aa4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000aa8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000abc:	4b09      	ldr	r3, [pc, #36]	@ (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000abe:	220c      	movs	r2, #12
 8000ac0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac2:	4b08      	ldr	r3, [pc, #32]	@ (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	@ (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ace:	4805      	ldr	r0, [pc, #20]	@ (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000ad0:	f002 fb90 	bl	80031f4 <HAL_UART_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ada:	f000 f865 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000930 	.word	0x20000930
 8000ae8:	40004400 	.word	0x40004400

08000aec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b088      	sub	sp, #32
 8000af0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af2:	f107 0310 	add.w	r3, r7, #16
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b00:	4b26      	ldr	r3, [pc, #152]	@ (8000b9c <MX_GPIO_Init+0xb0>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	4a25      	ldr	r2, [pc, #148]	@ (8000b9c <MX_GPIO_Init+0xb0>)
 8000b06:	f043 0320 	orr.w	r3, r3, #32
 8000b0a:	6193      	str	r3, [r2, #24]
 8000b0c:	4b23      	ldr	r3, [pc, #140]	@ (8000b9c <MX_GPIO_Init+0xb0>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	f003 0320 	and.w	r3, r3, #32
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b18:	4b20      	ldr	r3, [pc, #128]	@ (8000b9c <MX_GPIO_Init+0xb0>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	4a1f      	ldr	r2, [pc, #124]	@ (8000b9c <MX_GPIO_Init+0xb0>)
 8000b1e:	f043 0304 	orr.w	r3, r3, #4
 8000b22:	6193      	str	r3, [r2, #24]
 8000b24:	4b1d      	ldr	r3, [pc, #116]	@ (8000b9c <MX_GPIO_Init+0xb0>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	f003 0304 	and.w	r3, r3, #4
 8000b2c:	60bb      	str	r3, [r7, #8]
 8000b2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b30:	4b1a      	ldr	r3, [pc, #104]	@ (8000b9c <MX_GPIO_Init+0xb0>)
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	4a19      	ldr	r2, [pc, #100]	@ (8000b9c <MX_GPIO_Init+0xb0>)
 8000b36:	f043 0308 	orr.w	r3, r3, #8
 8000b3a:	6193      	str	r3, [r2, #24]
 8000b3c:	4b17      	ldr	r3, [pc, #92]	@ (8000b9c <MX_GPIO_Init+0xb0>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	f003 0308 	and.w	r3, r3, #8
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_DE_GPIO_Port, RS485_DE_Pin, GPIO_PIN_RESET);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2102      	movs	r1, #2
 8000b4c:	4814      	ldr	r0, [pc, #80]	@ (8000ba0 <MX_GPIO_Init+0xb4>)
 8000b4e:	f001 f8e3 	bl	8001d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2101      	movs	r1, #1
 8000b56:	4813      	ldr	r0, [pc, #76]	@ (8000ba4 <MX_GPIO_Init+0xb8>)
 8000b58:	f001 f8de 	bl	8001d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RS485_DE_Pin */
  GPIO_InitStruct.Pin = RS485_DE_Pin;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b60:	2301      	movs	r3, #1
 8000b62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RS485_DE_GPIO_Port, &GPIO_InitStruct);
 8000b6c:	f107 0310 	add.w	r3, r7, #16
 8000b70:	4619      	mov	r1, r3
 8000b72:	480b      	ldr	r0, [pc, #44]	@ (8000ba0 <MX_GPIO_Init+0xb4>)
 8000b74:	f000 ff3c 	bl	80019f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b84:	2302      	movs	r3, #2
 8000b86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000b88:	f107 0310 	add.w	r3, r7, #16
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4805      	ldr	r0, [pc, #20]	@ (8000ba4 <MX_GPIO_Init+0xb8>)
 8000b90:	f000 ff2e 	bl	80019f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b94:	bf00      	nop
 8000b96:	3720      	adds	r7, #32
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	40010800 	.word	0x40010800
 8000ba4:	40010c00 	.word	0x40010c00

08000ba8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000bac:	b672      	cpsid	i
}
 8000bae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb0:	bf00      	nop
 8000bb2:	e7fd      	b.n	8000bb0 <Error_Handler+0x8>

08000bb4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bba:	4b15      	ldr	r3, [pc, #84]	@ (8000c10 <HAL_MspInit+0x5c>)
 8000bbc:	699b      	ldr	r3, [r3, #24]
 8000bbe:	4a14      	ldr	r2, [pc, #80]	@ (8000c10 <HAL_MspInit+0x5c>)
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	6193      	str	r3, [r2, #24]
 8000bc6:	4b12      	ldr	r3, [pc, #72]	@ (8000c10 <HAL_MspInit+0x5c>)
 8000bc8:	699b      	ldr	r3, [r3, #24]
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	60bb      	str	r3, [r7, #8]
 8000bd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd2:	4b0f      	ldr	r3, [pc, #60]	@ (8000c10 <HAL_MspInit+0x5c>)
 8000bd4:	69db      	ldr	r3, [r3, #28]
 8000bd6:	4a0e      	ldr	r2, [pc, #56]	@ (8000c10 <HAL_MspInit+0x5c>)
 8000bd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bdc:	61d3      	str	r3, [r2, #28]
 8000bde:	4b0c      	ldr	r3, [pc, #48]	@ (8000c10 <HAL_MspInit+0x5c>)
 8000be0:	69db      	ldr	r3, [r3, #28]
 8000be2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000bea:	4b0a      	ldr	r3, [pc, #40]	@ (8000c14 <HAL_MspInit+0x60>)
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	4a04      	ldr	r2, [pc, #16]	@ (8000c14 <HAL_MspInit+0x60>)
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c06:	bf00      	nop
 8000c08:	3714      	adds	r7, #20
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr
 8000c10:	40021000 	.word	0x40021000
 8000c14:	40010000 	.word	0x40010000

08000c18 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a09      	ldr	r2, [pc, #36]	@ (8000c4c <HAL_CRC_MspInit+0x34>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d10b      	bne.n	8000c42 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000c2a:	4b09      	ldr	r3, [pc, #36]	@ (8000c50 <HAL_CRC_MspInit+0x38>)
 8000c2c:	695b      	ldr	r3, [r3, #20]
 8000c2e:	4a08      	ldr	r2, [pc, #32]	@ (8000c50 <HAL_CRC_MspInit+0x38>)
 8000c30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c34:	6153      	str	r3, [r2, #20]
 8000c36:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <HAL_CRC_MspInit+0x38>)
 8000c38:	695b      	ldr	r3, [r3, #20]
 8000c3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8000c42:	bf00      	nop
 8000c44:	3714      	adds	r7, #20
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bc80      	pop	{r7}
 8000c4a:	4770      	bx	lr
 8000c4c:	40023000 	.word	0x40023000
 8000c50:	40021000 	.word	0x40021000

08000c54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a09      	ldr	r2, [pc, #36]	@ (8000c88 <HAL_TIM_Base_MspInit+0x34>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d10b      	bne.n	8000c7e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c66:	4b09      	ldr	r3, [pc, #36]	@ (8000c8c <HAL_TIM_Base_MspInit+0x38>)
 8000c68:	69db      	ldr	r3, [r3, #28]
 8000c6a:	4a08      	ldr	r2, [pc, #32]	@ (8000c8c <HAL_TIM_Base_MspInit+0x38>)
 8000c6c:	f043 0302 	orr.w	r3, r3, #2
 8000c70:	61d3      	str	r3, [r2, #28]
 8000c72:	4b06      	ldr	r3, [pc, #24]	@ (8000c8c <HAL_TIM_Base_MspInit+0x38>)
 8000c74:	69db      	ldr	r3, [r3, #28]
 8000c76:	f003 0302 	and.w	r3, r3, #2
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000c7e:	bf00      	nop
 8000c80:	3714      	adds	r7, #20
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr
 8000c88:	40000400 	.word	0x40000400
 8000c8c:	40021000 	.word	0x40021000

08000c90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b088      	sub	sp, #32
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 0310 	add.w	r3, r7, #16
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a0f      	ldr	r2, [pc, #60]	@ (8000ce8 <HAL_TIM_MspPostInit+0x58>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d117      	bne.n	8000ce0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000cec <HAL_TIM_MspPostInit+0x5c>)
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	4a0d      	ldr	r2, [pc, #52]	@ (8000cec <HAL_TIM_MspPostInit+0x5c>)
 8000cb6:	f043 0308 	orr.w	r3, r3, #8
 8000cba:	6193      	str	r3, [r2, #24]
 8000cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8000cec <HAL_TIM_MspPostInit+0x5c>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	f003 0308 	and.w	r3, r3, #8
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd4:	f107 0310 	add.w	r3, r7, #16
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4805      	ldr	r0, [pc, #20]	@ (8000cf0 <HAL_TIM_MspPostInit+0x60>)
 8000cdc:	f000 fe88 	bl	80019f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000ce0:	bf00      	nop
 8000ce2:	3720      	adds	r7, #32
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40000400 	.word	0x40000400
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	40010c00 	.word	0x40010c00

08000cf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	@ 0x28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 0318 	add.w	r3, r7, #24
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a3f      	ldr	r2, [pc, #252]	@ (8000e0c <HAL_UART_MspInit+0x118>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d13a      	bne.n	8000d8a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d14:	4b3e      	ldr	r3, [pc, #248]	@ (8000e10 <HAL_UART_MspInit+0x11c>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	4a3d      	ldr	r2, [pc, #244]	@ (8000e10 <HAL_UART_MspInit+0x11c>)
 8000d1a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d1e:	6193      	str	r3, [r2, #24]
 8000d20:	4b3b      	ldr	r3, [pc, #236]	@ (8000e10 <HAL_UART_MspInit+0x11c>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d28:	617b      	str	r3, [r7, #20]
 8000d2a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2c:	4b38      	ldr	r3, [pc, #224]	@ (8000e10 <HAL_UART_MspInit+0x11c>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	4a37      	ldr	r2, [pc, #220]	@ (8000e10 <HAL_UART_MspInit+0x11c>)
 8000d32:	f043 0304 	orr.w	r3, r3, #4
 8000d36:	6193      	str	r3, [r2, #24]
 8000d38:	4b35      	ldr	r3, [pc, #212]	@ (8000e10 <HAL_UART_MspInit+0x11c>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	f003 0304 	and.w	r3, r3, #4
 8000d40:	613b      	str	r3, [r7, #16]
 8000d42:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_MCU_Pin;
 8000d44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(TX_MCU_GPIO_Port, &GPIO_InitStruct);
 8000d52:	f107 0318 	add.w	r3, r7, #24
 8000d56:	4619      	mov	r1, r3
 8000d58:	482e      	ldr	r0, [pc, #184]	@ (8000e14 <HAL_UART_MspInit+0x120>)
 8000d5a:	f000 fe49 	bl	80019f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RX_MCU_Pin;
 8000d5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(RX_MCU_GPIO_Port, &GPIO_InitStruct);
 8000d6c:	f107 0318 	add.w	r3, r7, #24
 8000d70:	4619      	mov	r1, r3
 8000d72:	4828      	ldr	r0, [pc, #160]	@ (8000e14 <HAL_UART_MspInit+0x120>)
 8000d74:	f000 fe3c 	bl	80019f0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	2025      	movs	r0, #37	@ 0x25
 8000d7e:	f000 fa62 	bl	8001246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d82:	2025      	movs	r0, #37	@ 0x25
 8000d84:	f000 fa7b 	bl	800127e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d88:	e03c      	b.n	8000e04 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a22      	ldr	r2, [pc, #136]	@ (8000e18 <HAL_UART_MspInit+0x124>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d137      	bne.n	8000e04 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d94:	4b1e      	ldr	r3, [pc, #120]	@ (8000e10 <HAL_UART_MspInit+0x11c>)
 8000d96:	69db      	ldr	r3, [r3, #28]
 8000d98:	4a1d      	ldr	r2, [pc, #116]	@ (8000e10 <HAL_UART_MspInit+0x11c>)
 8000d9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d9e:	61d3      	str	r3, [r2, #28]
 8000da0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e10 <HAL_UART_MspInit+0x11c>)
 8000da2:	69db      	ldr	r3, [r3, #28]
 8000da4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dac:	4b18      	ldr	r3, [pc, #96]	@ (8000e10 <HAL_UART_MspInit+0x11c>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	4a17      	ldr	r2, [pc, #92]	@ (8000e10 <HAL_UART_MspInit+0x11c>)
 8000db2:	f043 0304 	orr.w	r3, r3, #4
 8000db6:	6193      	str	r3, [r2, #24]
 8000db8:	4b15      	ldr	r3, [pc, #84]	@ (8000e10 <HAL_UART_MspInit+0x11c>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	f003 0304 	and.w	r3, r3, #4
 8000dc0:	60bb      	str	r3, [r7, #8]
 8000dc2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RS485_TX_Pin;
 8000dc4:	2304      	movs	r3, #4
 8000dc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dcc:	2303      	movs	r3, #3
 8000dce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(RS485_TX_GPIO_Port, &GPIO_InitStruct);
 8000dd0:	f107 0318 	add.w	r3, r7, #24
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	480f      	ldr	r0, [pc, #60]	@ (8000e14 <HAL_UART_MspInit+0x120>)
 8000dd8:	f000 fe0a 	bl	80019f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RS485_RX_Pin;
 8000ddc:	2308      	movs	r3, #8
 8000dde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de0:	2300      	movs	r3, #0
 8000de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(RS485_RX_GPIO_Port, &GPIO_InitStruct);
 8000de8:	f107 0318 	add.w	r3, r7, #24
 8000dec:	4619      	mov	r1, r3
 8000dee:	4809      	ldr	r0, [pc, #36]	@ (8000e14 <HAL_UART_MspInit+0x120>)
 8000df0:	f000 fdfe 	bl	80019f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000df4:	2200      	movs	r2, #0
 8000df6:	2100      	movs	r1, #0
 8000df8:	2026      	movs	r0, #38	@ 0x26
 8000dfa:	f000 fa24 	bl	8001246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000dfe:	2026      	movs	r0, #38	@ 0x26
 8000e00:	f000 fa3d 	bl	800127e <HAL_NVIC_EnableIRQ>
}
 8000e04:	bf00      	nop
 8000e06:	3728      	adds	r7, #40	@ 0x28
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40013800 	.word	0x40013800
 8000e10:	40021000 	.word	0x40021000
 8000e14:	40010800 	.word	0x40010800
 8000e18:	40004400 	.word	0x40004400

08000e1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e20:	bf00      	nop
 8000e22:	e7fd      	b.n	8000e20 <NMI_Handler+0x4>

08000e24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e28:	bf00      	nop
 8000e2a:	e7fd      	b.n	8000e28 <HardFault_Handler+0x4>

08000e2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e30:	bf00      	nop
 8000e32:	e7fd      	b.n	8000e30 <MemManage_Handler+0x4>

08000e34 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e38:	bf00      	nop
 8000e3a:	e7fd      	b.n	8000e38 <BusFault_Handler+0x4>

08000e3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e40:	bf00      	nop
 8000e42:	e7fd      	b.n	8000e40 <UsageFault_Handler+0x4>

08000e44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr

08000e50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr

08000e5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr

08000e68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
//  HAL_GPIO_TogglePin(WDI_GPIO_Port, WDI_Pin);
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e6c:	f000 f8be 	bl	8000fec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e70:	bf00      	nop
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e78:	4802      	ldr	r0, [pc, #8]	@ (8000e84 <USART1_IRQHandler+0x10>)
 8000e7a:	f002 fa97 	bl	80033ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	200008e8 	.word	0x200008e8

08000e88 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e8c:	4802      	ldr	r0, [pc, #8]	@ (8000e98 <USART2_IRQHandler+0x10>)
 8000e8e:	f002 fa8d 	bl	80033ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20000930 	.word	0x20000930

08000e9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ea4:	4a14      	ldr	r2, [pc, #80]	@ (8000ef8 <_sbrk+0x5c>)
 8000ea6:	4b15      	ldr	r3, [pc, #84]	@ (8000efc <_sbrk+0x60>)
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eb0:	4b13      	ldr	r3, [pc, #76]	@ (8000f00 <_sbrk+0x64>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d102      	bne.n	8000ebe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eb8:	4b11      	ldr	r3, [pc, #68]	@ (8000f00 <_sbrk+0x64>)
 8000eba:	4a12      	ldr	r2, [pc, #72]	@ (8000f04 <_sbrk+0x68>)
 8000ebc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ebe:	4b10      	ldr	r3, [pc, #64]	@ (8000f00 <_sbrk+0x64>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d207      	bcs.n	8000edc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ecc:	f002 fff0 	bl	8003eb0 <__errno>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	220c      	movs	r2, #12
 8000ed4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eda:	e009      	b.n	8000ef0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000edc:	4b08      	ldr	r3, [pc, #32]	@ (8000f00 <_sbrk+0x64>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ee2:	4b07      	ldr	r3, [pc, #28]	@ (8000f00 <_sbrk+0x64>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4413      	add	r3, r2
 8000eea:	4a05      	ldr	r2, [pc, #20]	@ (8000f00 <_sbrk+0x64>)
 8000eec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eee:	68fb      	ldr	r3, [r7, #12]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3718      	adds	r7, #24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	2000c000 	.word	0x2000c000
 8000efc:	00000400 	.word	0x00000400
 8000f00:	20000978 	.word	0x20000978
 8000f04:	20000ae8 	.word	0x20000ae8

08000f08 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr

08000f14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f14:	f7ff fff8 	bl	8000f08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f18:	480b      	ldr	r0, [pc, #44]	@ (8000f48 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f1a:	490c      	ldr	r1, [pc, #48]	@ (8000f4c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f1c:	4a0c      	ldr	r2, [pc, #48]	@ (8000f50 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f20:	e002      	b.n	8000f28 <LoopCopyDataInit>

08000f22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f26:	3304      	adds	r3, #4

08000f28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f2c:	d3f9      	bcc.n	8000f22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f2e:	4a09      	ldr	r2, [pc, #36]	@ (8000f54 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f30:	4c09      	ldr	r4, [pc, #36]	@ (8000f58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f34:	e001      	b.n	8000f3a <LoopFillZerobss>

08000f36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f38:	3204      	adds	r2, #4

08000f3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f3c:	d3fb      	bcc.n	8000f36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f3e:	f002 ffbd 	bl	8003ebc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f42:	f7ff fc1b 	bl	800077c <main>
  bx lr
 8000f46:	4770      	bx	lr
  ldr r0, =_sdata
 8000f48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f4c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000f50:	08004a84 	.word	0x08004a84
  ldr r2, =_sbss
 8000f54:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000f58:	20000ae8 	.word	0x20000ae8

08000f5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f5c:	e7fe      	b.n	8000f5c <ADC1_2_IRQHandler>
	...

08000f60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f64:	4b08      	ldr	r3, [pc, #32]	@ (8000f88 <HAL_Init+0x28>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a07      	ldr	r2, [pc, #28]	@ (8000f88 <HAL_Init+0x28>)
 8000f6a:	f043 0310 	orr.w	r3, r3, #16
 8000f6e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f70:	2003      	movs	r0, #3
 8000f72:	f000 f95d 	bl	8001230 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f76:	200f      	movs	r0, #15
 8000f78:	f000 f808 	bl	8000f8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f7c:	f7ff fe1a 	bl	8000bb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40022000 	.word	0x40022000

08000f8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f94:	4b12      	ldr	r3, [pc, #72]	@ (8000fe0 <HAL_InitTick+0x54>)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	4b12      	ldr	r3, [pc, #72]	@ (8000fe4 <HAL_InitTick+0x58>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000faa:	4618      	mov	r0, r3
 8000fac:	f000 f979 	bl	80012a2 <HAL_SYSTICK_Config>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e00e      	b.n	8000fd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2b0f      	cmp	r3, #15
 8000fbe:	d80a      	bhi.n	8000fd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	6879      	ldr	r1, [r7, #4]
 8000fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc8:	f000 f93d 	bl	8001246 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fcc:	4a06      	ldr	r2, [pc, #24]	@ (8000fe8 <HAL_InitTick+0x5c>)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	e000      	b.n	8000fd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20000000 	.word	0x20000000
 8000fe4:	20000008 	.word	0x20000008
 8000fe8:	20000004 	.word	0x20000004

08000fec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff0:	4b05      	ldr	r3, [pc, #20]	@ (8001008 <HAL_IncTick+0x1c>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	4b05      	ldr	r3, [pc, #20]	@ (800100c <HAL_IncTick+0x20>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	4a03      	ldr	r2, [pc, #12]	@ (800100c <HAL_IncTick+0x20>)
 8000ffe:	6013      	str	r3, [r2, #0]
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr
 8001008:	20000008 	.word	0x20000008
 800100c:	2000097c 	.word	0x2000097c

08001010 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return uwTick;
 8001014:	4b02      	ldr	r3, [pc, #8]	@ (8001020 <HAL_GetTick+0x10>)
 8001016:	681b      	ldr	r3, [r3, #0]
}
 8001018:	4618      	mov	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr
 8001020:	2000097c 	.word	0x2000097c

08001024 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800102c:	f7ff fff0 	bl	8001010 <HAL_GetTick>
 8001030:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800103c:	d005      	beq.n	800104a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800103e:	4b0a      	ldr	r3, [pc, #40]	@ (8001068 <HAL_Delay+0x44>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	461a      	mov	r2, r3
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	4413      	add	r3, r2
 8001048:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800104a:	bf00      	nop
 800104c:	f7ff ffe0 	bl	8001010 <HAL_GetTick>
 8001050:	4602      	mov	r2, r0
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	429a      	cmp	r2, r3
 800105a:	d8f7      	bhi.n	800104c <HAL_Delay+0x28>
  {
  }
}
 800105c:	bf00      	nop
 800105e:	bf00      	nop
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000008 	.word	0x20000008

0800106c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800107c:	4b0c      	ldr	r3, [pc, #48]	@ (80010b0 <__NVIC_SetPriorityGrouping+0x44>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001082:	68ba      	ldr	r2, [r7, #8]
 8001084:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001088:	4013      	ands	r3, r2
 800108a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001094:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001098:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800109c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800109e:	4a04      	ldr	r2, [pc, #16]	@ (80010b0 <__NVIC_SetPriorityGrouping+0x44>)
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	60d3      	str	r3, [r2, #12]
}
 80010a4:	bf00      	nop
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b8:	4b04      	ldr	r3, [pc, #16]	@ (80010cc <__NVIC_GetPriorityGrouping+0x18>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	0a1b      	lsrs	r3, r3, #8
 80010be:	f003 0307 	and.w	r3, r3, #7
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bc80      	pop	{r7}
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	db0b      	blt.n	80010fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	f003 021f 	and.w	r2, r3, #31
 80010e8:	4906      	ldr	r1, [pc, #24]	@ (8001104 <__NVIC_EnableIRQ+0x34>)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	095b      	lsrs	r3, r3, #5
 80010f0:	2001      	movs	r0, #1
 80010f2:	fa00 f202 	lsl.w	r2, r0, r2
 80010f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr
 8001104:	e000e100 	.word	0xe000e100

08001108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	6039      	str	r1, [r7, #0]
 8001112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001118:	2b00      	cmp	r3, #0
 800111a:	db0a      	blt.n	8001132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	b2da      	uxtb	r2, r3
 8001120:	490c      	ldr	r1, [pc, #48]	@ (8001154 <__NVIC_SetPriority+0x4c>)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	0112      	lsls	r2, r2, #4
 8001128:	b2d2      	uxtb	r2, r2
 800112a:	440b      	add	r3, r1
 800112c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001130:	e00a      	b.n	8001148 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	b2da      	uxtb	r2, r3
 8001136:	4908      	ldr	r1, [pc, #32]	@ (8001158 <__NVIC_SetPriority+0x50>)
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	f003 030f 	and.w	r3, r3, #15
 800113e:	3b04      	subs	r3, #4
 8001140:	0112      	lsls	r2, r2, #4
 8001142:	b2d2      	uxtb	r2, r2
 8001144:	440b      	add	r3, r1
 8001146:	761a      	strb	r2, [r3, #24]
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	bc80      	pop	{r7}
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000e100 	.word	0xe000e100
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800115c:	b480      	push	{r7}
 800115e:	b089      	sub	sp, #36	@ 0x24
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f1c3 0307 	rsb	r3, r3, #7
 8001176:	2b04      	cmp	r3, #4
 8001178:	bf28      	it	cs
 800117a:	2304      	movcs	r3, #4
 800117c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	3304      	adds	r3, #4
 8001182:	2b06      	cmp	r3, #6
 8001184:	d902      	bls.n	800118c <NVIC_EncodePriority+0x30>
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3b03      	subs	r3, #3
 800118a:	e000      	b.n	800118e <NVIC_EncodePriority+0x32>
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001190:	f04f 32ff 	mov.w	r2, #4294967295
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43da      	mvns	r2, r3
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	401a      	ands	r2, r3
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a4:	f04f 31ff 	mov.w	r1, #4294967295
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	fa01 f303 	lsl.w	r3, r1, r3
 80011ae:	43d9      	mvns	r1, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b4:	4313      	orrs	r3, r2
         );
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3724      	adds	r7, #36	@ 0x24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr

080011c0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80011c4:	f3bf 8f4f 	dsb	sy
}
 80011c8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80011ca:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <__NVIC_SystemReset+0x24>)
 80011cc:	68db      	ldr	r3, [r3, #12]
 80011ce:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80011d2:	4904      	ldr	r1, [pc, #16]	@ (80011e4 <__NVIC_SystemReset+0x24>)
 80011d4:	4b04      	ldr	r3, [pc, #16]	@ (80011e8 <__NVIC_SystemReset+0x28>)
 80011d6:	4313      	orrs	r3, r2
 80011d8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80011da:	f3bf 8f4f 	dsb	sy
}
 80011de:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80011e0:	bf00      	nop
 80011e2:	e7fd      	b.n	80011e0 <__NVIC_SystemReset+0x20>
 80011e4:	e000ed00 	.word	0xe000ed00
 80011e8:	05fa0004 	.word	0x05fa0004

080011ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011fc:	d301      	bcc.n	8001202 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011fe:	2301      	movs	r3, #1
 8001200:	e00f      	b.n	8001222 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001202:	4a0a      	ldr	r2, [pc, #40]	@ (800122c <SysTick_Config+0x40>)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3b01      	subs	r3, #1
 8001208:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800120a:	210f      	movs	r1, #15
 800120c:	f04f 30ff 	mov.w	r0, #4294967295
 8001210:	f7ff ff7a 	bl	8001108 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001214:	4b05      	ldr	r3, [pc, #20]	@ (800122c <SysTick_Config+0x40>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800121a:	4b04      	ldr	r3, [pc, #16]	@ (800122c <SysTick_Config+0x40>)
 800121c:	2207      	movs	r2, #7
 800121e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	e000e010 	.word	0xe000e010

08001230 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff ff17 	bl	800106c <__NVIC_SetPriorityGrouping>
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001246:	b580      	push	{r7, lr}
 8001248:	b086      	sub	sp, #24
 800124a:	af00      	add	r7, sp, #0
 800124c:	4603      	mov	r3, r0
 800124e:	60b9      	str	r1, [r7, #8]
 8001250:	607a      	str	r2, [r7, #4]
 8001252:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001258:	f7ff ff2c 	bl	80010b4 <__NVIC_GetPriorityGrouping>
 800125c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	68b9      	ldr	r1, [r7, #8]
 8001262:	6978      	ldr	r0, [r7, #20]
 8001264:	f7ff ff7a 	bl	800115c <NVIC_EncodePriority>
 8001268:	4602      	mov	r2, r0
 800126a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff49 	bl	8001108 <__NVIC_SetPriority>
}
 8001276:	bf00      	nop
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ff1f 	bl	80010d0 <__NVIC_EnableIRQ>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800129e:	f7ff ff8f 	bl	80011c0 <__NVIC_SystemReset>

080012a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b082      	sub	sp, #8
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff ff9e 	bl	80011ec <SysTick_Config>
 80012b0:	4603      	mov	r3, r0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d101      	bne.n	80012cc <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e00e      	b.n	80012ea <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	795b      	ldrb	r3, [r3, #5]
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d105      	bne.n	80012e2 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2200      	movs	r2, #0
 80012da:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff fc9b 	bl	8000c18 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2201      	movs	r2, #1
 80012e6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b087      	sub	sp, #28
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	60f8      	str	r0, [r7, #12]
 80012fa:	60b9      	str	r1, [r7, #8]
 80012fc:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80012fe:	2300      	movs	r3, #0
 8001300:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	2202      	movs	r2, #2
 8001306:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	689a      	ldr	r2, [r3, #8]
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f042 0201 	orr.w	r2, r2, #1
 8001316:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	e00a      	b.n	8001334 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	68ba      	ldr	r2, [r7, #8]
 8001324:	441a      	add	r2, r3
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	6812      	ldr	r2, [r2, #0]
 800132c:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	3301      	adds	r3, #1
 8001332:	617b      	str	r3, [r7, #20]
 8001334:	697a      	ldr	r2, [r7, #20]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	429a      	cmp	r2, r3
 800133a:	d3f0      	bcc.n	800131e <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2201      	movs	r2, #1
 8001348:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 800134a:	693b      	ldr	r3, [r7, #16]
}
 800134c:	4618      	mov	r0, r3
 800134e:	371c      	adds	r7, #28
 8001350:	46bd      	mov	sp, r7
 8001352:	bc80      	pop	{r7}
 8001354:	4770      	bx	lr

08001356 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001356:	b480      	push	{r7}
 8001358:	b085      	sub	sp, #20
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800135e:	2300      	movs	r3, #0
 8001360:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001368:	b2db      	uxtb	r3, r3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d008      	beq.n	8001380 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2204      	movs	r2, #4
 8001372:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e020      	b.n	80013c2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f022 020e 	bic.w	r2, r2, #14
 800138e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f022 0201 	bic.w	r2, r2, #1
 800139e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013a8:	2101      	movs	r1, #1
 80013aa:	fa01 f202 	lsl.w	r2, r1, r2
 80013ae:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2201      	movs	r2, #1
 80013b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3714      	adds	r7, #20
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr

080013cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013d4:	2300      	movs	r3, #0
 80013d6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d005      	beq.n	80013f0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2204      	movs	r2, #4
 80013e8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	73fb      	strb	r3, [r7, #15]
 80013ee:	e0d6      	b.n	800159e <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f022 020e 	bic.w	r2, r2, #14
 80013fe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f022 0201 	bic.w	r2, r2, #1
 800140e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	461a      	mov	r2, r3
 8001416:	4b64      	ldr	r3, [pc, #400]	@ (80015a8 <HAL_DMA_Abort_IT+0x1dc>)
 8001418:	429a      	cmp	r2, r3
 800141a:	d958      	bls.n	80014ce <HAL_DMA_Abort_IT+0x102>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a62      	ldr	r2, [pc, #392]	@ (80015ac <HAL_DMA_Abort_IT+0x1e0>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d04f      	beq.n	80014c6 <HAL_DMA_Abort_IT+0xfa>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a61      	ldr	r2, [pc, #388]	@ (80015b0 <HAL_DMA_Abort_IT+0x1e4>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d048      	beq.n	80014c2 <HAL_DMA_Abort_IT+0xf6>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a5f      	ldr	r2, [pc, #380]	@ (80015b4 <HAL_DMA_Abort_IT+0x1e8>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d040      	beq.n	80014bc <HAL_DMA_Abort_IT+0xf0>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a5e      	ldr	r2, [pc, #376]	@ (80015b8 <HAL_DMA_Abort_IT+0x1ec>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d038      	beq.n	80014b6 <HAL_DMA_Abort_IT+0xea>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a5c      	ldr	r2, [pc, #368]	@ (80015bc <HAL_DMA_Abort_IT+0x1f0>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d030      	beq.n	80014b0 <HAL_DMA_Abort_IT+0xe4>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a5b      	ldr	r2, [pc, #364]	@ (80015c0 <HAL_DMA_Abort_IT+0x1f4>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d028      	beq.n	80014aa <HAL_DMA_Abort_IT+0xde>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a52      	ldr	r2, [pc, #328]	@ (80015a8 <HAL_DMA_Abort_IT+0x1dc>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d020      	beq.n	80014a4 <HAL_DMA_Abort_IT+0xd8>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a57      	ldr	r2, [pc, #348]	@ (80015c4 <HAL_DMA_Abort_IT+0x1f8>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d019      	beq.n	80014a0 <HAL_DMA_Abort_IT+0xd4>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a55      	ldr	r2, [pc, #340]	@ (80015c8 <HAL_DMA_Abort_IT+0x1fc>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d012      	beq.n	800149c <HAL_DMA_Abort_IT+0xd0>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a54      	ldr	r2, [pc, #336]	@ (80015cc <HAL_DMA_Abort_IT+0x200>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d00a      	beq.n	8001496 <HAL_DMA_Abort_IT+0xca>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a52      	ldr	r2, [pc, #328]	@ (80015d0 <HAL_DMA_Abort_IT+0x204>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d102      	bne.n	8001490 <HAL_DMA_Abort_IT+0xc4>
 800148a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800148e:	e01b      	b.n	80014c8 <HAL_DMA_Abort_IT+0xfc>
 8001490:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001494:	e018      	b.n	80014c8 <HAL_DMA_Abort_IT+0xfc>
 8001496:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800149a:	e015      	b.n	80014c8 <HAL_DMA_Abort_IT+0xfc>
 800149c:	2310      	movs	r3, #16
 800149e:	e013      	b.n	80014c8 <HAL_DMA_Abort_IT+0xfc>
 80014a0:	2301      	movs	r3, #1
 80014a2:	e011      	b.n	80014c8 <HAL_DMA_Abort_IT+0xfc>
 80014a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80014a8:	e00e      	b.n	80014c8 <HAL_DMA_Abort_IT+0xfc>
 80014aa:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80014ae:	e00b      	b.n	80014c8 <HAL_DMA_Abort_IT+0xfc>
 80014b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014b4:	e008      	b.n	80014c8 <HAL_DMA_Abort_IT+0xfc>
 80014b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014ba:	e005      	b.n	80014c8 <HAL_DMA_Abort_IT+0xfc>
 80014bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014c0:	e002      	b.n	80014c8 <HAL_DMA_Abort_IT+0xfc>
 80014c2:	2310      	movs	r3, #16
 80014c4:	e000      	b.n	80014c8 <HAL_DMA_Abort_IT+0xfc>
 80014c6:	2301      	movs	r3, #1
 80014c8:	4a42      	ldr	r2, [pc, #264]	@ (80015d4 <HAL_DMA_Abort_IT+0x208>)
 80014ca:	6053      	str	r3, [r2, #4]
 80014cc:	e057      	b.n	800157e <HAL_DMA_Abort_IT+0x1b2>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a36      	ldr	r2, [pc, #216]	@ (80015ac <HAL_DMA_Abort_IT+0x1e0>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d04f      	beq.n	8001578 <HAL_DMA_Abort_IT+0x1ac>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a34      	ldr	r2, [pc, #208]	@ (80015b0 <HAL_DMA_Abort_IT+0x1e4>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d048      	beq.n	8001574 <HAL_DMA_Abort_IT+0x1a8>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a33      	ldr	r2, [pc, #204]	@ (80015b4 <HAL_DMA_Abort_IT+0x1e8>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d040      	beq.n	800156e <HAL_DMA_Abort_IT+0x1a2>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a31      	ldr	r2, [pc, #196]	@ (80015b8 <HAL_DMA_Abort_IT+0x1ec>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d038      	beq.n	8001568 <HAL_DMA_Abort_IT+0x19c>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a30      	ldr	r2, [pc, #192]	@ (80015bc <HAL_DMA_Abort_IT+0x1f0>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d030      	beq.n	8001562 <HAL_DMA_Abort_IT+0x196>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a2e      	ldr	r2, [pc, #184]	@ (80015c0 <HAL_DMA_Abort_IT+0x1f4>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d028      	beq.n	800155c <HAL_DMA_Abort_IT+0x190>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a26      	ldr	r2, [pc, #152]	@ (80015a8 <HAL_DMA_Abort_IT+0x1dc>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d020      	beq.n	8001556 <HAL_DMA_Abort_IT+0x18a>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a2a      	ldr	r2, [pc, #168]	@ (80015c4 <HAL_DMA_Abort_IT+0x1f8>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d019      	beq.n	8001552 <HAL_DMA_Abort_IT+0x186>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a29      	ldr	r2, [pc, #164]	@ (80015c8 <HAL_DMA_Abort_IT+0x1fc>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d012      	beq.n	800154e <HAL_DMA_Abort_IT+0x182>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a27      	ldr	r2, [pc, #156]	@ (80015cc <HAL_DMA_Abort_IT+0x200>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d00a      	beq.n	8001548 <HAL_DMA_Abort_IT+0x17c>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a26      	ldr	r2, [pc, #152]	@ (80015d0 <HAL_DMA_Abort_IT+0x204>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d102      	bne.n	8001542 <HAL_DMA_Abort_IT+0x176>
 800153c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001540:	e01b      	b.n	800157a <HAL_DMA_Abort_IT+0x1ae>
 8001542:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001546:	e018      	b.n	800157a <HAL_DMA_Abort_IT+0x1ae>
 8001548:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800154c:	e015      	b.n	800157a <HAL_DMA_Abort_IT+0x1ae>
 800154e:	2310      	movs	r3, #16
 8001550:	e013      	b.n	800157a <HAL_DMA_Abort_IT+0x1ae>
 8001552:	2301      	movs	r3, #1
 8001554:	e011      	b.n	800157a <HAL_DMA_Abort_IT+0x1ae>
 8001556:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800155a:	e00e      	b.n	800157a <HAL_DMA_Abort_IT+0x1ae>
 800155c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001560:	e00b      	b.n	800157a <HAL_DMA_Abort_IT+0x1ae>
 8001562:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001566:	e008      	b.n	800157a <HAL_DMA_Abort_IT+0x1ae>
 8001568:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800156c:	e005      	b.n	800157a <HAL_DMA_Abort_IT+0x1ae>
 800156e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001572:	e002      	b.n	800157a <HAL_DMA_Abort_IT+0x1ae>
 8001574:	2310      	movs	r3, #16
 8001576:	e000      	b.n	800157a <HAL_DMA_Abort_IT+0x1ae>
 8001578:	2301      	movs	r3, #1
 800157a:	4a17      	ldr	r2, [pc, #92]	@ (80015d8 <HAL_DMA_Abort_IT+0x20c>)
 800157c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2201      	movs	r2, #1
 8001582:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	4798      	blx	r3
    } 
  }
  return status;
 800159e:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3710      	adds	r7, #16
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40020080 	.word	0x40020080
 80015ac:	40020008 	.word	0x40020008
 80015b0:	4002001c 	.word	0x4002001c
 80015b4:	40020030 	.word	0x40020030
 80015b8:	40020044 	.word	0x40020044
 80015bc:	40020058 	.word	0x40020058
 80015c0:	4002006c 	.word	0x4002006c
 80015c4:	40020408 	.word	0x40020408
 80015c8:	4002041c 	.word	0x4002041c
 80015cc:	40020430 	.word	0x40020430
 80015d0:	40020444 	.word	0x40020444
 80015d4:	40020400 	.word	0x40020400
 80015d8:	40020000 	.word	0x40020000

080015dc <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80015dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015de:	b087      	sub	sp, #28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80015f6:	4b2f      	ldr	r3, [pc, #188]	@ (80016b4 <HAL_FLASH_Program+0xd8>)
 80015f8:	7e1b      	ldrb	r3, [r3, #24]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d101      	bne.n	8001602 <HAL_FLASH_Program+0x26>
 80015fe:	2302      	movs	r3, #2
 8001600:	e054      	b.n	80016ac <HAL_FLASH_Program+0xd0>
 8001602:	4b2c      	ldr	r3, [pc, #176]	@ (80016b4 <HAL_FLASH_Program+0xd8>)
 8001604:	2201      	movs	r2, #1
 8001606:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001608:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800160c:	f000 f8b2 	bl	8001774 <FLASH_WaitForLastOperation>
 8001610:	4603      	mov	r3, r0
 8001612:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8001614:	7dfb      	ldrb	r3, [r7, #23]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d144      	bne.n	80016a4 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d102      	bne.n	8001626 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001620:	2301      	movs	r3, #1
 8001622:	757b      	strb	r3, [r7, #21]
 8001624:	e007      	b.n	8001636 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2b02      	cmp	r3, #2
 800162a:	d102      	bne.n	8001632 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 800162c:	2302      	movs	r3, #2
 800162e:	757b      	strb	r3, [r7, #21]
 8001630:	e001      	b.n	8001636 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8001632:	2304      	movs	r3, #4
 8001634:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8001636:	2300      	movs	r3, #0
 8001638:	75bb      	strb	r3, [r7, #22]
 800163a:	e02d      	b.n	8001698 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800163c:	7dbb      	ldrb	r3, [r7, #22]
 800163e:	005a      	lsls	r2, r3, #1
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	eb02 0c03 	add.w	ip, r2, r3
 8001646:	7dbb      	ldrb	r3, [r7, #22]
 8001648:	0119      	lsls	r1, r3, #4
 800164a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800164e:	f1c1 0620 	rsb	r6, r1, #32
 8001652:	f1a1 0020 	sub.w	r0, r1, #32
 8001656:	fa22 f401 	lsr.w	r4, r2, r1
 800165a:	fa03 f606 	lsl.w	r6, r3, r6
 800165e:	4334      	orrs	r4, r6
 8001660:	fa23 f000 	lsr.w	r0, r3, r0
 8001664:	4304      	orrs	r4, r0
 8001666:	fa23 f501 	lsr.w	r5, r3, r1
 800166a:	b2a3      	uxth	r3, r4
 800166c:	4619      	mov	r1, r3
 800166e:	4660      	mov	r0, ip
 8001670:	f000 f864 	bl	800173c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001674:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001678:	f000 f87c 	bl	8001774 <FLASH_WaitForLastOperation>
 800167c:	4603      	mov	r3, r0
 800167e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001680:	4b0d      	ldr	r3, [pc, #52]	@ (80016b8 <HAL_FLASH_Program+0xdc>)
 8001682:	691b      	ldr	r3, [r3, #16]
 8001684:	4a0c      	ldr	r2, [pc, #48]	@ (80016b8 <HAL_FLASH_Program+0xdc>)
 8001686:	f023 0301 	bic.w	r3, r3, #1
 800168a:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 800168c:	7dfb      	ldrb	r3, [r7, #23]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d107      	bne.n	80016a2 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8001692:	7dbb      	ldrb	r3, [r7, #22]
 8001694:	3301      	adds	r3, #1
 8001696:	75bb      	strb	r3, [r7, #22]
 8001698:	7dba      	ldrb	r2, [r7, #22]
 800169a:	7d7b      	ldrb	r3, [r7, #21]
 800169c:	429a      	cmp	r2, r3
 800169e:	d3cd      	bcc.n	800163c <HAL_FLASH_Program+0x60>
 80016a0:	e000      	b.n	80016a4 <HAL_FLASH_Program+0xc8>
      {
        break;
 80016a2:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80016a4:	4b03      	ldr	r3, [pc, #12]	@ (80016b4 <HAL_FLASH_Program+0xd8>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	761a      	strb	r2, [r3, #24]

  return status;
 80016aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	371c      	adds	r7, #28
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016b4:	20000980 	.word	0x20000980
 80016b8:	40022000 	.word	0x40022000

080016bc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80016c2:	2300      	movs	r3, #0
 80016c4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80016c6:	4b0d      	ldr	r3, [pc, #52]	@ (80016fc <HAL_FLASH_Unlock+0x40>)
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d00d      	beq.n	80016ee <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80016d2:	4b0a      	ldr	r3, [pc, #40]	@ (80016fc <HAL_FLASH_Unlock+0x40>)
 80016d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001700 <HAL_FLASH_Unlock+0x44>)
 80016d6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80016d8:	4b08      	ldr	r3, [pc, #32]	@ (80016fc <HAL_FLASH_Unlock+0x40>)
 80016da:	4a0a      	ldr	r2, [pc, #40]	@ (8001704 <HAL_FLASH_Unlock+0x48>)
 80016dc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80016de:	4b07      	ldr	r3, [pc, #28]	@ (80016fc <HAL_FLASH_Unlock+0x40>)
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80016ee:	79fb      	ldrb	r3, [r7, #7]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bc80      	pop	{r7}
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	40022000 	.word	0x40022000
 8001700:	45670123 	.word	0x45670123
 8001704:	cdef89ab 	.word	0xcdef89ab

08001708 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800170c:	4b05      	ldr	r3, [pc, #20]	@ (8001724 <HAL_FLASH_Lock+0x1c>)
 800170e:	691b      	ldr	r3, [r3, #16]
 8001710:	4a04      	ldr	r2, [pc, #16]	@ (8001724 <HAL_FLASH_Lock+0x1c>)
 8001712:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001716:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	40022000 	.word	0x40022000

08001728 <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 800172c:	4b02      	ldr	r3, [pc, #8]	@ (8001738 <HAL_FLASH_GetError+0x10>)
 800172e:	69db      	ldr	r3, [r3, #28]
}
 8001730:	4618      	mov	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr
 8001738:	20000980 	.word	0x20000980

0800173c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	460b      	mov	r3, r1
 8001746:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001748:	4b08      	ldr	r3, [pc, #32]	@ (800176c <FLASH_Program_HalfWord+0x30>)
 800174a:	2200      	movs	r2, #0
 800174c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800174e:	4b08      	ldr	r3, [pc, #32]	@ (8001770 <FLASH_Program_HalfWord+0x34>)
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	4a07      	ldr	r2, [pc, #28]	@ (8001770 <FLASH_Program_HalfWord+0x34>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	887a      	ldrh	r2, [r7, #2]
 800175e:	801a      	strh	r2, [r3, #0]
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	bc80      	pop	{r7}
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	20000980 	.word	0x20000980
 8001770:	40022000 	.word	0x40022000

08001774 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800177c:	f7ff fc48 	bl	8001010 <HAL_GetTick>
 8001780:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001782:	e010      	b.n	80017a6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800178a:	d00c      	beq.n	80017a6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d007      	beq.n	80017a2 <FLASH_WaitForLastOperation+0x2e>
 8001792:	f7ff fc3d 	bl	8001010 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d201      	bcs.n	80017a6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e025      	b.n	80017f2 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80017a6:	4b15      	ldr	r3, [pc, #84]	@ (80017fc <FLASH_WaitForLastOperation+0x88>)
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1e8      	bne.n	8001784 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80017b2:	4b12      	ldr	r3, [pc, #72]	@ (80017fc <FLASH_WaitForLastOperation+0x88>)
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	f003 0320 	and.w	r3, r3, #32
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d002      	beq.n	80017c4 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80017be:	4b0f      	ldr	r3, [pc, #60]	@ (80017fc <FLASH_WaitForLastOperation+0x88>)
 80017c0:	2220      	movs	r2, #32
 80017c2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80017c4:	4b0d      	ldr	r3, [pc, #52]	@ (80017fc <FLASH_WaitForLastOperation+0x88>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	f003 0310 	and.w	r3, r3, #16
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d10b      	bne.n	80017e8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80017d0:	4b0a      	ldr	r3, [pc, #40]	@ (80017fc <FLASH_WaitForLastOperation+0x88>)
 80017d2:	69db      	ldr	r3, [r3, #28]
 80017d4:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d105      	bne.n	80017e8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80017dc:	4b07      	ldr	r3, [pc, #28]	@ (80017fc <FLASH_WaitForLastOperation+0x88>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d003      	beq.n	80017f0 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80017e8:	f000 f80a 	bl	8001800 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e000      	b.n	80017f2 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40022000 	.word	0x40022000

08001800 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001806:	2300      	movs	r3, #0
 8001808:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800180a:	4b23      	ldr	r3, [pc, #140]	@ (8001898 <FLASH_SetErrorCode+0x98>)
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	f003 0310 	and.w	r3, r3, #16
 8001812:	2b00      	cmp	r3, #0
 8001814:	d009      	beq.n	800182a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001816:	4b21      	ldr	r3, [pc, #132]	@ (800189c <FLASH_SetErrorCode+0x9c>)
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	f043 0302 	orr.w	r3, r3, #2
 800181e:	4a1f      	ldr	r2, [pc, #124]	@ (800189c <FLASH_SetErrorCode+0x9c>)
 8001820:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f043 0310 	orr.w	r3, r3, #16
 8001828:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800182a:	4b1b      	ldr	r3, [pc, #108]	@ (8001898 <FLASH_SetErrorCode+0x98>)
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	f003 0304 	and.w	r3, r3, #4
 8001832:	2b00      	cmp	r3, #0
 8001834:	d009      	beq.n	800184a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001836:	4b19      	ldr	r3, [pc, #100]	@ (800189c <FLASH_SetErrorCode+0x9c>)
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	f043 0301 	orr.w	r3, r3, #1
 800183e:	4a17      	ldr	r2, [pc, #92]	@ (800189c <FLASH_SetErrorCode+0x9c>)
 8001840:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f043 0304 	orr.w	r3, r3, #4
 8001848:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800184a:	4b13      	ldr	r3, [pc, #76]	@ (8001898 <FLASH_SetErrorCode+0x98>)
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b00      	cmp	r3, #0
 8001854:	d00b      	beq.n	800186e <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001856:	4b11      	ldr	r3, [pc, #68]	@ (800189c <FLASH_SetErrorCode+0x9c>)
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	f043 0304 	orr.w	r3, r3, #4
 800185e:	4a0f      	ldr	r2, [pc, #60]	@ (800189c <FLASH_SetErrorCode+0x9c>)
 8001860:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001862:	4b0d      	ldr	r3, [pc, #52]	@ (8001898 <FLASH_SetErrorCode+0x98>)
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	4a0c      	ldr	r2, [pc, #48]	@ (8001898 <FLASH_SetErrorCode+0x98>)
 8001868:	f023 0301 	bic.w	r3, r3, #1
 800186c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f240 1201 	movw	r2, #257	@ 0x101
 8001874:	4293      	cmp	r3, r2
 8001876:	d106      	bne.n	8001886 <FLASH_SetErrorCode+0x86>
 8001878:	4b07      	ldr	r3, [pc, #28]	@ (8001898 <FLASH_SetErrorCode+0x98>)
 800187a:	69db      	ldr	r3, [r3, #28]
 800187c:	4a06      	ldr	r2, [pc, #24]	@ (8001898 <FLASH_SetErrorCode+0x98>)
 800187e:	f023 0301 	bic.w	r3, r3, #1
 8001882:	61d3      	str	r3, [r2, #28]
}  
 8001884:	e002      	b.n	800188c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001886:	4a04      	ldr	r2, [pc, #16]	@ (8001898 <FLASH_SetErrorCode+0x98>)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	60d3      	str	r3, [r2, #12]
}  
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	bc80      	pop	{r7}
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	40022000 	.word	0x40022000
 800189c:	20000980 	.word	0x20000980

080018a0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80018ae:	2300      	movs	r3, #0
 80018b0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80018b2:	4b2f      	ldr	r3, [pc, #188]	@ (8001970 <HAL_FLASHEx_Erase+0xd0>)
 80018b4:	7e1b      	ldrb	r3, [r3, #24]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d101      	bne.n	80018be <HAL_FLASHEx_Erase+0x1e>
 80018ba:	2302      	movs	r3, #2
 80018bc:	e053      	b.n	8001966 <HAL_FLASHEx_Erase+0xc6>
 80018be:	4b2c      	ldr	r3, [pc, #176]	@ (8001970 <HAL_FLASHEx_Erase+0xd0>)
 80018c0:	2201      	movs	r2, #1
 80018c2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d116      	bne.n	80018fa <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80018cc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80018d0:	f7ff ff50 	bl	8001774 <FLASH_WaitForLastOperation>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d141      	bne.n	800195e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80018da:	2001      	movs	r0, #1
 80018dc:	f000 f84c 	bl	8001978 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80018e0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80018e4:	f7ff ff46 	bl	8001774 <FLASH_WaitForLastOperation>
 80018e8:	4603      	mov	r3, r0
 80018ea:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80018ec:	4b21      	ldr	r3, [pc, #132]	@ (8001974 <HAL_FLASHEx_Erase+0xd4>)
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	4a20      	ldr	r2, [pc, #128]	@ (8001974 <HAL_FLASHEx_Erase+0xd4>)
 80018f2:	f023 0304 	bic.w	r3, r3, #4
 80018f6:	6113      	str	r3, [r2, #16]
 80018f8:	e031      	b.n	800195e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80018fa:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80018fe:	f7ff ff39 	bl	8001774 <FLASH_WaitForLastOperation>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d12a      	bne.n	800195e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	f04f 32ff 	mov.w	r2, #4294967295
 800190e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	60bb      	str	r3, [r7, #8]
 8001916:	e019      	b.n	800194c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001918:	68b8      	ldr	r0, [r7, #8]
 800191a:	f000 f849 	bl	80019b0 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800191e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001922:	f7ff ff27 	bl	8001774 <FLASH_WaitForLastOperation>
 8001926:	4603      	mov	r3, r0
 8001928:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800192a:	4b12      	ldr	r3, [pc, #72]	@ (8001974 <HAL_FLASHEx_Erase+0xd4>)
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	4a11      	ldr	r2, [pc, #68]	@ (8001974 <HAL_FLASHEx_Erase+0xd4>)
 8001930:	f023 0302 	bic.w	r3, r3, #2
 8001934:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8001936:	7bfb      	ldrb	r3, [r7, #15]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d003      	beq.n	8001944 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	68ba      	ldr	r2, [r7, #8]
 8001940:	601a      	str	r2, [r3, #0]
            break;
 8001942:	e00c      	b.n	800195e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800194a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	02da      	lsls	r2, r3, #11
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	4413      	add	r3, r2
 8001958:	68ba      	ldr	r2, [r7, #8]
 800195a:	429a      	cmp	r2, r3
 800195c:	d3dc      	bcc.n	8001918 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800195e:	4b04      	ldr	r3, [pc, #16]	@ (8001970 <HAL_FLASHEx_Erase+0xd0>)
 8001960:	2200      	movs	r2, #0
 8001962:	761a      	strb	r2, [r3, #24]

  return status;
 8001964:	7bfb      	ldrb	r3, [r7, #15]
}
 8001966:	4618      	mov	r0, r3
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	20000980 	.word	0x20000980
 8001974:	40022000 	.word	0x40022000

08001978 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001980:	4b09      	ldr	r3, [pc, #36]	@ (80019a8 <FLASH_MassErase+0x30>)
 8001982:	2200      	movs	r2, #0
 8001984:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001986:	4b09      	ldr	r3, [pc, #36]	@ (80019ac <FLASH_MassErase+0x34>)
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	4a08      	ldr	r2, [pc, #32]	@ (80019ac <FLASH_MassErase+0x34>)
 800198c:	f043 0304 	orr.w	r3, r3, #4
 8001990:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001992:	4b06      	ldr	r3, [pc, #24]	@ (80019ac <FLASH_MassErase+0x34>)
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	4a05      	ldr	r2, [pc, #20]	@ (80019ac <FLASH_MassErase+0x34>)
 8001998:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800199c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr
 80019a8:	20000980 	.word	0x20000980
 80019ac:	40022000 	.word	0x40022000

080019b0 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80019b8:	4b0b      	ldr	r3, [pc, #44]	@ (80019e8 <FLASH_PageErase+0x38>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80019be:	4b0b      	ldr	r3, [pc, #44]	@ (80019ec <FLASH_PageErase+0x3c>)
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	4a0a      	ldr	r2, [pc, #40]	@ (80019ec <FLASH_PageErase+0x3c>)
 80019c4:	f043 0302 	orr.w	r3, r3, #2
 80019c8:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80019ca:	4a08      	ldr	r2, [pc, #32]	@ (80019ec <FLASH_PageErase+0x3c>)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80019d0:	4b06      	ldr	r3, [pc, #24]	@ (80019ec <FLASH_PageErase+0x3c>)
 80019d2:	691b      	ldr	r3, [r3, #16]
 80019d4:	4a05      	ldr	r2, [pc, #20]	@ (80019ec <FLASH_PageErase+0x3c>)
 80019d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019da:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	20000980 	.word	0x20000980
 80019ec:	40022000 	.word	0x40022000

080019f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b08b      	sub	sp, #44	@ 0x2c
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019fa:	2300      	movs	r3, #0
 80019fc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019fe:	2300      	movs	r3, #0
 8001a00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a02:	e179      	b.n	8001cf8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a04:	2201      	movs	r2, #1
 8001a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	69fa      	ldr	r2, [r7, #28]
 8001a14:	4013      	ands	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	f040 8168 	bne.w	8001cf2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	4a96      	ldr	r2, [pc, #600]	@ (8001c80 <HAL_GPIO_Init+0x290>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d05e      	beq.n	8001aea <HAL_GPIO_Init+0xfa>
 8001a2c:	4a94      	ldr	r2, [pc, #592]	@ (8001c80 <HAL_GPIO_Init+0x290>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d875      	bhi.n	8001b1e <HAL_GPIO_Init+0x12e>
 8001a32:	4a94      	ldr	r2, [pc, #592]	@ (8001c84 <HAL_GPIO_Init+0x294>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d058      	beq.n	8001aea <HAL_GPIO_Init+0xfa>
 8001a38:	4a92      	ldr	r2, [pc, #584]	@ (8001c84 <HAL_GPIO_Init+0x294>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d86f      	bhi.n	8001b1e <HAL_GPIO_Init+0x12e>
 8001a3e:	4a92      	ldr	r2, [pc, #584]	@ (8001c88 <HAL_GPIO_Init+0x298>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d052      	beq.n	8001aea <HAL_GPIO_Init+0xfa>
 8001a44:	4a90      	ldr	r2, [pc, #576]	@ (8001c88 <HAL_GPIO_Init+0x298>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d869      	bhi.n	8001b1e <HAL_GPIO_Init+0x12e>
 8001a4a:	4a90      	ldr	r2, [pc, #576]	@ (8001c8c <HAL_GPIO_Init+0x29c>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d04c      	beq.n	8001aea <HAL_GPIO_Init+0xfa>
 8001a50:	4a8e      	ldr	r2, [pc, #568]	@ (8001c8c <HAL_GPIO_Init+0x29c>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d863      	bhi.n	8001b1e <HAL_GPIO_Init+0x12e>
 8001a56:	4a8e      	ldr	r2, [pc, #568]	@ (8001c90 <HAL_GPIO_Init+0x2a0>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d046      	beq.n	8001aea <HAL_GPIO_Init+0xfa>
 8001a5c:	4a8c      	ldr	r2, [pc, #560]	@ (8001c90 <HAL_GPIO_Init+0x2a0>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d85d      	bhi.n	8001b1e <HAL_GPIO_Init+0x12e>
 8001a62:	2b12      	cmp	r3, #18
 8001a64:	d82a      	bhi.n	8001abc <HAL_GPIO_Init+0xcc>
 8001a66:	2b12      	cmp	r3, #18
 8001a68:	d859      	bhi.n	8001b1e <HAL_GPIO_Init+0x12e>
 8001a6a:	a201      	add	r2, pc, #4	@ (adr r2, 8001a70 <HAL_GPIO_Init+0x80>)
 8001a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a70:	08001aeb 	.word	0x08001aeb
 8001a74:	08001ac5 	.word	0x08001ac5
 8001a78:	08001ad7 	.word	0x08001ad7
 8001a7c:	08001b19 	.word	0x08001b19
 8001a80:	08001b1f 	.word	0x08001b1f
 8001a84:	08001b1f 	.word	0x08001b1f
 8001a88:	08001b1f 	.word	0x08001b1f
 8001a8c:	08001b1f 	.word	0x08001b1f
 8001a90:	08001b1f 	.word	0x08001b1f
 8001a94:	08001b1f 	.word	0x08001b1f
 8001a98:	08001b1f 	.word	0x08001b1f
 8001a9c:	08001b1f 	.word	0x08001b1f
 8001aa0:	08001b1f 	.word	0x08001b1f
 8001aa4:	08001b1f 	.word	0x08001b1f
 8001aa8:	08001b1f 	.word	0x08001b1f
 8001aac:	08001b1f 	.word	0x08001b1f
 8001ab0:	08001b1f 	.word	0x08001b1f
 8001ab4:	08001acd 	.word	0x08001acd
 8001ab8:	08001ae1 	.word	0x08001ae1
 8001abc:	4a75      	ldr	r2, [pc, #468]	@ (8001c94 <HAL_GPIO_Init+0x2a4>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d013      	beq.n	8001aea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ac2:	e02c      	b.n	8001b1e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	623b      	str	r3, [r7, #32]
          break;
 8001aca:	e029      	b.n	8001b20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	3304      	adds	r3, #4
 8001ad2:	623b      	str	r3, [r7, #32]
          break;
 8001ad4:	e024      	b.n	8001b20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	3308      	adds	r3, #8
 8001adc:	623b      	str	r3, [r7, #32]
          break;
 8001ade:	e01f      	b.n	8001b20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	330c      	adds	r3, #12
 8001ae6:	623b      	str	r3, [r7, #32]
          break;
 8001ae8:	e01a      	b.n	8001b20 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d102      	bne.n	8001af8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001af2:	2304      	movs	r3, #4
 8001af4:	623b      	str	r3, [r7, #32]
          break;
 8001af6:	e013      	b.n	8001b20 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d105      	bne.n	8001b0c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b00:	2308      	movs	r3, #8
 8001b02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	69fa      	ldr	r2, [r7, #28]
 8001b08:	611a      	str	r2, [r3, #16]
          break;
 8001b0a:	e009      	b.n	8001b20 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b0c:	2308      	movs	r3, #8
 8001b0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	69fa      	ldr	r2, [r7, #28]
 8001b14:	615a      	str	r2, [r3, #20]
          break;
 8001b16:	e003      	b.n	8001b20 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	623b      	str	r3, [r7, #32]
          break;
 8001b1c:	e000      	b.n	8001b20 <HAL_GPIO_Init+0x130>
          break;
 8001b1e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	2bff      	cmp	r3, #255	@ 0xff
 8001b24:	d801      	bhi.n	8001b2a <HAL_GPIO_Init+0x13a>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	e001      	b.n	8001b2e <HAL_GPIO_Init+0x13e>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	3304      	adds	r3, #4
 8001b2e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	2bff      	cmp	r3, #255	@ 0xff
 8001b34:	d802      	bhi.n	8001b3c <HAL_GPIO_Init+0x14c>
 8001b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	e002      	b.n	8001b42 <HAL_GPIO_Init+0x152>
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b3e:	3b08      	subs	r3, #8
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	210f      	movs	r1, #15
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b50:	43db      	mvns	r3, r3
 8001b52:	401a      	ands	r2, r3
 8001b54:	6a39      	ldr	r1, [r7, #32]
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5c:	431a      	orrs	r2, r3
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f000 80c1 	beq.w	8001cf2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b70:	4b49      	ldr	r3, [pc, #292]	@ (8001c98 <HAL_GPIO_Init+0x2a8>)
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	4a48      	ldr	r2, [pc, #288]	@ (8001c98 <HAL_GPIO_Init+0x2a8>)
 8001b76:	f043 0301 	orr.w	r3, r3, #1
 8001b7a:	6193      	str	r3, [r2, #24]
 8001b7c:	4b46      	ldr	r3, [pc, #280]	@ (8001c98 <HAL_GPIO_Init+0x2a8>)
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	60bb      	str	r3, [r7, #8]
 8001b86:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b88:	4a44      	ldr	r2, [pc, #272]	@ (8001c9c <HAL_GPIO_Init+0x2ac>)
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b8c:	089b      	lsrs	r3, r3, #2
 8001b8e:	3302      	adds	r3, #2
 8001b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b94:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b98:	f003 0303 	and.w	r3, r3, #3
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	220f      	movs	r2, #15
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	68fa      	ldr	r2, [r7, #12]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4a3c      	ldr	r2, [pc, #240]	@ (8001ca0 <HAL_GPIO_Init+0x2b0>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d01f      	beq.n	8001bf4 <HAL_GPIO_Init+0x204>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4a3b      	ldr	r2, [pc, #236]	@ (8001ca4 <HAL_GPIO_Init+0x2b4>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d019      	beq.n	8001bf0 <HAL_GPIO_Init+0x200>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4a3a      	ldr	r2, [pc, #232]	@ (8001ca8 <HAL_GPIO_Init+0x2b8>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d013      	beq.n	8001bec <HAL_GPIO_Init+0x1fc>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4a39      	ldr	r2, [pc, #228]	@ (8001cac <HAL_GPIO_Init+0x2bc>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d00d      	beq.n	8001be8 <HAL_GPIO_Init+0x1f8>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a38      	ldr	r2, [pc, #224]	@ (8001cb0 <HAL_GPIO_Init+0x2c0>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d007      	beq.n	8001be4 <HAL_GPIO_Init+0x1f4>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4a37      	ldr	r2, [pc, #220]	@ (8001cb4 <HAL_GPIO_Init+0x2c4>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d101      	bne.n	8001be0 <HAL_GPIO_Init+0x1f0>
 8001bdc:	2305      	movs	r3, #5
 8001bde:	e00a      	b.n	8001bf6 <HAL_GPIO_Init+0x206>
 8001be0:	2306      	movs	r3, #6
 8001be2:	e008      	b.n	8001bf6 <HAL_GPIO_Init+0x206>
 8001be4:	2304      	movs	r3, #4
 8001be6:	e006      	b.n	8001bf6 <HAL_GPIO_Init+0x206>
 8001be8:	2303      	movs	r3, #3
 8001bea:	e004      	b.n	8001bf6 <HAL_GPIO_Init+0x206>
 8001bec:	2302      	movs	r3, #2
 8001bee:	e002      	b.n	8001bf6 <HAL_GPIO_Init+0x206>
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e000      	b.n	8001bf6 <HAL_GPIO_Init+0x206>
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bf8:	f002 0203 	and.w	r2, r2, #3
 8001bfc:	0092      	lsls	r2, r2, #2
 8001bfe:	4093      	lsls	r3, r2
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c06:	4925      	ldr	r1, [pc, #148]	@ (8001c9c <HAL_GPIO_Init+0x2ac>)
 8001c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c0a:	089b      	lsrs	r3, r3, #2
 8001c0c:	3302      	adds	r3, #2
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d006      	beq.n	8001c2e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c20:	4b25      	ldr	r3, [pc, #148]	@ (8001cb8 <HAL_GPIO_Init+0x2c8>)
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	4924      	ldr	r1, [pc, #144]	@ (8001cb8 <HAL_GPIO_Init+0x2c8>)
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	608b      	str	r3, [r1, #8]
 8001c2c:	e006      	b.n	8001c3c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c2e:	4b22      	ldr	r3, [pc, #136]	@ (8001cb8 <HAL_GPIO_Init+0x2c8>)
 8001c30:	689a      	ldr	r2, [r3, #8]
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	43db      	mvns	r3, r3
 8001c36:	4920      	ldr	r1, [pc, #128]	@ (8001cb8 <HAL_GPIO_Init+0x2c8>)
 8001c38:	4013      	ands	r3, r2
 8001c3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d006      	beq.n	8001c56 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c48:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb8 <HAL_GPIO_Init+0x2c8>)
 8001c4a:	68da      	ldr	r2, [r3, #12]
 8001c4c:	491a      	ldr	r1, [pc, #104]	@ (8001cb8 <HAL_GPIO_Init+0x2c8>)
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	60cb      	str	r3, [r1, #12]
 8001c54:	e006      	b.n	8001c64 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c56:	4b18      	ldr	r3, [pc, #96]	@ (8001cb8 <HAL_GPIO_Init+0x2c8>)
 8001c58:	68da      	ldr	r2, [r3, #12]
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	4916      	ldr	r1, [pc, #88]	@ (8001cb8 <HAL_GPIO_Init+0x2c8>)
 8001c60:	4013      	ands	r3, r2
 8001c62:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d025      	beq.n	8001cbc <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c70:	4b11      	ldr	r3, [pc, #68]	@ (8001cb8 <HAL_GPIO_Init+0x2c8>)
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	4910      	ldr	r1, [pc, #64]	@ (8001cb8 <HAL_GPIO_Init+0x2c8>)
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	604b      	str	r3, [r1, #4]
 8001c7c:	e025      	b.n	8001cca <HAL_GPIO_Init+0x2da>
 8001c7e:	bf00      	nop
 8001c80:	10320000 	.word	0x10320000
 8001c84:	10310000 	.word	0x10310000
 8001c88:	10220000 	.word	0x10220000
 8001c8c:	10210000 	.word	0x10210000
 8001c90:	10120000 	.word	0x10120000
 8001c94:	10110000 	.word	0x10110000
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	40010000 	.word	0x40010000
 8001ca0:	40010800 	.word	0x40010800
 8001ca4:	40010c00 	.word	0x40010c00
 8001ca8:	40011000 	.word	0x40011000
 8001cac:	40011400 	.word	0x40011400
 8001cb0:	40011800 	.word	0x40011800
 8001cb4:	40011c00 	.word	0x40011c00
 8001cb8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cbc:	4b15      	ldr	r3, [pc, #84]	@ (8001d14 <HAL_GPIO_Init+0x324>)
 8001cbe:	685a      	ldr	r2, [r3, #4]
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	4913      	ldr	r1, [pc, #76]	@ (8001d14 <HAL_GPIO_Init+0x324>)
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d006      	beq.n	8001ce4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cd6:	4b0f      	ldr	r3, [pc, #60]	@ (8001d14 <HAL_GPIO_Init+0x324>)
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	490e      	ldr	r1, [pc, #56]	@ (8001d14 <HAL_GPIO_Init+0x324>)
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	600b      	str	r3, [r1, #0]
 8001ce2:	e006      	b.n	8001cf2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8001d14 <HAL_GPIO_Init+0x324>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	43db      	mvns	r3, r3
 8001cec:	4909      	ldr	r1, [pc, #36]	@ (8001d14 <HAL_GPIO_Init+0x324>)
 8001cee:	4013      	ands	r3, r2
 8001cf0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f47f ae7e 	bne.w	8001a04 <HAL_GPIO_Init+0x14>
  }
}
 8001d08:	bf00      	nop
 8001d0a:	bf00      	nop
 8001d0c:	372c      	adds	r7, #44	@ 0x2c
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr
 8001d14:	40010400 	.word	0x40010400

08001d18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	460b      	mov	r3, r1
 8001d22:	807b      	strh	r3, [r7, #2]
 8001d24:	4613      	mov	r3, r2
 8001d26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d28:	787b      	ldrb	r3, [r7, #1]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d003      	beq.n	8001d36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d2e:	887a      	ldrh	r2, [r7, #2]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d34:	e003      	b.n	8001d3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d36:	887b      	ldrh	r3, [r7, #2]
 8001d38:	041a      	lsls	r2, r3, #16
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	611a      	str	r2, [r3, #16]
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr

08001d48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e272      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f000 8087 	beq.w	8001e76 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d68:	4b92      	ldr	r3, [pc, #584]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 030c 	and.w	r3, r3, #12
 8001d70:	2b04      	cmp	r3, #4
 8001d72:	d00c      	beq.n	8001d8e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d74:	4b8f      	ldr	r3, [pc, #572]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f003 030c 	and.w	r3, r3, #12
 8001d7c:	2b08      	cmp	r3, #8
 8001d7e:	d112      	bne.n	8001da6 <HAL_RCC_OscConfig+0x5e>
 8001d80:	4b8c      	ldr	r3, [pc, #560]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d8c:	d10b      	bne.n	8001da6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d8e:	4b89      	ldr	r3, [pc, #548]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d06c      	beq.n	8001e74 <HAL_RCC_OscConfig+0x12c>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d168      	bne.n	8001e74 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e24c      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dae:	d106      	bne.n	8001dbe <HAL_RCC_OscConfig+0x76>
 8001db0:	4b80      	ldr	r3, [pc, #512]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a7f      	ldr	r2, [pc, #508]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001db6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dba:	6013      	str	r3, [r2, #0]
 8001dbc:	e02e      	b.n	8001e1c <HAL_RCC_OscConfig+0xd4>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d10c      	bne.n	8001de0 <HAL_RCC_OscConfig+0x98>
 8001dc6:	4b7b      	ldr	r3, [pc, #492]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a7a      	ldr	r2, [pc, #488]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001dcc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dd0:	6013      	str	r3, [r2, #0]
 8001dd2:	4b78      	ldr	r3, [pc, #480]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a77      	ldr	r2, [pc, #476]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ddc:	6013      	str	r3, [r2, #0]
 8001dde:	e01d      	b.n	8001e1c <HAL_RCC_OscConfig+0xd4>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001de8:	d10c      	bne.n	8001e04 <HAL_RCC_OscConfig+0xbc>
 8001dea:	4b72      	ldr	r3, [pc, #456]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a71      	ldr	r2, [pc, #452]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001df0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001df4:	6013      	str	r3, [r2, #0]
 8001df6:	4b6f      	ldr	r3, [pc, #444]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a6e      	ldr	r2, [pc, #440]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e00:	6013      	str	r3, [r2, #0]
 8001e02:	e00b      	b.n	8001e1c <HAL_RCC_OscConfig+0xd4>
 8001e04:	4b6b      	ldr	r3, [pc, #428]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a6a      	ldr	r2, [pc, #424]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001e0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e0e:	6013      	str	r3, [r2, #0]
 8001e10:	4b68      	ldr	r3, [pc, #416]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a67      	ldr	r2, [pc, #412]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001e16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e1a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d013      	beq.n	8001e4c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e24:	f7ff f8f4 	bl	8001010 <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e2c:	f7ff f8f0 	bl	8001010 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b64      	cmp	r3, #100	@ 0x64
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e200      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e3e:	4b5d      	ldr	r3, [pc, #372]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d0f0      	beq.n	8001e2c <HAL_RCC_OscConfig+0xe4>
 8001e4a:	e014      	b.n	8001e76 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4c:	f7ff f8e0 	bl	8001010 <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e54:	f7ff f8dc 	bl	8001010 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b64      	cmp	r3, #100	@ 0x64
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e1ec      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e66:	4b53      	ldr	r3, [pc, #332]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1f0      	bne.n	8001e54 <HAL_RCC_OscConfig+0x10c>
 8001e72:	e000      	b.n	8001e76 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d063      	beq.n	8001f4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e82:	4b4c      	ldr	r3, [pc, #304]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f003 030c 	and.w	r3, r3, #12
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d00b      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e8e:	4b49      	ldr	r3, [pc, #292]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f003 030c 	and.w	r3, r3, #12
 8001e96:	2b08      	cmp	r3, #8
 8001e98:	d11c      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x18c>
 8001e9a:	4b46      	ldr	r3, [pc, #280]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d116      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ea6:	4b43      	ldr	r3, [pc, #268]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d005      	beq.n	8001ebe <HAL_RCC_OscConfig+0x176>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d001      	beq.n	8001ebe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e1c0      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ebe:	4b3d      	ldr	r3, [pc, #244]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	4939      	ldr	r1, [pc, #228]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ed2:	e03a      	b.n	8001f4a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d020      	beq.n	8001f1e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001edc:	4b36      	ldr	r3, [pc, #216]	@ (8001fb8 <HAL_RCC_OscConfig+0x270>)
 8001ede:	2201      	movs	r2, #1
 8001ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee2:	f7ff f895 	bl	8001010 <HAL_GetTick>
 8001ee6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee8:	e008      	b.n	8001efc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eea:	f7ff f891 	bl	8001010 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e1a1      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001efc:	4b2d      	ldr	r3, [pc, #180]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d0f0      	beq.n	8001eea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f08:	4b2a      	ldr	r3, [pc, #168]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	695b      	ldr	r3, [r3, #20]
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	4927      	ldr	r1, [pc, #156]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	600b      	str	r3, [r1, #0]
 8001f1c:	e015      	b.n	8001f4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f1e:	4b26      	ldr	r3, [pc, #152]	@ (8001fb8 <HAL_RCC_OscConfig+0x270>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f24:	f7ff f874 	bl	8001010 <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f2c:	f7ff f870 	bl	8001010 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e180      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f3e:	4b1d      	ldr	r3, [pc, #116]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1f0      	bne.n	8001f2c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0308 	and.w	r3, r3, #8
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d03a      	beq.n	8001fcc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d019      	beq.n	8001f92 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f5e:	4b17      	ldr	r3, [pc, #92]	@ (8001fbc <HAL_RCC_OscConfig+0x274>)
 8001f60:	2201      	movs	r2, #1
 8001f62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f64:	f7ff f854 	bl	8001010 <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f6c:	f7ff f850 	bl	8001010 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e160      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d0f0      	beq.n	8001f6c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f8a:	2001      	movs	r0, #1
 8001f8c:	f000 fad0 	bl	8002530 <RCC_Delay>
 8001f90:	e01c      	b.n	8001fcc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f92:	4b0a      	ldr	r3, [pc, #40]	@ (8001fbc <HAL_RCC_OscConfig+0x274>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f98:	f7ff f83a 	bl	8001010 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f9e:	e00f      	b.n	8001fc0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fa0:	f7ff f836 	bl	8001010 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d908      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e146      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
 8001fb2:	bf00      	nop
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	42420000 	.word	0x42420000
 8001fbc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fc0:	4b92      	ldr	r3, [pc, #584]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1e9      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f000 80a6 	beq.w	8002126 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fde:	4b8b      	ldr	r3, [pc, #556]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10d      	bne.n	8002006 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fea:	4b88      	ldr	r3, [pc, #544]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	4a87      	ldr	r2, [pc, #540]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 8001ff0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ff4:	61d3      	str	r3, [r2, #28]
 8001ff6:	4b85      	ldr	r3, [pc, #532]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ffe:	60bb      	str	r3, [r7, #8]
 8002000:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002002:	2301      	movs	r3, #1
 8002004:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002006:	4b82      	ldr	r3, [pc, #520]	@ (8002210 <HAL_RCC_OscConfig+0x4c8>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800200e:	2b00      	cmp	r3, #0
 8002010:	d118      	bne.n	8002044 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002012:	4b7f      	ldr	r3, [pc, #508]	@ (8002210 <HAL_RCC_OscConfig+0x4c8>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a7e      	ldr	r2, [pc, #504]	@ (8002210 <HAL_RCC_OscConfig+0x4c8>)
 8002018:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800201c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800201e:	f7fe fff7 	bl	8001010 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002026:	f7fe fff3 	bl	8001010 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b64      	cmp	r3, #100	@ 0x64
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e103      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002038:	4b75      	ldr	r3, [pc, #468]	@ (8002210 <HAL_RCC_OscConfig+0x4c8>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0f0      	beq.n	8002026 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d106      	bne.n	800205a <HAL_RCC_OscConfig+0x312>
 800204c:	4b6f      	ldr	r3, [pc, #444]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	4a6e      	ldr	r2, [pc, #440]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002052:	f043 0301 	orr.w	r3, r3, #1
 8002056:	6213      	str	r3, [r2, #32]
 8002058:	e02d      	b.n	80020b6 <HAL_RCC_OscConfig+0x36e>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d10c      	bne.n	800207c <HAL_RCC_OscConfig+0x334>
 8002062:	4b6a      	ldr	r3, [pc, #424]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002064:	6a1b      	ldr	r3, [r3, #32]
 8002066:	4a69      	ldr	r2, [pc, #420]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002068:	f023 0301 	bic.w	r3, r3, #1
 800206c:	6213      	str	r3, [r2, #32]
 800206e:	4b67      	ldr	r3, [pc, #412]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002070:	6a1b      	ldr	r3, [r3, #32]
 8002072:	4a66      	ldr	r2, [pc, #408]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002074:	f023 0304 	bic.w	r3, r3, #4
 8002078:	6213      	str	r3, [r2, #32]
 800207a:	e01c      	b.n	80020b6 <HAL_RCC_OscConfig+0x36e>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	2b05      	cmp	r3, #5
 8002082:	d10c      	bne.n	800209e <HAL_RCC_OscConfig+0x356>
 8002084:	4b61      	ldr	r3, [pc, #388]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	4a60      	ldr	r2, [pc, #384]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 800208a:	f043 0304 	orr.w	r3, r3, #4
 800208e:	6213      	str	r3, [r2, #32]
 8002090:	4b5e      	ldr	r3, [pc, #376]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	4a5d      	ldr	r2, [pc, #372]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002096:	f043 0301 	orr.w	r3, r3, #1
 800209a:	6213      	str	r3, [r2, #32]
 800209c:	e00b      	b.n	80020b6 <HAL_RCC_OscConfig+0x36e>
 800209e:	4b5b      	ldr	r3, [pc, #364]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 80020a0:	6a1b      	ldr	r3, [r3, #32]
 80020a2:	4a5a      	ldr	r2, [pc, #360]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 80020a4:	f023 0301 	bic.w	r3, r3, #1
 80020a8:	6213      	str	r3, [r2, #32]
 80020aa:	4b58      	ldr	r3, [pc, #352]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 80020ac:	6a1b      	ldr	r3, [r3, #32]
 80020ae:	4a57      	ldr	r2, [pc, #348]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 80020b0:	f023 0304 	bic.w	r3, r3, #4
 80020b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d015      	beq.n	80020ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020be:	f7fe ffa7 	bl	8001010 <HAL_GetTick>
 80020c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c4:	e00a      	b.n	80020dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020c6:	f7fe ffa3 	bl	8001010 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e0b1      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020dc:	4b4b      	ldr	r3, [pc, #300]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 80020de:	6a1b      	ldr	r3, [r3, #32]
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0ee      	beq.n	80020c6 <HAL_RCC_OscConfig+0x37e>
 80020e8:	e014      	b.n	8002114 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ea:	f7fe ff91 	bl	8001010 <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020f0:	e00a      	b.n	8002108 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020f2:	f7fe ff8d 	bl	8001010 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002100:	4293      	cmp	r3, r2
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e09b      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002108:	4b40      	ldr	r3, [pc, #256]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1ee      	bne.n	80020f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002114:	7dfb      	ldrb	r3, [r7, #23]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d105      	bne.n	8002126 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800211a:	4b3c      	ldr	r3, [pc, #240]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	4a3b      	ldr	r2, [pc, #236]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002120:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002124:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	2b00      	cmp	r3, #0
 800212c:	f000 8087 	beq.w	800223e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002130:	4b36      	ldr	r3, [pc, #216]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f003 030c 	and.w	r3, r3, #12
 8002138:	2b08      	cmp	r3, #8
 800213a:	d061      	beq.n	8002200 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	69db      	ldr	r3, [r3, #28]
 8002140:	2b02      	cmp	r3, #2
 8002142:	d146      	bne.n	80021d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002144:	4b33      	ldr	r3, [pc, #204]	@ (8002214 <HAL_RCC_OscConfig+0x4cc>)
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214a:	f7fe ff61 	bl	8001010 <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002150:	e008      	b.n	8002164 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002152:	f7fe ff5d 	bl	8001010 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e06d      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002164:	4b29      	ldr	r3, [pc, #164]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1f0      	bne.n	8002152 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002178:	d108      	bne.n	800218c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800217a:	4b24      	ldr	r3, [pc, #144]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	4921      	ldr	r1, [pc, #132]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 8002188:	4313      	orrs	r3, r2
 800218a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800218c:	4b1f      	ldr	r3, [pc, #124]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a19      	ldr	r1, [r3, #32]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800219c:	430b      	orrs	r3, r1
 800219e:	491b      	ldr	r1, [pc, #108]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002214 <HAL_RCC_OscConfig+0x4cc>)
 80021a6:	2201      	movs	r2, #1
 80021a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021aa:	f7fe ff31 	bl	8001010 <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021b0:	e008      	b.n	80021c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b2:	f7fe ff2d 	bl	8001010 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e03d      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021c4:	4b11      	ldr	r3, [pc, #68]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0f0      	beq.n	80021b2 <HAL_RCC_OscConfig+0x46a>
 80021d0:	e035      	b.n	800223e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d2:	4b10      	ldr	r3, [pc, #64]	@ (8002214 <HAL_RCC_OscConfig+0x4cc>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d8:	f7fe ff1a 	bl	8001010 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e0:	f7fe ff16 	bl	8001010 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e026      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021f2:	4b06      	ldr	r3, [pc, #24]	@ (800220c <HAL_RCC_OscConfig+0x4c4>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1f0      	bne.n	80021e0 <HAL_RCC_OscConfig+0x498>
 80021fe:	e01e      	b.n	800223e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	69db      	ldr	r3, [r3, #28]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d107      	bne.n	8002218 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e019      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
 800220c:	40021000 	.word	0x40021000
 8002210:	40007000 	.word	0x40007000
 8002214:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002218:	4b0b      	ldr	r3, [pc, #44]	@ (8002248 <HAL_RCC_OscConfig+0x500>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	429a      	cmp	r2, r3
 800222a:	d106      	bne.n	800223a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002236:	429a      	cmp	r2, r3
 8002238:	d001      	beq.n	800223e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e000      	b.n	8002240 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	3718      	adds	r7, #24
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40021000 	.word	0x40021000

0800224c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d101      	bne.n	8002260 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e0d0      	b.n	8002402 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002260:	4b6a      	ldr	r3, [pc, #424]	@ (800240c <HAL_RCC_ClockConfig+0x1c0>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0307 	and.w	r3, r3, #7
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	429a      	cmp	r2, r3
 800226c:	d910      	bls.n	8002290 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226e:	4b67      	ldr	r3, [pc, #412]	@ (800240c <HAL_RCC_ClockConfig+0x1c0>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f023 0207 	bic.w	r2, r3, #7
 8002276:	4965      	ldr	r1, [pc, #404]	@ (800240c <HAL_RCC_ClockConfig+0x1c0>)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	4313      	orrs	r3, r2
 800227c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800227e:	4b63      	ldr	r3, [pc, #396]	@ (800240c <HAL_RCC_ClockConfig+0x1c0>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	429a      	cmp	r2, r3
 800228a:	d001      	beq.n	8002290 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e0b8      	b.n	8002402 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d020      	beq.n	80022de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0304 	and.w	r3, r3, #4
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d005      	beq.n	80022b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022a8:	4b59      	ldr	r3, [pc, #356]	@ (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	4a58      	ldr	r2, [pc, #352]	@ (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80022ae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80022b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0308 	and.w	r3, r3, #8
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d005      	beq.n	80022cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022c0:	4b53      	ldr	r3, [pc, #332]	@ (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	4a52      	ldr	r2, [pc, #328]	@ (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80022c6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80022ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022cc:	4b50      	ldr	r3, [pc, #320]	@ (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	494d      	ldr	r1, [pc, #308]	@ (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d040      	beq.n	800236c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d107      	bne.n	8002302 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f2:	4b47      	ldr	r3, [pc, #284]	@ (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d115      	bne.n	800232a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e07f      	b.n	8002402 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2b02      	cmp	r3, #2
 8002308:	d107      	bne.n	800231a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800230a:	4b41      	ldr	r3, [pc, #260]	@ (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d109      	bne.n	800232a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e073      	b.n	8002402 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800231a:	4b3d      	ldr	r3, [pc, #244]	@ (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e06b      	b.n	8002402 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800232a:	4b39      	ldr	r3, [pc, #228]	@ (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f023 0203 	bic.w	r2, r3, #3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	4936      	ldr	r1, [pc, #216]	@ (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 8002338:	4313      	orrs	r3, r2
 800233a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800233c:	f7fe fe68 	bl	8001010 <HAL_GetTick>
 8002340:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002342:	e00a      	b.n	800235a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002344:	f7fe fe64 	bl	8001010 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002352:	4293      	cmp	r3, r2
 8002354:	d901      	bls.n	800235a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e053      	b.n	8002402 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800235a:	4b2d      	ldr	r3, [pc, #180]	@ (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f003 020c 	and.w	r2, r3, #12
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	429a      	cmp	r2, r3
 800236a:	d1eb      	bne.n	8002344 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800236c:	4b27      	ldr	r3, [pc, #156]	@ (800240c <HAL_RCC_ClockConfig+0x1c0>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0307 	and.w	r3, r3, #7
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	429a      	cmp	r2, r3
 8002378:	d210      	bcs.n	800239c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800237a:	4b24      	ldr	r3, [pc, #144]	@ (800240c <HAL_RCC_ClockConfig+0x1c0>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f023 0207 	bic.w	r2, r3, #7
 8002382:	4922      	ldr	r1, [pc, #136]	@ (800240c <HAL_RCC_ClockConfig+0x1c0>)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	4313      	orrs	r3, r2
 8002388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800238a:	4b20      	ldr	r3, [pc, #128]	@ (800240c <HAL_RCC_ClockConfig+0x1c0>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	429a      	cmp	r2, r3
 8002396:	d001      	beq.n	800239c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e032      	b.n	8002402 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d008      	beq.n	80023ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023a8:	4b19      	ldr	r3, [pc, #100]	@ (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	4916      	ldr	r1, [pc, #88]	@ (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d009      	beq.n	80023da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023c6:	4b12      	ldr	r3, [pc, #72]	@ (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	490e      	ldr	r1, [pc, #56]	@ (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023da:	f000 f821 	bl	8002420 <HAL_RCC_GetSysClockFreq>
 80023de:	4602      	mov	r2, r0
 80023e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	091b      	lsrs	r3, r3, #4
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	490a      	ldr	r1, [pc, #40]	@ (8002414 <HAL_RCC_ClockConfig+0x1c8>)
 80023ec:	5ccb      	ldrb	r3, [r1, r3]
 80023ee:	fa22 f303 	lsr.w	r3, r2, r3
 80023f2:	4a09      	ldr	r2, [pc, #36]	@ (8002418 <HAL_RCC_ClockConfig+0x1cc>)
 80023f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023f6:	4b09      	ldr	r3, [pc, #36]	@ (800241c <HAL_RCC_ClockConfig+0x1d0>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7fe fdc6 	bl	8000f8c <HAL_InitTick>

  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40022000 	.word	0x40022000
 8002410:	40021000 	.word	0x40021000
 8002414:	08004a14 	.word	0x08004a14
 8002418:	20000000 	.word	0x20000000
 800241c:	20000004 	.word	0x20000004

08002420 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002420:	b480      	push	{r7}
 8002422:	b087      	sub	sp, #28
 8002424:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002426:	2300      	movs	r3, #0
 8002428:	60fb      	str	r3, [r7, #12]
 800242a:	2300      	movs	r3, #0
 800242c:	60bb      	str	r3, [r7, #8]
 800242e:	2300      	movs	r3, #0
 8002430:	617b      	str	r3, [r7, #20]
 8002432:	2300      	movs	r3, #0
 8002434:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002436:	2300      	movs	r3, #0
 8002438:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800243a:	4b1e      	ldr	r3, [pc, #120]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0x94>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f003 030c 	and.w	r3, r3, #12
 8002446:	2b04      	cmp	r3, #4
 8002448:	d002      	beq.n	8002450 <HAL_RCC_GetSysClockFreq+0x30>
 800244a:	2b08      	cmp	r3, #8
 800244c:	d003      	beq.n	8002456 <HAL_RCC_GetSysClockFreq+0x36>
 800244e:	e027      	b.n	80024a0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002450:	4b19      	ldr	r3, [pc, #100]	@ (80024b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002452:	613b      	str	r3, [r7, #16]
      break;
 8002454:	e027      	b.n	80024a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	0c9b      	lsrs	r3, r3, #18
 800245a:	f003 030f 	and.w	r3, r3, #15
 800245e:	4a17      	ldr	r2, [pc, #92]	@ (80024bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002460:	5cd3      	ldrb	r3, [r2, r3]
 8002462:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d010      	beq.n	8002490 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800246e:	4b11      	ldr	r3, [pc, #68]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	0c5b      	lsrs	r3, r3, #17
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	4a11      	ldr	r2, [pc, #68]	@ (80024c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800247a:	5cd3      	ldrb	r3, [r2, r3]
 800247c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a0d      	ldr	r2, [pc, #52]	@ (80024b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002482:	fb03 f202 	mul.w	r2, r3, r2
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	fbb2 f3f3 	udiv	r3, r2, r3
 800248c:	617b      	str	r3, [r7, #20]
 800248e:	e004      	b.n	800249a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a0c      	ldr	r2, [pc, #48]	@ (80024c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002494:	fb02 f303 	mul.w	r3, r2, r3
 8002498:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	613b      	str	r3, [r7, #16]
      break;
 800249e:	e002      	b.n	80024a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024a0:	4b09      	ldr	r3, [pc, #36]	@ (80024c8 <HAL_RCC_GetSysClockFreq+0xa8>)
 80024a2:	613b      	str	r3, [r7, #16]
      break;
 80024a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024a6:	693b      	ldr	r3, [r7, #16]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	371c      	adds	r7, #28
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bc80      	pop	{r7}
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	40021000 	.word	0x40021000
 80024b8:	00f42400 	.word	0x00f42400
 80024bc:	08004a2c 	.word	0x08004a2c
 80024c0:	08004a3c 	.word	0x08004a3c
 80024c4:	003d0900 	.word	0x003d0900
 80024c8:	007a1200 	.word	0x007a1200

080024cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024d0:	4b02      	ldr	r3, [pc, #8]	@ (80024dc <HAL_RCC_GetHCLKFreq+0x10>)
 80024d2:	681b      	ldr	r3, [r3, #0]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr
 80024dc:	20000000 	.word	0x20000000

080024e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024e4:	f7ff fff2 	bl	80024cc <HAL_RCC_GetHCLKFreq>
 80024e8:	4602      	mov	r2, r0
 80024ea:	4b05      	ldr	r3, [pc, #20]	@ (8002500 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	0a1b      	lsrs	r3, r3, #8
 80024f0:	f003 0307 	and.w	r3, r3, #7
 80024f4:	4903      	ldr	r1, [pc, #12]	@ (8002504 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024f6:	5ccb      	ldrb	r3, [r1, r3]
 80024f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	40021000 	.word	0x40021000
 8002504:	08004a24 	.word	0x08004a24

08002508 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800250c:	f7ff ffde 	bl	80024cc <HAL_RCC_GetHCLKFreq>
 8002510:	4602      	mov	r2, r0
 8002512:	4b05      	ldr	r3, [pc, #20]	@ (8002528 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	0adb      	lsrs	r3, r3, #11
 8002518:	f003 0307 	and.w	r3, r3, #7
 800251c:	4903      	ldr	r1, [pc, #12]	@ (800252c <HAL_RCC_GetPCLK2Freq+0x24>)
 800251e:	5ccb      	ldrb	r3, [r1, r3]
 8002520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002524:	4618      	mov	r0, r3
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40021000 	.word	0x40021000
 800252c:	08004a24 	.word	0x08004a24

08002530 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002538:	4b0a      	ldr	r3, [pc, #40]	@ (8002564 <RCC_Delay+0x34>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a0a      	ldr	r2, [pc, #40]	@ (8002568 <RCC_Delay+0x38>)
 800253e:	fba2 2303 	umull	r2, r3, r2, r3
 8002542:	0a5b      	lsrs	r3, r3, #9
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	fb02 f303 	mul.w	r3, r2, r3
 800254a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800254c:	bf00      	nop
  }
  while (Delay --);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	1e5a      	subs	r2, r3, #1
 8002552:	60fa      	str	r2, [r7, #12]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1f9      	bne.n	800254c <RCC_Delay+0x1c>
}
 8002558:	bf00      	nop
 800255a:	bf00      	nop
 800255c:	3714      	adds	r7, #20
 800255e:	46bd      	mov	sp, r7
 8002560:	bc80      	pop	{r7}
 8002562:	4770      	bx	lr
 8002564:	20000000 	.word	0x20000000
 8002568:	10624dd3 	.word	0x10624dd3

0800256c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e041      	b.n	8002602 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d106      	bne.n	8002598 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7fe fb5e 	bl	8000c54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2202      	movs	r2, #2
 800259c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3304      	adds	r3, #4
 80025a8:	4619      	mov	r1, r3
 80025aa:	4610      	mov	r0, r2
 80025ac:	f000 faca 	bl	8002b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b082      	sub	sp, #8
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d101      	bne.n	800261c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e041      	b.n	80026a0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b00      	cmp	r3, #0
 8002626:	d106      	bne.n	8002636 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 f839 	bl	80026a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2202      	movs	r2, #2
 800263a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	3304      	adds	r3, #4
 8002646:	4619      	mov	r1, r3
 8002648:	4610      	mov	r0, r2
 800264a:	f000 fa7b 	bl	8002b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2201      	movs	r2, #1
 800265a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2201      	movs	r2, #1
 8002682:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2201      	movs	r2, #1
 800269a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bc80      	pop	{r7}
 80026b8:	4770      	bx	lr
	...

080026bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d109      	bne.n	80026e0 <HAL_TIM_PWM_Start+0x24>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	bf14      	ite	ne
 80026d8:	2301      	movne	r3, #1
 80026da:	2300      	moveq	r3, #0
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	e022      	b.n	8002726 <HAL_TIM_PWM_Start+0x6a>
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	2b04      	cmp	r3, #4
 80026e4:	d109      	bne.n	80026fa <HAL_TIM_PWM_Start+0x3e>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	bf14      	ite	ne
 80026f2:	2301      	movne	r3, #1
 80026f4:	2300      	moveq	r3, #0
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	e015      	b.n	8002726 <HAL_TIM_PWM_Start+0x6a>
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	2b08      	cmp	r3, #8
 80026fe:	d109      	bne.n	8002714 <HAL_TIM_PWM_Start+0x58>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2b01      	cmp	r3, #1
 800270a:	bf14      	ite	ne
 800270c:	2301      	movne	r3, #1
 800270e:	2300      	moveq	r3, #0
 8002710:	b2db      	uxtb	r3, r3
 8002712:	e008      	b.n	8002726 <HAL_TIM_PWM_Start+0x6a>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800271a:	b2db      	uxtb	r3, r3
 800271c:	2b01      	cmp	r3, #1
 800271e:	bf14      	ite	ne
 8002720:	2301      	movne	r3, #1
 8002722:	2300      	moveq	r3, #0
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e072      	b.n	8002814 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d104      	bne.n	800273e <HAL_TIM_PWM_Start+0x82>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2202      	movs	r2, #2
 8002738:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800273c:	e013      	b.n	8002766 <HAL_TIM_PWM_Start+0xaa>
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	2b04      	cmp	r3, #4
 8002742:	d104      	bne.n	800274e <HAL_TIM_PWM_Start+0x92>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2202      	movs	r2, #2
 8002748:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800274c:	e00b      	b.n	8002766 <HAL_TIM_PWM_Start+0xaa>
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	2b08      	cmp	r3, #8
 8002752:	d104      	bne.n	800275e <HAL_TIM_PWM_Start+0xa2>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2202      	movs	r2, #2
 8002758:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800275c:	e003      	b.n	8002766 <HAL_TIM_PWM_Start+0xaa>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2202      	movs	r2, #2
 8002762:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2201      	movs	r2, #1
 800276c:	6839      	ldr	r1, [r7, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f000 fcb0 	bl	80030d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a28      	ldr	r2, [pc, #160]	@ (800281c <HAL_TIM_PWM_Start+0x160>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d004      	beq.n	8002788 <HAL_TIM_PWM_Start+0xcc>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a27      	ldr	r2, [pc, #156]	@ (8002820 <HAL_TIM_PWM_Start+0x164>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d101      	bne.n	800278c <HAL_TIM_PWM_Start+0xd0>
 8002788:	2301      	movs	r3, #1
 800278a:	e000      	b.n	800278e <HAL_TIM_PWM_Start+0xd2>
 800278c:	2300      	movs	r3, #0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d007      	beq.n	80027a2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80027a0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a1d      	ldr	r2, [pc, #116]	@ (800281c <HAL_TIM_PWM_Start+0x160>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d018      	beq.n	80027de <HAL_TIM_PWM_Start+0x122>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a1b      	ldr	r2, [pc, #108]	@ (8002820 <HAL_TIM_PWM_Start+0x164>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d013      	beq.n	80027de <HAL_TIM_PWM_Start+0x122>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027be:	d00e      	beq.n	80027de <HAL_TIM_PWM_Start+0x122>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a17      	ldr	r2, [pc, #92]	@ (8002824 <HAL_TIM_PWM_Start+0x168>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d009      	beq.n	80027de <HAL_TIM_PWM_Start+0x122>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a16      	ldr	r2, [pc, #88]	@ (8002828 <HAL_TIM_PWM_Start+0x16c>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d004      	beq.n	80027de <HAL_TIM_PWM_Start+0x122>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a14      	ldr	r2, [pc, #80]	@ (800282c <HAL_TIM_PWM_Start+0x170>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d111      	bne.n	8002802 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f003 0307 	and.w	r3, r3, #7
 80027e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2b06      	cmp	r3, #6
 80027ee:	d010      	beq.n	8002812 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f042 0201 	orr.w	r2, r2, #1
 80027fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002800:	e007      	b.n	8002812 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f042 0201 	orr.w	r2, r2, #1
 8002810:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3710      	adds	r7, #16
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40012c00 	.word	0x40012c00
 8002820:	40013400 	.word	0x40013400
 8002824:	40000400 	.word	0x40000400
 8002828:	40000800 	.word	0x40000800
 800282c:	40000c00 	.word	0x40000c00

08002830 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800283c:	2300      	movs	r3, #0
 800283e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002846:	2b01      	cmp	r3, #1
 8002848:	d101      	bne.n	800284e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800284a:	2302      	movs	r3, #2
 800284c:	e0ae      	b.n	80029ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2b0c      	cmp	r3, #12
 800285a:	f200 809f 	bhi.w	800299c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800285e:	a201      	add	r2, pc, #4	@ (adr r2, 8002864 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002864:	08002899 	.word	0x08002899
 8002868:	0800299d 	.word	0x0800299d
 800286c:	0800299d 	.word	0x0800299d
 8002870:	0800299d 	.word	0x0800299d
 8002874:	080028d9 	.word	0x080028d9
 8002878:	0800299d 	.word	0x0800299d
 800287c:	0800299d 	.word	0x0800299d
 8002880:	0800299d 	.word	0x0800299d
 8002884:	0800291b 	.word	0x0800291b
 8002888:	0800299d 	.word	0x0800299d
 800288c:	0800299d 	.word	0x0800299d
 8002890:	0800299d 	.word	0x0800299d
 8002894:	0800295b 	.word	0x0800295b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68b9      	ldr	r1, [r7, #8]
 800289e:	4618      	mov	r0, r3
 80028a0:	f000 f9d6 	bl	8002c50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	699a      	ldr	r2, [r3, #24]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f042 0208 	orr.w	r2, r2, #8
 80028b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	699a      	ldr	r2, [r3, #24]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f022 0204 	bic.w	r2, r2, #4
 80028c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6999      	ldr	r1, [r3, #24]
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	691a      	ldr	r2, [r3, #16]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	430a      	orrs	r2, r1
 80028d4:	619a      	str	r2, [r3, #24]
      break;
 80028d6:	e064      	b.n	80029a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68b9      	ldr	r1, [r7, #8]
 80028de:	4618      	mov	r0, r3
 80028e0:	f000 fa26 	bl	8002d30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	699a      	ldr	r2, [r3, #24]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	699a      	ldr	r2, [r3, #24]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002902:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6999      	ldr	r1, [r3, #24]
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	021a      	lsls	r2, r3, #8
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	430a      	orrs	r2, r1
 8002916:	619a      	str	r2, [r3, #24]
      break;
 8002918:	e043      	b.n	80029a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68b9      	ldr	r1, [r7, #8]
 8002920:	4618      	mov	r0, r3
 8002922:	f000 fa79 	bl	8002e18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	69da      	ldr	r2, [r3, #28]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f042 0208 	orr.w	r2, r2, #8
 8002934:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	69da      	ldr	r2, [r3, #28]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 0204 	bic.w	r2, r2, #4
 8002944:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	69d9      	ldr	r1, [r3, #28]
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	691a      	ldr	r2, [r3, #16]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	430a      	orrs	r2, r1
 8002956:	61da      	str	r2, [r3, #28]
      break;
 8002958:	e023      	b.n	80029a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68b9      	ldr	r1, [r7, #8]
 8002960:	4618      	mov	r0, r3
 8002962:	f000 facd 	bl	8002f00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	69da      	ldr	r2, [r3, #28]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002974:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	69da      	ldr	r2, [r3, #28]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002984:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	69d9      	ldr	r1, [r3, #28]
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	021a      	lsls	r2, r3, #8
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	430a      	orrs	r2, r1
 8002998:	61da      	str	r2, [r3, #28]
      break;
 800299a:	e002      	b.n	80029a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	75fb      	strb	r3, [r7, #23]
      break;
 80029a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80029aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3718      	adds	r7, #24
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029be:	2300      	movs	r3, #0
 80029c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d101      	bne.n	80029d0 <HAL_TIM_ConfigClockSource+0x1c>
 80029cc:	2302      	movs	r3, #2
 80029ce:	e0b4      	b.n	8002b3a <HAL_TIM_ConfigClockSource+0x186>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2202      	movs	r2, #2
 80029dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80029ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80029f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68ba      	ldr	r2, [r7, #8]
 80029fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a08:	d03e      	beq.n	8002a88 <HAL_TIM_ConfigClockSource+0xd4>
 8002a0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a0e:	f200 8087 	bhi.w	8002b20 <HAL_TIM_ConfigClockSource+0x16c>
 8002a12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a16:	f000 8086 	beq.w	8002b26 <HAL_TIM_ConfigClockSource+0x172>
 8002a1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a1e:	d87f      	bhi.n	8002b20 <HAL_TIM_ConfigClockSource+0x16c>
 8002a20:	2b70      	cmp	r3, #112	@ 0x70
 8002a22:	d01a      	beq.n	8002a5a <HAL_TIM_ConfigClockSource+0xa6>
 8002a24:	2b70      	cmp	r3, #112	@ 0x70
 8002a26:	d87b      	bhi.n	8002b20 <HAL_TIM_ConfigClockSource+0x16c>
 8002a28:	2b60      	cmp	r3, #96	@ 0x60
 8002a2a:	d050      	beq.n	8002ace <HAL_TIM_ConfigClockSource+0x11a>
 8002a2c:	2b60      	cmp	r3, #96	@ 0x60
 8002a2e:	d877      	bhi.n	8002b20 <HAL_TIM_ConfigClockSource+0x16c>
 8002a30:	2b50      	cmp	r3, #80	@ 0x50
 8002a32:	d03c      	beq.n	8002aae <HAL_TIM_ConfigClockSource+0xfa>
 8002a34:	2b50      	cmp	r3, #80	@ 0x50
 8002a36:	d873      	bhi.n	8002b20 <HAL_TIM_ConfigClockSource+0x16c>
 8002a38:	2b40      	cmp	r3, #64	@ 0x40
 8002a3a:	d058      	beq.n	8002aee <HAL_TIM_ConfigClockSource+0x13a>
 8002a3c:	2b40      	cmp	r3, #64	@ 0x40
 8002a3e:	d86f      	bhi.n	8002b20 <HAL_TIM_ConfigClockSource+0x16c>
 8002a40:	2b30      	cmp	r3, #48	@ 0x30
 8002a42:	d064      	beq.n	8002b0e <HAL_TIM_ConfigClockSource+0x15a>
 8002a44:	2b30      	cmp	r3, #48	@ 0x30
 8002a46:	d86b      	bhi.n	8002b20 <HAL_TIM_ConfigClockSource+0x16c>
 8002a48:	2b20      	cmp	r3, #32
 8002a4a:	d060      	beq.n	8002b0e <HAL_TIM_ConfigClockSource+0x15a>
 8002a4c:	2b20      	cmp	r3, #32
 8002a4e:	d867      	bhi.n	8002b20 <HAL_TIM_ConfigClockSource+0x16c>
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d05c      	beq.n	8002b0e <HAL_TIM_ConfigClockSource+0x15a>
 8002a54:	2b10      	cmp	r3, #16
 8002a56:	d05a      	beq.n	8002b0e <HAL_TIM_ConfigClockSource+0x15a>
 8002a58:	e062      	b.n	8002b20 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a6a:	f000 fb14 	bl	8003096 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002a7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68ba      	ldr	r2, [r7, #8]
 8002a84:	609a      	str	r2, [r3, #8]
      break;
 8002a86:	e04f      	b.n	8002b28 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a98:	f000 fafd 	bl	8003096 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689a      	ldr	r2, [r3, #8]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002aaa:	609a      	str	r2, [r3, #8]
      break;
 8002aac:	e03c      	b.n	8002b28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aba:	461a      	mov	r2, r3
 8002abc:	f000 fa74 	bl	8002fa8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2150      	movs	r1, #80	@ 0x50
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 facb 	bl	8003062 <TIM_ITRx_SetConfig>
      break;
 8002acc:	e02c      	b.n	8002b28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ada:	461a      	mov	r2, r3
 8002adc:	f000 fa92 	bl	8003004 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2160      	movs	r1, #96	@ 0x60
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f000 fabb 	bl	8003062 <TIM_ITRx_SetConfig>
      break;
 8002aec:	e01c      	b.n	8002b28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002afa:	461a      	mov	r2, r3
 8002afc:	f000 fa54 	bl	8002fa8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2140      	movs	r1, #64	@ 0x40
 8002b06:	4618      	mov	r0, r3
 8002b08:	f000 faab 	bl	8003062 <TIM_ITRx_SetConfig>
      break;
 8002b0c:	e00c      	b.n	8002b28 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4619      	mov	r1, r3
 8002b18:	4610      	mov	r0, r2
 8002b1a:	f000 faa2 	bl	8003062 <TIM_ITRx_SetConfig>
      break;
 8002b1e:	e003      	b.n	8002b28 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	73fb      	strb	r3, [r7, #15]
      break;
 8002b24:	e000      	b.n	8002b28 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3710      	adds	r7, #16
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
	...

08002b44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a39      	ldr	r2, [pc, #228]	@ (8002c3c <TIM_Base_SetConfig+0xf8>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d013      	beq.n	8002b84 <TIM_Base_SetConfig+0x40>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a38      	ldr	r2, [pc, #224]	@ (8002c40 <TIM_Base_SetConfig+0xfc>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d00f      	beq.n	8002b84 <TIM_Base_SetConfig+0x40>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b6a:	d00b      	beq.n	8002b84 <TIM_Base_SetConfig+0x40>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a35      	ldr	r2, [pc, #212]	@ (8002c44 <TIM_Base_SetConfig+0x100>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d007      	beq.n	8002b84 <TIM_Base_SetConfig+0x40>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a34      	ldr	r2, [pc, #208]	@ (8002c48 <TIM_Base_SetConfig+0x104>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d003      	beq.n	8002b84 <TIM_Base_SetConfig+0x40>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a33      	ldr	r2, [pc, #204]	@ (8002c4c <TIM_Base_SetConfig+0x108>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d108      	bne.n	8002b96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a28      	ldr	r2, [pc, #160]	@ (8002c3c <TIM_Base_SetConfig+0xf8>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d013      	beq.n	8002bc6 <TIM_Base_SetConfig+0x82>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a27      	ldr	r2, [pc, #156]	@ (8002c40 <TIM_Base_SetConfig+0xfc>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d00f      	beq.n	8002bc6 <TIM_Base_SetConfig+0x82>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bac:	d00b      	beq.n	8002bc6 <TIM_Base_SetConfig+0x82>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a24      	ldr	r2, [pc, #144]	@ (8002c44 <TIM_Base_SetConfig+0x100>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d007      	beq.n	8002bc6 <TIM_Base_SetConfig+0x82>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a23      	ldr	r2, [pc, #140]	@ (8002c48 <TIM_Base_SetConfig+0x104>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d003      	beq.n	8002bc6 <TIM_Base_SetConfig+0x82>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a22      	ldr	r2, [pc, #136]	@ (8002c4c <TIM_Base_SetConfig+0x108>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d108      	bne.n	8002bd8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	68fa      	ldr	r2, [r7, #12]
 8002bea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	689a      	ldr	r2, [r3, #8]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a0f      	ldr	r2, [pc, #60]	@ (8002c3c <TIM_Base_SetConfig+0xf8>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d003      	beq.n	8002c0c <TIM_Base_SetConfig+0xc8>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a0e      	ldr	r2, [pc, #56]	@ (8002c40 <TIM_Base_SetConfig+0xfc>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d103      	bne.n	8002c14 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	691a      	ldr	r2, [r3, #16]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d005      	beq.n	8002c32 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	f023 0201 	bic.w	r2, r3, #1
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	611a      	str	r2, [r3, #16]
  }
}
 8002c32:	bf00      	nop
 8002c34:	3714      	adds	r7, #20
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr
 8002c3c:	40012c00 	.word	0x40012c00
 8002c40:	40013400 	.word	0x40013400
 8002c44:	40000400 	.word	0x40000400
 8002c48:	40000800 	.word	0x40000800
 8002c4c:	40000c00 	.word	0x40000c00

08002c50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b087      	sub	sp, #28
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	f023 0201 	bic.w	r2, r3, #1
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f023 0303 	bic.w	r3, r3, #3
 8002c86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	f023 0302 	bic.w	r3, r3, #2
 8002c98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	697a      	ldr	r2, [r7, #20]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a20      	ldr	r2, [pc, #128]	@ (8002d28 <TIM_OC1_SetConfig+0xd8>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d003      	beq.n	8002cb4 <TIM_OC1_SetConfig+0x64>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a1f      	ldr	r2, [pc, #124]	@ (8002d2c <TIM_OC1_SetConfig+0xdc>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d10c      	bne.n	8002cce <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	f023 0308 	bic.w	r3, r3, #8
 8002cba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	f023 0304 	bic.w	r3, r3, #4
 8002ccc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a15      	ldr	r2, [pc, #84]	@ (8002d28 <TIM_OC1_SetConfig+0xd8>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d003      	beq.n	8002cde <TIM_OC1_SetConfig+0x8e>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a14      	ldr	r2, [pc, #80]	@ (8002d2c <TIM_OC1_SetConfig+0xdc>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d111      	bne.n	8002d02 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ce4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002cec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685a      	ldr	r2, [r3, #4]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	621a      	str	r2, [r3, #32]
}
 8002d1c:	bf00      	nop
 8002d1e:	371c      	adds	r7, #28
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bc80      	pop	{r7}
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	40012c00 	.word	0x40012c00
 8002d2c:	40013400 	.word	0x40013400

08002d30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b087      	sub	sp, #28
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	f023 0210 	bic.w	r2, r3, #16
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	021b      	lsls	r3, r3, #8
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	f023 0320 	bic.w	r3, r3, #32
 8002d7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	011b      	lsls	r3, r3, #4
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a21      	ldr	r2, [pc, #132]	@ (8002e10 <TIM_OC2_SetConfig+0xe0>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d003      	beq.n	8002d98 <TIM_OC2_SetConfig+0x68>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a20      	ldr	r2, [pc, #128]	@ (8002e14 <TIM_OC2_SetConfig+0xe4>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d10d      	bne.n	8002db4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	011b      	lsls	r3, r3, #4
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002db2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a16      	ldr	r2, [pc, #88]	@ (8002e10 <TIM_OC2_SetConfig+0xe0>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d003      	beq.n	8002dc4 <TIM_OC2_SetConfig+0x94>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a15      	ldr	r2, [pc, #84]	@ (8002e14 <TIM_OC2_SetConfig+0xe4>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d113      	bne.n	8002dec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002dca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002dd2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	695b      	ldr	r3, [r3, #20]
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	693a      	ldr	r2, [r7, #16]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	621a      	str	r2, [r3, #32]
}
 8002e06:	bf00      	nop
 8002e08:	371c      	adds	r7, #28
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bc80      	pop	{r7}
 8002e0e:	4770      	bx	lr
 8002e10:	40012c00 	.word	0x40012c00
 8002e14:	40013400 	.word	0x40013400

08002e18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b087      	sub	sp, #28
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a1b      	ldr	r3, [r3, #32]
 8002e2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f023 0303 	bic.w	r3, r3, #3
 8002e4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002e60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	021b      	lsls	r3, r3, #8
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a21      	ldr	r2, [pc, #132]	@ (8002ef8 <TIM_OC3_SetConfig+0xe0>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d003      	beq.n	8002e7e <TIM_OC3_SetConfig+0x66>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a20      	ldr	r2, [pc, #128]	@ (8002efc <TIM_OC3_SetConfig+0xe4>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d10d      	bne.n	8002e9a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002e84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	021b      	lsls	r3, r3, #8
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002e98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a16      	ldr	r2, [pc, #88]	@ (8002ef8 <TIM_OC3_SetConfig+0xe0>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d003      	beq.n	8002eaa <TIM_OC3_SetConfig+0x92>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a15      	ldr	r2, [pc, #84]	@ (8002efc <TIM_OC3_SetConfig+0xe4>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d113      	bne.n	8002ed2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002eb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002eb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	011b      	lsls	r3, r3, #4
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	011b      	lsls	r3, r3, #4
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685a      	ldr	r2, [r3, #4]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	697a      	ldr	r2, [r7, #20]
 8002eea:	621a      	str	r2, [r3, #32]
}
 8002eec:	bf00      	nop
 8002eee:	371c      	adds	r7, #28
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bc80      	pop	{r7}
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	40012c00 	.word	0x40012c00
 8002efc:	40013400 	.word	0x40013400

08002f00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b087      	sub	sp, #28
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	69db      	ldr	r3, [r3, #28]
 8002f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	021b      	lsls	r3, r3, #8
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002f4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	031b      	lsls	r3, r3, #12
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a11      	ldr	r2, [pc, #68]	@ (8002fa0 <TIM_OC4_SetConfig+0xa0>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d003      	beq.n	8002f68 <TIM_OC4_SetConfig+0x68>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a10      	ldr	r2, [pc, #64]	@ (8002fa4 <TIM_OC4_SetConfig+0xa4>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d109      	bne.n	8002f7c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	695b      	ldr	r3, [r3, #20]
 8002f74:	019b      	lsls	r3, r3, #6
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685a      	ldr	r2, [r3, #4]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	621a      	str	r2, [r3, #32]
}
 8002f96:	bf00      	nop
 8002f98:	371c      	adds	r7, #28
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bc80      	pop	{r7}
 8002f9e:	4770      	bx	lr
 8002fa0:	40012c00 	.word	0x40012c00
 8002fa4:	40013400 	.word	0x40013400

08002fa8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b087      	sub	sp, #28
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	f023 0201 	bic.w	r2, r3, #1
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002fd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	011b      	lsls	r3, r3, #4
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	f023 030a 	bic.w	r3, r3, #10
 8002fe4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fe6:	697a      	ldr	r2, [r7, #20]
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	621a      	str	r2, [r3, #32]
}
 8002ffa:	bf00      	nop
 8002ffc:	371c      	adds	r7, #28
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bc80      	pop	{r7}
 8003002:	4770      	bx	lr

08003004 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003004:	b480      	push	{r7}
 8003006:	b087      	sub	sp, #28
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	f023 0210 	bic.w	r2, r3, #16
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800302e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	031b      	lsls	r3, r3, #12
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	4313      	orrs	r3, r2
 8003038:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003040:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	011b      	lsls	r3, r3, #4
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	4313      	orrs	r3, r2
 800304a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	621a      	str	r2, [r3, #32]
}
 8003058:	bf00      	nop
 800305a:	371c      	adds	r7, #28
 800305c:	46bd      	mov	sp, r7
 800305e:	bc80      	pop	{r7}
 8003060:	4770      	bx	lr

08003062 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003062:	b480      	push	{r7}
 8003064:	b085      	sub	sp, #20
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
 800306a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003078:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	4313      	orrs	r3, r2
 8003080:	f043 0307 	orr.w	r3, r3, #7
 8003084:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	609a      	str	r2, [r3, #8]
}
 800308c:	bf00      	nop
 800308e:	3714      	adds	r7, #20
 8003090:	46bd      	mov	sp, r7
 8003092:	bc80      	pop	{r7}
 8003094:	4770      	bx	lr

08003096 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003096:	b480      	push	{r7}
 8003098:	b087      	sub	sp, #28
 800309a:	af00      	add	r7, sp, #0
 800309c:	60f8      	str	r0, [r7, #12]
 800309e:	60b9      	str	r1, [r7, #8]
 80030a0:	607a      	str	r2, [r7, #4]
 80030a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80030b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	021a      	lsls	r2, r3, #8
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	431a      	orrs	r2, r3
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	4313      	orrs	r3, r2
 80030be:	697a      	ldr	r2, [r7, #20]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	609a      	str	r2, [r3, #8]
}
 80030ca:	bf00      	nop
 80030cc:	371c      	adds	r7, #28
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bc80      	pop	{r7}
 80030d2:	4770      	bx	lr

080030d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b087      	sub	sp, #28
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	f003 031f 	and.w	r3, r3, #31
 80030e6:	2201      	movs	r2, #1
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6a1a      	ldr	r2, [r3, #32]
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	43db      	mvns	r3, r3
 80030f6:	401a      	ands	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6a1a      	ldr	r2, [r3, #32]
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	f003 031f 	and.w	r3, r3, #31
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	fa01 f303 	lsl.w	r3, r1, r3
 800310c:	431a      	orrs	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	621a      	str	r2, [r3, #32]
}
 8003112:	bf00      	nop
 8003114:	371c      	adds	r7, #28
 8003116:	46bd      	mov	sp, r7
 8003118:	bc80      	pop	{r7}
 800311a:	4770      	bx	lr

0800311c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800312c:	2b01      	cmp	r3, #1
 800312e:	d101      	bne.n	8003134 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003130:	2302      	movs	r3, #2
 8003132:	e050      	b.n	80031d6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2202      	movs	r2, #2
 8003140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800315a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	4313      	orrs	r3, r2
 8003164:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a1b      	ldr	r2, [pc, #108]	@ (80031e0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d018      	beq.n	80031aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a19      	ldr	r2, [pc, #100]	@ (80031e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d013      	beq.n	80031aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800318a:	d00e      	beq.n	80031aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a15      	ldr	r2, [pc, #84]	@ (80031e8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d009      	beq.n	80031aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a14      	ldr	r2, [pc, #80]	@ (80031ec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d004      	beq.n	80031aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a12      	ldr	r2, [pc, #72]	@ (80031f0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d10c      	bne.n	80031c4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	68ba      	ldr	r2, [r7, #8]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68ba      	ldr	r2, [r7, #8]
 80031c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3714      	adds	r7, #20
 80031da:	46bd      	mov	sp, r7
 80031dc:	bc80      	pop	{r7}
 80031de:	4770      	bx	lr
 80031e0:	40012c00 	.word	0x40012c00
 80031e4:	40013400 	.word	0x40013400
 80031e8:	40000400 	.word	0x40000400
 80031ec:	40000800 	.word	0x40000800
 80031f0:	40000c00 	.word	0x40000c00

080031f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e042      	b.n	800328c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d106      	bne.n	8003220 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f7fd fd6a 	bl	8000cf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2224      	movs	r2, #36	@ 0x24
 8003224:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68da      	ldr	r2, [r3, #12]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003236:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 fd63 	bl	8003d04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	691a      	ldr	r2, [r3, #16]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800324c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	695a      	ldr	r2, [r3, #20]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800325c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68da      	ldr	r2, [r3, #12]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800326c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2220      	movs	r2, #32
 8003278:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2220      	movs	r2, #32
 8003280:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3708      	adds	r7, #8
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b08a      	sub	sp, #40	@ 0x28
 8003298:	af02      	add	r7, sp, #8
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	603b      	str	r3, [r7, #0]
 80032a0:	4613      	mov	r3, r2
 80032a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80032a4:	2300      	movs	r3, #0
 80032a6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b20      	cmp	r3, #32
 80032b2:	d175      	bne.n	80033a0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d002      	beq.n	80032c0 <HAL_UART_Transmit+0x2c>
 80032ba:	88fb      	ldrh	r3, [r7, #6]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d101      	bne.n	80032c4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e06e      	b.n	80033a2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2221      	movs	r2, #33	@ 0x21
 80032ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032d2:	f7fd fe9d 	bl	8001010 <HAL_GetTick>
 80032d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	88fa      	ldrh	r2, [r7, #6]
 80032dc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	88fa      	ldrh	r2, [r7, #6]
 80032e2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032ec:	d108      	bne.n	8003300 <HAL_UART_Transmit+0x6c>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d104      	bne.n	8003300 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80032f6:	2300      	movs	r3, #0
 80032f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	61bb      	str	r3, [r7, #24]
 80032fe:	e003      	b.n	8003308 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003304:	2300      	movs	r3, #0
 8003306:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003308:	e02e      	b.n	8003368 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	9300      	str	r3, [sp, #0]
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	2200      	movs	r2, #0
 8003312:	2180      	movs	r1, #128	@ 0x80
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f000 fb01 	bl	800391c <UART_WaitOnFlagUntilTimeout>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d005      	beq.n	800332c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2220      	movs	r2, #32
 8003324:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e03a      	b.n	80033a2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10b      	bne.n	800334a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	881b      	ldrh	r3, [r3, #0]
 8003336:	461a      	mov	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003340:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	3302      	adds	r3, #2
 8003346:	61bb      	str	r3, [r7, #24]
 8003348:	e007      	b.n	800335a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	781a      	ldrb	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	3301      	adds	r3, #1
 8003358:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800335e:	b29b      	uxth	r3, r3
 8003360:	3b01      	subs	r3, #1
 8003362:	b29a      	uxth	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800336c:	b29b      	uxth	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1cb      	bne.n	800330a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	2200      	movs	r2, #0
 800337a:	2140      	movs	r1, #64	@ 0x40
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f000 facd 	bl	800391c <UART_WaitOnFlagUntilTimeout>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d005      	beq.n	8003394 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2220      	movs	r2, #32
 800338c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e006      	b.n	80033a2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2220      	movs	r2, #32
 8003398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800339c:	2300      	movs	r3, #0
 800339e:	e000      	b.n	80033a2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80033a0:	2302      	movs	r3, #2
  }
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3720      	adds	r7, #32
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
	...

080033ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b0ba      	sub	sp, #232	@ 0xe8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80033d2:	2300      	movs	r3, #0
 80033d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80033d8:	2300      	movs	r3, #0
 80033da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80033de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033e2:	f003 030f 	and.w	r3, r3, #15
 80033e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80033ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10f      	bne.n	8003412 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033f6:	f003 0320 	and.w	r3, r3, #32
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d009      	beq.n	8003412 <HAL_UART_IRQHandler+0x66>
 80033fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003402:	f003 0320 	and.w	r3, r3, #32
 8003406:	2b00      	cmp	r3, #0
 8003408:	d003      	beq.n	8003412 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 fbbc 	bl	8003b88 <UART_Receive_IT>
      return;
 8003410:	e25b      	b.n	80038ca <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003412:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003416:	2b00      	cmp	r3, #0
 8003418:	f000 80de 	beq.w	80035d8 <HAL_UART_IRQHandler+0x22c>
 800341c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003420:	f003 0301 	and.w	r3, r3, #1
 8003424:	2b00      	cmp	r3, #0
 8003426:	d106      	bne.n	8003436 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800342c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 80d1 	beq.w	80035d8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00b      	beq.n	800345a <HAL_UART_IRQHandler+0xae>
 8003442:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003446:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800344a:	2b00      	cmp	r3, #0
 800344c:	d005      	beq.n	800345a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003452:	f043 0201 	orr.w	r2, r3, #1
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800345a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800345e:	f003 0304 	and.w	r3, r3, #4
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00b      	beq.n	800347e <HAL_UART_IRQHandler+0xd2>
 8003466:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b00      	cmp	r3, #0
 8003470:	d005      	beq.n	800347e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003476:	f043 0202 	orr.w	r2, r3, #2
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800347e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00b      	beq.n	80034a2 <HAL_UART_IRQHandler+0xf6>
 800348a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b00      	cmp	r3, #0
 8003494:	d005      	beq.n	80034a2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800349a:	f043 0204 	orr.w	r2, r3, #4
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80034a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034a6:	f003 0308 	and.w	r3, r3, #8
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d011      	beq.n	80034d2 <HAL_UART_IRQHandler+0x126>
 80034ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034b2:	f003 0320 	and.w	r3, r3, #32
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d105      	bne.n	80034c6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80034ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d005      	beq.n	80034d2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ca:	f043 0208 	orr.w	r2, r3, #8
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f000 81f2 	beq.w	80038c0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034e0:	f003 0320 	and.w	r3, r3, #32
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d008      	beq.n	80034fa <HAL_UART_IRQHandler+0x14e>
 80034e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034ec:	f003 0320 	and.w	r3, r3, #32
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d002      	beq.n	80034fa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 fb47 	bl	8003b88 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003504:	2b00      	cmp	r3, #0
 8003506:	bf14      	ite	ne
 8003508:	2301      	movne	r3, #1
 800350a:	2300      	moveq	r3, #0
 800350c:	b2db      	uxtb	r3, r3
 800350e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003516:	f003 0308 	and.w	r3, r3, #8
 800351a:	2b00      	cmp	r3, #0
 800351c:	d103      	bne.n	8003526 <HAL_UART_IRQHandler+0x17a>
 800351e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003522:	2b00      	cmp	r3, #0
 8003524:	d04f      	beq.n	80035c6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 fa51 	bl	80039ce <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003536:	2b00      	cmp	r3, #0
 8003538:	d041      	beq.n	80035be <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	3314      	adds	r3, #20
 8003540:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003544:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003548:	e853 3f00 	ldrex	r3, [r3]
 800354c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003550:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003554:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003558:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	3314      	adds	r3, #20
 8003562:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003566:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800356a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800356e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003572:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003576:	e841 2300 	strex	r3, r2, [r1]
 800357a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800357e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1d9      	bne.n	800353a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800358a:	2b00      	cmp	r3, #0
 800358c:	d013      	beq.n	80035b6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003592:	4a7e      	ldr	r2, [pc, #504]	@ (800378c <HAL_UART_IRQHandler+0x3e0>)
 8003594:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800359a:	4618      	mov	r0, r3
 800359c:	f7fd ff16 	bl	80013cc <HAL_DMA_Abort_IT>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d016      	beq.n	80035d4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80035b0:	4610      	mov	r0, r2
 80035b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035b4:	e00e      	b.n	80035d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 f99c 	bl	80038f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035bc:	e00a      	b.n	80035d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f998 	bl	80038f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035c4:	e006      	b.n	80035d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f994 	bl	80038f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80035d2:	e175      	b.n	80038c0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035d4:	bf00      	nop
    return;
 80035d6:	e173      	b.n	80038c0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035dc:	2b01      	cmp	r3, #1
 80035de:	f040 814f 	bne.w	8003880 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80035e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035e6:	f003 0310 	and.w	r3, r3, #16
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f000 8148 	beq.w	8003880 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80035f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035f4:	f003 0310 	and.w	r3, r3, #16
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	f000 8141 	beq.w	8003880 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80035fe:	2300      	movs	r3, #0
 8003600:	60bb      	str	r3, [r7, #8]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	60bb      	str	r3, [r7, #8]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	60bb      	str	r3, [r7, #8]
 8003612:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800361e:	2b00      	cmp	r3, #0
 8003620:	f000 80b6 	beq.w	8003790 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003630:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 8145 	beq.w	80038c4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800363e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003642:	429a      	cmp	r2, r3
 8003644:	f080 813e 	bcs.w	80038c4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800364e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	2b20      	cmp	r3, #32
 8003658:	f000 8088 	beq.w	800376c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	330c      	adds	r3, #12
 8003662:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003666:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800366a:	e853 3f00 	ldrex	r3, [r3]
 800366e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003672:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003676:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800367a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	330c      	adds	r3, #12
 8003684:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003688:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800368c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003690:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003694:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003698:	e841 2300 	strex	r3, r2, [r1]
 800369c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80036a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1d9      	bne.n	800365c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	3314      	adds	r3, #20
 80036ae:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036b2:	e853 3f00 	ldrex	r3, [r3]
 80036b6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80036b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80036ba:	f023 0301 	bic.w	r3, r3, #1
 80036be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	3314      	adds	r3, #20
 80036c8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80036cc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80036d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80036d4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80036d8:	e841 2300 	strex	r3, r2, [r1]
 80036dc:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80036de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1e1      	bne.n	80036a8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	3314      	adds	r3, #20
 80036ea:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80036ee:	e853 3f00 	ldrex	r3, [r3]
 80036f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80036f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80036f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	3314      	adds	r3, #20
 8003704:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003708:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800370a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800370c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800370e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003710:	e841 2300 	strex	r3, r2, [r1]
 8003714:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003716:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1e3      	bne.n	80036e4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2220      	movs	r2, #32
 8003720:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	330c      	adds	r3, #12
 8003730:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003732:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003734:	e853 3f00 	ldrex	r3, [r3]
 8003738:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800373a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800373c:	f023 0310 	bic.w	r3, r3, #16
 8003740:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	330c      	adds	r3, #12
 800374a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800374e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003750:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003752:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003754:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003756:	e841 2300 	strex	r3, r2, [r1]
 800375a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800375c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1e3      	bne.n	800372a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003766:	4618      	mov	r0, r3
 8003768:	f7fd fdf5 	bl	8001356 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2202      	movs	r2, #2
 8003770:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800377a:	b29b      	uxth	r3, r3
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	b29b      	uxth	r3, r3
 8003780:	4619      	mov	r1, r3
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f8bf 	bl	8003906 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003788:	e09c      	b.n	80038c4 <HAL_UART_IRQHandler+0x518>
 800378a:	bf00      	nop
 800378c:	08003a93 	.word	0x08003a93
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003798:	b29b      	uxth	r3, r3
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f000 808e 	beq.w	80038c8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80037ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f000 8089 	beq.w	80038c8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	330c      	adds	r3, #12
 80037bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037c0:	e853 3f00 	ldrex	r3, [r3]
 80037c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80037c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	330c      	adds	r3, #12
 80037d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80037da:	647a      	str	r2, [r7, #68]	@ 0x44
 80037dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80037e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037e2:	e841 2300 	strex	r3, r2, [r1]
 80037e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80037e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1e3      	bne.n	80037b6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	3314      	adds	r3, #20
 80037f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f8:	e853 3f00 	ldrex	r3, [r3]
 80037fc:	623b      	str	r3, [r7, #32]
   return(result);
 80037fe:	6a3b      	ldr	r3, [r7, #32]
 8003800:	f023 0301 	bic.w	r3, r3, #1
 8003804:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	3314      	adds	r3, #20
 800380e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003812:	633a      	str	r2, [r7, #48]	@ 0x30
 8003814:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003816:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003818:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800381a:	e841 2300 	strex	r3, r2, [r1]
 800381e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1e3      	bne.n	80037ee <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2220      	movs	r2, #32
 800382a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	330c      	adds	r3, #12
 800383a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	e853 3f00 	ldrex	r3, [r3]
 8003842:	60fb      	str	r3, [r7, #12]
   return(result);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f023 0310 	bic.w	r3, r3, #16
 800384a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	330c      	adds	r3, #12
 8003854:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003858:	61fa      	str	r2, [r7, #28]
 800385a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385c:	69b9      	ldr	r1, [r7, #24]
 800385e:	69fa      	ldr	r2, [r7, #28]
 8003860:	e841 2300 	strex	r3, r2, [r1]
 8003864:	617b      	str	r3, [r7, #20]
   return(result);
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1e3      	bne.n	8003834 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2202      	movs	r2, #2
 8003870:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003872:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003876:	4619      	mov	r1, r3
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 f844 	bl	8003906 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800387e:	e023      	b.n	80038c8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003884:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003888:	2b00      	cmp	r3, #0
 800388a:	d009      	beq.n	80038a0 <HAL_UART_IRQHandler+0x4f4>
 800388c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003890:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003894:	2b00      	cmp	r3, #0
 8003896:	d003      	beq.n	80038a0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 f90e 	bl	8003aba <UART_Transmit_IT>
    return;
 800389e:	e014      	b.n	80038ca <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80038a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00e      	beq.n	80038ca <HAL_UART_IRQHandler+0x51e>
 80038ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d008      	beq.n	80038ca <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 f94d 	bl	8003b58 <UART_EndTransmit_IT>
    return;
 80038be:	e004      	b.n	80038ca <HAL_UART_IRQHandler+0x51e>
    return;
 80038c0:	bf00      	nop
 80038c2:	e002      	b.n	80038ca <HAL_UART_IRQHandler+0x51e>
      return;
 80038c4:	bf00      	nop
 80038c6:	e000      	b.n	80038ca <HAL_UART_IRQHandler+0x51e>
      return;
 80038c8:	bf00      	nop
  }
}
 80038ca:	37e8      	adds	r7, #232	@ 0xe8
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	bc80      	pop	{r7}
 80038e0:	4770      	bx	lr

080038e2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80038e2:	b480      	push	{r7}
 80038e4:	b083      	sub	sp, #12
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80038ea:	bf00      	nop
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bc80      	pop	{r7}
 80038f2:	4770      	bx	lr

080038f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	bc80      	pop	{r7}
 8003904:	4770      	bx	lr

08003906 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003906:	b480      	push	{r7}
 8003908:	b083      	sub	sp, #12
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
 800390e:	460b      	mov	r3, r1
 8003910:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003912:	bf00      	nop
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	bc80      	pop	{r7}
 800391a:	4770      	bx	lr

0800391c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b086      	sub	sp, #24
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	603b      	str	r3, [r7, #0]
 8003928:	4613      	mov	r3, r2
 800392a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800392c:	e03b      	b.n	80039a6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800392e:	6a3b      	ldr	r3, [r7, #32]
 8003930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003934:	d037      	beq.n	80039a6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003936:	f7fd fb6b 	bl	8001010 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	6a3a      	ldr	r2, [r7, #32]
 8003942:	429a      	cmp	r2, r3
 8003944:	d302      	bcc.n	800394c <UART_WaitOnFlagUntilTimeout+0x30>
 8003946:	6a3b      	ldr	r3, [r7, #32]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d101      	bne.n	8003950 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e03a      	b.n	80039c6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	f003 0304 	and.w	r3, r3, #4
 800395a:	2b00      	cmp	r3, #0
 800395c:	d023      	beq.n	80039a6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	2b80      	cmp	r3, #128	@ 0x80
 8003962:	d020      	beq.n	80039a6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	2b40      	cmp	r3, #64	@ 0x40
 8003968:	d01d      	beq.n	80039a6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0308 	and.w	r3, r3, #8
 8003974:	2b08      	cmp	r3, #8
 8003976:	d116      	bne.n	80039a6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003978:	2300      	movs	r3, #0
 800397a:	617b      	str	r3, [r7, #20]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	617b      	str	r3, [r7, #20]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	617b      	str	r3, [r7, #20]
 800398c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f000 f81d 	bl	80039ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2208      	movs	r2, #8
 8003998:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e00f      	b.n	80039c6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	4013      	ands	r3, r2
 80039b0:	68ba      	ldr	r2, [r7, #8]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	bf0c      	ite	eq
 80039b6:	2301      	moveq	r3, #1
 80039b8:	2300      	movne	r3, #0
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	461a      	mov	r2, r3
 80039be:	79fb      	ldrb	r3, [r7, #7]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d0b4      	beq.n	800392e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3718      	adds	r7, #24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039ce:	b480      	push	{r7}
 80039d0:	b095      	sub	sp, #84	@ 0x54
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	330c      	adds	r3, #12
 80039dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039e0:	e853 3f00 	ldrex	r3, [r3]
 80039e4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80039e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80039ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	330c      	adds	r3, #12
 80039f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80039f6:	643a      	str	r2, [r7, #64]	@ 0x40
 80039f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80039fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80039fe:	e841 2300 	strex	r3, r2, [r1]
 8003a02:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1e5      	bne.n	80039d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	3314      	adds	r3, #20
 8003a10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a12:	6a3b      	ldr	r3, [r7, #32]
 8003a14:	e853 3f00 	ldrex	r3, [r3]
 8003a18:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	f023 0301 	bic.w	r3, r3, #1
 8003a20:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	3314      	adds	r3, #20
 8003a28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a32:	e841 2300 	strex	r3, r2, [r1]
 8003a36:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1e5      	bne.n	8003a0a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d119      	bne.n	8003a7a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	330c      	adds	r3, #12
 8003a4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	e853 3f00 	ldrex	r3, [r3]
 8003a54:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	f023 0310 	bic.w	r3, r3, #16
 8003a5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	330c      	adds	r3, #12
 8003a64:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a66:	61ba      	str	r2, [r7, #24]
 8003a68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a6a:	6979      	ldr	r1, [r7, #20]
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	e841 2300 	strex	r3, r2, [r1]
 8003a72:	613b      	str	r3, [r7, #16]
   return(result);
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1e5      	bne.n	8003a46 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003a88:	bf00      	nop
 8003a8a:	3754      	adds	r7, #84	@ 0x54
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bc80      	pop	{r7}
 8003a90:	4770      	bx	lr

08003a92 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b084      	sub	sp, #16
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f7ff ff21 	bl	80038f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ab2:	bf00      	nop
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003aba:	b480      	push	{r7}
 8003abc:	b085      	sub	sp, #20
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b21      	cmp	r3, #33	@ 0x21
 8003acc:	d13e      	bne.n	8003b4c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ad6:	d114      	bne.n	8003b02 <UART_Transmit_IT+0x48>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d110      	bne.n	8003b02 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	881b      	ldrh	r3, [r3, #0]
 8003aea:	461a      	mov	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003af4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	1c9a      	adds	r2, r3, #2
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	621a      	str	r2, [r3, #32]
 8003b00:	e008      	b.n	8003b14 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	1c59      	adds	r1, r3, #1
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	6211      	str	r1, [r2, #32]
 8003b0c:	781a      	ldrb	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	4619      	mov	r1, r3
 8003b22:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10f      	bne.n	8003b48 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68da      	ldr	r2, [r3, #12]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b36:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68da      	ldr	r2, [r3, #12]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b46:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	e000      	b.n	8003b4e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003b4c:	2302      	movs	r3, #2
  }
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3714      	adds	r7, #20
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bc80      	pop	{r7}
 8003b56:	4770      	bx	lr

08003b58 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68da      	ldr	r2, [r3, #12]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b6e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2220      	movs	r2, #32
 8003b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f7ff fea9 	bl	80038d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3708      	adds	r7, #8
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b08c      	sub	sp, #48	@ 0x30
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	2b22      	cmp	r3, #34	@ 0x22
 8003b9a:	f040 80ae 	bne.w	8003cfa <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ba6:	d117      	bne.n	8003bd8 <UART_Receive_IT+0x50>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d113      	bne.n	8003bd8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bd0:	1c9a      	adds	r2, r3, #2
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	629a      	str	r2, [r3, #40]	@ 0x28
 8003bd6:	e026      	b.n	8003c26 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003bde:	2300      	movs	r3, #0
 8003be0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bea:	d007      	beq.n	8003bfc <UART_Receive_IT+0x74>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d10a      	bne.n	8003c0a <UART_Receive_IT+0x82>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d106      	bne.n	8003c0a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	b2da      	uxtb	r2, r3
 8003c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c06:	701a      	strb	r2, [r3, #0]
 8003c08:	e008      	b.n	8003c1c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c16:	b2da      	uxtb	r2, r3
 8003c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c1a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c20:	1c5a      	adds	r2, r3, #1
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	4619      	mov	r1, r3
 8003c34:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d15d      	bne.n	8003cf6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68da      	ldr	r2, [r3, #12]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f022 0220 	bic.w	r2, r2, #32
 8003c48:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68da      	ldr	r2, [r3, #12]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c58:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	695a      	ldr	r2, [r3, #20]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 0201 	bic.w	r2, r2, #1
 8003c68:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d135      	bne.n	8003cec <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	330c      	adds	r3, #12
 8003c8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	e853 3f00 	ldrex	r3, [r3]
 8003c94:	613b      	str	r3, [r7, #16]
   return(result);
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	f023 0310 	bic.w	r3, r3, #16
 8003c9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	330c      	adds	r3, #12
 8003ca4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ca6:	623a      	str	r2, [r7, #32]
 8003ca8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003caa:	69f9      	ldr	r1, [r7, #28]
 8003cac:	6a3a      	ldr	r2, [r7, #32]
 8003cae:	e841 2300 	strex	r3, r2, [r1]
 8003cb2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1e5      	bne.n	8003c86 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0310 	and.w	r3, r3, #16
 8003cc4:	2b10      	cmp	r3, #16
 8003cc6:	d10a      	bne.n	8003cde <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003cc8:	2300      	movs	r3, #0
 8003cca:	60fb      	str	r3, [r7, #12]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	60fb      	str	r3, [r7, #12]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	60fb      	str	r3, [r7, #12]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f7ff fe0e 	bl	8003906 <HAL_UARTEx_RxEventCallback>
 8003cea:	e002      	b.n	8003cf2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f7ff fdf8 	bl	80038e2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	e002      	b.n	8003cfc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	e000      	b.n	8003cfc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003cfa:	2302      	movs	r3, #2
  }
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3730      	adds	r7, #48	@ 0x30
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68da      	ldr	r2, [r3, #12]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	689a      	ldr	r2, [r3, #8]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	695b      	ldr	r3, [r3, #20]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003d3e:	f023 030c 	bic.w	r3, r3, #12
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	6812      	ldr	r2, [r2, #0]
 8003d46:	68b9      	ldr	r1, [r7, #8]
 8003d48:	430b      	orrs	r3, r1
 8003d4a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	699a      	ldr	r2, [r3, #24]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a2c      	ldr	r2, [pc, #176]	@ (8003e18 <UART_SetConfig+0x114>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d103      	bne.n	8003d74 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003d6c:	f7fe fbcc 	bl	8002508 <HAL_RCC_GetPCLK2Freq>
 8003d70:	60f8      	str	r0, [r7, #12]
 8003d72:	e002      	b.n	8003d7a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003d74:	f7fe fbb4 	bl	80024e0 <HAL_RCC_GetPCLK1Freq>
 8003d78:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	4413      	add	r3, r2
 8003d82:	009a      	lsls	r2, r3, #2
 8003d84:	441a      	add	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d90:	4a22      	ldr	r2, [pc, #136]	@ (8003e1c <UART_SetConfig+0x118>)
 8003d92:	fba2 2303 	umull	r2, r3, r2, r3
 8003d96:	095b      	lsrs	r3, r3, #5
 8003d98:	0119      	lsls	r1, r3, #4
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	4413      	add	r3, r2
 8003da2:	009a      	lsls	r2, r3, #2
 8003da4:	441a      	add	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	fbb2 f2f3 	udiv	r2, r2, r3
 8003db0:	4b1a      	ldr	r3, [pc, #104]	@ (8003e1c <UART_SetConfig+0x118>)
 8003db2:	fba3 0302 	umull	r0, r3, r3, r2
 8003db6:	095b      	lsrs	r3, r3, #5
 8003db8:	2064      	movs	r0, #100	@ 0x64
 8003dba:	fb00 f303 	mul.w	r3, r0, r3
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	011b      	lsls	r3, r3, #4
 8003dc2:	3332      	adds	r3, #50	@ 0x32
 8003dc4:	4a15      	ldr	r2, [pc, #84]	@ (8003e1c <UART_SetConfig+0x118>)
 8003dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dca:	095b      	lsrs	r3, r3, #5
 8003dcc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003dd0:	4419      	add	r1, r3
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	4413      	add	r3, r2
 8003dda:	009a      	lsls	r2, r3, #2
 8003ddc:	441a      	add	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003de8:	4b0c      	ldr	r3, [pc, #48]	@ (8003e1c <UART_SetConfig+0x118>)
 8003dea:	fba3 0302 	umull	r0, r3, r3, r2
 8003dee:	095b      	lsrs	r3, r3, #5
 8003df0:	2064      	movs	r0, #100	@ 0x64
 8003df2:	fb00 f303 	mul.w	r3, r0, r3
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	011b      	lsls	r3, r3, #4
 8003dfa:	3332      	adds	r3, #50	@ 0x32
 8003dfc:	4a07      	ldr	r2, [pc, #28]	@ (8003e1c <UART_SetConfig+0x118>)
 8003dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003e02:	095b      	lsrs	r3, r3, #5
 8003e04:	f003 020f 	and.w	r2, r3, #15
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	440a      	add	r2, r1
 8003e0e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003e10:	bf00      	nop
 8003e12:	3710      	adds	r7, #16
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	40013800 	.word	0x40013800
 8003e1c:	51eb851f 	.word	0x51eb851f

08003e20 <siprintf>:
 8003e20:	b40e      	push	{r1, r2, r3}
 8003e22:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003e26:	b500      	push	{lr}
 8003e28:	b09c      	sub	sp, #112	@ 0x70
 8003e2a:	ab1d      	add	r3, sp, #116	@ 0x74
 8003e2c:	9002      	str	r0, [sp, #8]
 8003e2e:	9006      	str	r0, [sp, #24]
 8003e30:	9107      	str	r1, [sp, #28]
 8003e32:	9104      	str	r1, [sp, #16]
 8003e34:	4808      	ldr	r0, [pc, #32]	@ (8003e58 <siprintf+0x38>)
 8003e36:	4909      	ldr	r1, [pc, #36]	@ (8003e5c <siprintf+0x3c>)
 8003e38:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e3c:	9105      	str	r1, [sp, #20]
 8003e3e:	6800      	ldr	r0, [r0, #0]
 8003e40:	a902      	add	r1, sp, #8
 8003e42:	9301      	str	r3, [sp, #4]
 8003e44:	f000 f9c0 	bl	80041c8 <_svfiprintf_r>
 8003e48:	2200      	movs	r2, #0
 8003e4a:	9b02      	ldr	r3, [sp, #8]
 8003e4c:	701a      	strb	r2, [r3, #0]
 8003e4e:	b01c      	add	sp, #112	@ 0x70
 8003e50:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e54:	b003      	add	sp, #12
 8003e56:	4770      	bx	lr
 8003e58:	2000000c 	.word	0x2000000c
 8003e5c:	ffff0208 	.word	0xffff0208

08003e60 <_vsiprintf_r>:
 8003e60:	b500      	push	{lr}
 8003e62:	b09b      	sub	sp, #108	@ 0x6c
 8003e64:	9100      	str	r1, [sp, #0]
 8003e66:	9104      	str	r1, [sp, #16]
 8003e68:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003e6c:	9105      	str	r1, [sp, #20]
 8003e6e:	9102      	str	r1, [sp, #8]
 8003e70:	4905      	ldr	r1, [pc, #20]	@ (8003e88 <_vsiprintf_r+0x28>)
 8003e72:	9103      	str	r1, [sp, #12]
 8003e74:	4669      	mov	r1, sp
 8003e76:	f000 f9a7 	bl	80041c8 <_svfiprintf_r>
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	9b00      	ldr	r3, [sp, #0]
 8003e7e:	701a      	strb	r2, [r3, #0]
 8003e80:	b01b      	add	sp, #108	@ 0x6c
 8003e82:	f85d fb04 	ldr.w	pc, [sp], #4
 8003e86:	bf00      	nop
 8003e88:	ffff0208 	.word	0xffff0208

08003e8c <vsiprintf>:
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	460a      	mov	r2, r1
 8003e90:	4601      	mov	r1, r0
 8003e92:	4802      	ldr	r0, [pc, #8]	@ (8003e9c <vsiprintf+0x10>)
 8003e94:	6800      	ldr	r0, [r0, #0]
 8003e96:	f7ff bfe3 	b.w	8003e60 <_vsiprintf_r>
 8003e9a:	bf00      	nop
 8003e9c:	2000000c 	.word	0x2000000c

08003ea0 <memset>:
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	4402      	add	r2, r0
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d100      	bne.n	8003eaa <memset+0xa>
 8003ea8:	4770      	bx	lr
 8003eaa:	f803 1b01 	strb.w	r1, [r3], #1
 8003eae:	e7f9      	b.n	8003ea4 <memset+0x4>

08003eb0 <__errno>:
 8003eb0:	4b01      	ldr	r3, [pc, #4]	@ (8003eb8 <__errno+0x8>)
 8003eb2:	6818      	ldr	r0, [r3, #0]
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	2000000c 	.word	0x2000000c

08003ebc <__libc_init_array>:
 8003ebc:	b570      	push	{r4, r5, r6, lr}
 8003ebe:	2600      	movs	r6, #0
 8003ec0:	4d0c      	ldr	r5, [pc, #48]	@ (8003ef4 <__libc_init_array+0x38>)
 8003ec2:	4c0d      	ldr	r4, [pc, #52]	@ (8003ef8 <__libc_init_array+0x3c>)
 8003ec4:	1b64      	subs	r4, r4, r5
 8003ec6:	10a4      	asrs	r4, r4, #2
 8003ec8:	42a6      	cmp	r6, r4
 8003eca:	d109      	bne.n	8003ee0 <__libc_init_array+0x24>
 8003ecc:	f000 fc78 	bl	80047c0 <_init>
 8003ed0:	2600      	movs	r6, #0
 8003ed2:	4d0a      	ldr	r5, [pc, #40]	@ (8003efc <__libc_init_array+0x40>)
 8003ed4:	4c0a      	ldr	r4, [pc, #40]	@ (8003f00 <__libc_init_array+0x44>)
 8003ed6:	1b64      	subs	r4, r4, r5
 8003ed8:	10a4      	asrs	r4, r4, #2
 8003eda:	42a6      	cmp	r6, r4
 8003edc:	d105      	bne.n	8003eea <__libc_init_array+0x2e>
 8003ede:	bd70      	pop	{r4, r5, r6, pc}
 8003ee0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ee4:	4798      	blx	r3
 8003ee6:	3601      	adds	r6, #1
 8003ee8:	e7ee      	b.n	8003ec8 <__libc_init_array+0xc>
 8003eea:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eee:	4798      	blx	r3
 8003ef0:	3601      	adds	r6, #1
 8003ef2:	e7f2      	b.n	8003eda <__libc_init_array+0x1e>
 8003ef4:	08004a7c 	.word	0x08004a7c
 8003ef8:	08004a7c 	.word	0x08004a7c
 8003efc:	08004a7c 	.word	0x08004a7c
 8003f00:	08004a80 	.word	0x08004a80

08003f04 <__retarget_lock_acquire_recursive>:
 8003f04:	4770      	bx	lr

08003f06 <__retarget_lock_release_recursive>:
 8003f06:	4770      	bx	lr

08003f08 <memcpy>:
 8003f08:	440a      	add	r2, r1
 8003f0a:	4291      	cmp	r1, r2
 8003f0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003f10:	d100      	bne.n	8003f14 <memcpy+0xc>
 8003f12:	4770      	bx	lr
 8003f14:	b510      	push	{r4, lr}
 8003f16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f1a:	4291      	cmp	r1, r2
 8003f1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f20:	d1f9      	bne.n	8003f16 <memcpy+0xe>
 8003f22:	bd10      	pop	{r4, pc}

08003f24 <_free_r>:
 8003f24:	b538      	push	{r3, r4, r5, lr}
 8003f26:	4605      	mov	r5, r0
 8003f28:	2900      	cmp	r1, #0
 8003f2a:	d040      	beq.n	8003fae <_free_r+0x8a>
 8003f2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f30:	1f0c      	subs	r4, r1, #4
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	bfb8      	it	lt
 8003f36:	18e4      	addlt	r4, r4, r3
 8003f38:	f000 f8de 	bl	80040f8 <__malloc_lock>
 8003f3c:	4a1c      	ldr	r2, [pc, #112]	@ (8003fb0 <_free_r+0x8c>)
 8003f3e:	6813      	ldr	r3, [r2, #0]
 8003f40:	b933      	cbnz	r3, 8003f50 <_free_r+0x2c>
 8003f42:	6063      	str	r3, [r4, #4]
 8003f44:	6014      	str	r4, [r2, #0]
 8003f46:	4628      	mov	r0, r5
 8003f48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f4c:	f000 b8da 	b.w	8004104 <__malloc_unlock>
 8003f50:	42a3      	cmp	r3, r4
 8003f52:	d908      	bls.n	8003f66 <_free_r+0x42>
 8003f54:	6820      	ldr	r0, [r4, #0]
 8003f56:	1821      	adds	r1, r4, r0
 8003f58:	428b      	cmp	r3, r1
 8003f5a:	bf01      	itttt	eq
 8003f5c:	6819      	ldreq	r1, [r3, #0]
 8003f5e:	685b      	ldreq	r3, [r3, #4]
 8003f60:	1809      	addeq	r1, r1, r0
 8003f62:	6021      	streq	r1, [r4, #0]
 8003f64:	e7ed      	b.n	8003f42 <_free_r+0x1e>
 8003f66:	461a      	mov	r2, r3
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	b10b      	cbz	r3, 8003f70 <_free_r+0x4c>
 8003f6c:	42a3      	cmp	r3, r4
 8003f6e:	d9fa      	bls.n	8003f66 <_free_r+0x42>
 8003f70:	6811      	ldr	r1, [r2, #0]
 8003f72:	1850      	adds	r0, r2, r1
 8003f74:	42a0      	cmp	r0, r4
 8003f76:	d10b      	bne.n	8003f90 <_free_r+0x6c>
 8003f78:	6820      	ldr	r0, [r4, #0]
 8003f7a:	4401      	add	r1, r0
 8003f7c:	1850      	adds	r0, r2, r1
 8003f7e:	4283      	cmp	r3, r0
 8003f80:	6011      	str	r1, [r2, #0]
 8003f82:	d1e0      	bne.n	8003f46 <_free_r+0x22>
 8003f84:	6818      	ldr	r0, [r3, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	4408      	add	r0, r1
 8003f8a:	6010      	str	r0, [r2, #0]
 8003f8c:	6053      	str	r3, [r2, #4]
 8003f8e:	e7da      	b.n	8003f46 <_free_r+0x22>
 8003f90:	d902      	bls.n	8003f98 <_free_r+0x74>
 8003f92:	230c      	movs	r3, #12
 8003f94:	602b      	str	r3, [r5, #0]
 8003f96:	e7d6      	b.n	8003f46 <_free_r+0x22>
 8003f98:	6820      	ldr	r0, [r4, #0]
 8003f9a:	1821      	adds	r1, r4, r0
 8003f9c:	428b      	cmp	r3, r1
 8003f9e:	bf01      	itttt	eq
 8003fa0:	6819      	ldreq	r1, [r3, #0]
 8003fa2:	685b      	ldreq	r3, [r3, #4]
 8003fa4:	1809      	addeq	r1, r1, r0
 8003fa6:	6021      	streq	r1, [r4, #0]
 8003fa8:	6063      	str	r3, [r4, #4]
 8003faa:	6054      	str	r4, [r2, #4]
 8003fac:	e7cb      	b.n	8003f46 <_free_r+0x22>
 8003fae:	bd38      	pop	{r3, r4, r5, pc}
 8003fb0:	20000ae4 	.word	0x20000ae4

08003fb4 <sbrk_aligned>:
 8003fb4:	b570      	push	{r4, r5, r6, lr}
 8003fb6:	4e0f      	ldr	r6, [pc, #60]	@ (8003ff4 <sbrk_aligned+0x40>)
 8003fb8:	460c      	mov	r4, r1
 8003fba:	6831      	ldr	r1, [r6, #0]
 8003fbc:	4605      	mov	r5, r0
 8003fbe:	b911      	cbnz	r1, 8003fc6 <sbrk_aligned+0x12>
 8003fc0:	f000 fbaa 	bl	8004718 <_sbrk_r>
 8003fc4:	6030      	str	r0, [r6, #0]
 8003fc6:	4621      	mov	r1, r4
 8003fc8:	4628      	mov	r0, r5
 8003fca:	f000 fba5 	bl	8004718 <_sbrk_r>
 8003fce:	1c43      	adds	r3, r0, #1
 8003fd0:	d103      	bne.n	8003fda <sbrk_aligned+0x26>
 8003fd2:	f04f 34ff 	mov.w	r4, #4294967295
 8003fd6:	4620      	mov	r0, r4
 8003fd8:	bd70      	pop	{r4, r5, r6, pc}
 8003fda:	1cc4      	adds	r4, r0, #3
 8003fdc:	f024 0403 	bic.w	r4, r4, #3
 8003fe0:	42a0      	cmp	r0, r4
 8003fe2:	d0f8      	beq.n	8003fd6 <sbrk_aligned+0x22>
 8003fe4:	1a21      	subs	r1, r4, r0
 8003fe6:	4628      	mov	r0, r5
 8003fe8:	f000 fb96 	bl	8004718 <_sbrk_r>
 8003fec:	3001      	adds	r0, #1
 8003fee:	d1f2      	bne.n	8003fd6 <sbrk_aligned+0x22>
 8003ff0:	e7ef      	b.n	8003fd2 <sbrk_aligned+0x1e>
 8003ff2:	bf00      	nop
 8003ff4:	20000ae0 	.word	0x20000ae0

08003ff8 <_malloc_r>:
 8003ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ffc:	1ccd      	adds	r5, r1, #3
 8003ffe:	f025 0503 	bic.w	r5, r5, #3
 8004002:	3508      	adds	r5, #8
 8004004:	2d0c      	cmp	r5, #12
 8004006:	bf38      	it	cc
 8004008:	250c      	movcc	r5, #12
 800400a:	2d00      	cmp	r5, #0
 800400c:	4606      	mov	r6, r0
 800400e:	db01      	blt.n	8004014 <_malloc_r+0x1c>
 8004010:	42a9      	cmp	r1, r5
 8004012:	d904      	bls.n	800401e <_malloc_r+0x26>
 8004014:	230c      	movs	r3, #12
 8004016:	6033      	str	r3, [r6, #0]
 8004018:	2000      	movs	r0, #0
 800401a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800401e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80040f4 <_malloc_r+0xfc>
 8004022:	f000 f869 	bl	80040f8 <__malloc_lock>
 8004026:	f8d8 3000 	ldr.w	r3, [r8]
 800402a:	461c      	mov	r4, r3
 800402c:	bb44      	cbnz	r4, 8004080 <_malloc_r+0x88>
 800402e:	4629      	mov	r1, r5
 8004030:	4630      	mov	r0, r6
 8004032:	f7ff ffbf 	bl	8003fb4 <sbrk_aligned>
 8004036:	1c43      	adds	r3, r0, #1
 8004038:	4604      	mov	r4, r0
 800403a:	d158      	bne.n	80040ee <_malloc_r+0xf6>
 800403c:	f8d8 4000 	ldr.w	r4, [r8]
 8004040:	4627      	mov	r7, r4
 8004042:	2f00      	cmp	r7, #0
 8004044:	d143      	bne.n	80040ce <_malloc_r+0xd6>
 8004046:	2c00      	cmp	r4, #0
 8004048:	d04b      	beq.n	80040e2 <_malloc_r+0xea>
 800404a:	6823      	ldr	r3, [r4, #0]
 800404c:	4639      	mov	r1, r7
 800404e:	4630      	mov	r0, r6
 8004050:	eb04 0903 	add.w	r9, r4, r3
 8004054:	f000 fb60 	bl	8004718 <_sbrk_r>
 8004058:	4581      	cmp	r9, r0
 800405a:	d142      	bne.n	80040e2 <_malloc_r+0xea>
 800405c:	6821      	ldr	r1, [r4, #0]
 800405e:	4630      	mov	r0, r6
 8004060:	1a6d      	subs	r5, r5, r1
 8004062:	4629      	mov	r1, r5
 8004064:	f7ff ffa6 	bl	8003fb4 <sbrk_aligned>
 8004068:	3001      	adds	r0, #1
 800406a:	d03a      	beq.n	80040e2 <_malloc_r+0xea>
 800406c:	6823      	ldr	r3, [r4, #0]
 800406e:	442b      	add	r3, r5
 8004070:	6023      	str	r3, [r4, #0]
 8004072:	f8d8 3000 	ldr.w	r3, [r8]
 8004076:	685a      	ldr	r2, [r3, #4]
 8004078:	bb62      	cbnz	r2, 80040d4 <_malloc_r+0xdc>
 800407a:	f8c8 7000 	str.w	r7, [r8]
 800407e:	e00f      	b.n	80040a0 <_malloc_r+0xa8>
 8004080:	6822      	ldr	r2, [r4, #0]
 8004082:	1b52      	subs	r2, r2, r5
 8004084:	d420      	bmi.n	80040c8 <_malloc_r+0xd0>
 8004086:	2a0b      	cmp	r2, #11
 8004088:	d917      	bls.n	80040ba <_malloc_r+0xc2>
 800408a:	1961      	adds	r1, r4, r5
 800408c:	42a3      	cmp	r3, r4
 800408e:	6025      	str	r5, [r4, #0]
 8004090:	bf18      	it	ne
 8004092:	6059      	strne	r1, [r3, #4]
 8004094:	6863      	ldr	r3, [r4, #4]
 8004096:	bf08      	it	eq
 8004098:	f8c8 1000 	streq.w	r1, [r8]
 800409c:	5162      	str	r2, [r4, r5]
 800409e:	604b      	str	r3, [r1, #4]
 80040a0:	4630      	mov	r0, r6
 80040a2:	f000 f82f 	bl	8004104 <__malloc_unlock>
 80040a6:	f104 000b 	add.w	r0, r4, #11
 80040aa:	1d23      	adds	r3, r4, #4
 80040ac:	f020 0007 	bic.w	r0, r0, #7
 80040b0:	1ac2      	subs	r2, r0, r3
 80040b2:	bf1c      	itt	ne
 80040b4:	1a1b      	subne	r3, r3, r0
 80040b6:	50a3      	strne	r3, [r4, r2]
 80040b8:	e7af      	b.n	800401a <_malloc_r+0x22>
 80040ba:	6862      	ldr	r2, [r4, #4]
 80040bc:	42a3      	cmp	r3, r4
 80040be:	bf0c      	ite	eq
 80040c0:	f8c8 2000 	streq.w	r2, [r8]
 80040c4:	605a      	strne	r2, [r3, #4]
 80040c6:	e7eb      	b.n	80040a0 <_malloc_r+0xa8>
 80040c8:	4623      	mov	r3, r4
 80040ca:	6864      	ldr	r4, [r4, #4]
 80040cc:	e7ae      	b.n	800402c <_malloc_r+0x34>
 80040ce:	463c      	mov	r4, r7
 80040d0:	687f      	ldr	r7, [r7, #4]
 80040d2:	e7b6      	b.n	8004042 <_malloc_r+0x4a>
 80040d4:	461a      	mov	r2, r3
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	42a3      	cmp	r3, r4
 80040da:	d1fb      	bne.n	80040d4 <_malloc_r+0xdc>
 80040dc:	2300      	movs	r3, #0
 80040de:	6053      	str	r3, [r2, #4]
 80040e0:	e7de      	b.n	80040a0 <_malloc_r+0xa8>
 80040e2:	230c      	movs	r3, #12
 80040e4:	4630      	mov	r0, r6
 80040e6:	6033      	str	r3, [r6, #0]
 80040e8:	f000 f80c 	bl	8004104 <__malloc_unlock>
 80040ec:	e794      	b.n	8004018 <_malloc_r+0x20>
 80040ee:	6005      	str	r5, [r0, #0]
 80040f0:	e7d6      	b.n	80040a0 <_malloc_r+0xa8>
 80040f2:	bf00      	nop
 80040f4:	20000ae4 	.word	0x20000ae4

080040f8 <__malloc_lock>:
 80040f8:	4801      	ldr	r0, [pc, #4]	@ (8004100 <__malloc_lock+0x8>)
 80040fa:	f7ff bf03 	b.w	8003f04 <__retarget_lock_acquire_recursive>
 80040fe:	bf00      	nop
 8004100:	20000adc 	.word	0x20000adc

08004104 <__malloc_unlock>:
 8004104:	4801      	ldr	r0, [pc, #4]	@ (800410c <__malloc_unlock+0x8>)
 8004106:	f7ff befe 	b.w	8003f06 <__retarget_lock_release_recursive>
 800410a:	bf00      	nop
 800410c:	20000adc 	.word	0x20000adc

08004110 <__ssputs_r>:
 8004110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004114:	461f      	mov	r7, r3
 8004116:	688e      	ldr	r6, [r1, #8]
 8004118:	4682      	mov	sl, r0
 800411a:	42be      	cmp	r6, r7
 800411c:	460c      	mov	r4, r1
 800411e:	4690      	mov	r8, r2
 8004120:	680b      	ldr	r3, [r1, #0]
 8004122:	d82d      	bhi.n	8004180 <__ssputs_r+0x70>
 8004124:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004128:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800412c:	d026      	beq.n	800417c <__ssputs_r+0x6c>
 800412e:	6965      	ldr	r5, [r4, #20]
 8004130:	6909      	ldr	r1, [r1, #16]
 8004132:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004136:	eba3 0901 	sub.w	r9, r3, r1
 800413a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800413e:	1c7b      	adds	r3, r7, #1
 8004140:	444b      	add	r3, r9
 8004142:	106d      	asrs	r5, r5, #1
 8004144:	429d      	cmp	r5, r3
 8004146:	bf38      	it	cc
 8004148:	461d      	movcc	r5, r3
 800414a:	0553      	lsls	r3, r2, #21
 800414c:	d527      	bpl.n	800419e <__ssputs_r+0x8e>
 800414e:	4629      	mov	r1, r5
 8004150:	f7ff ff52 	bl	8003ff8 <_malloc_r>
 8004154:	4606      	mov	r6, r0
 8004156:	b360      	cbz	r0, 80041b2 <__ssputs_r+0xa2>
 8004158:	464a      	mov	r2, r9
 800415a:	6921      	ldr	r1, [r4, #16]
 800415c:	f7ff fed4 	bl	8003f08 <memcpy>
 8004160:	89a3      	ldrh	r3, [r4, #12]
 8004162:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004166:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800416a:	81a3      	strh	r3, [r4, #12]
 800416c:	6126      	str	r6, [r4, #16]
 800416e:	444e      	add	r6, r9
 8004170:	6026      	str	r6, [r4, #0]
 8004172:	463e      	mov	r6, r7
 8004174:	6165      	str	r5, [r4, #20]
 8004176:	eba5 0509 	sub.w	r5, r5, r9
 800417a:	60a5      	str	r5, [r4, #8]
 800417c:	42be      	cmp	r6, r7
 800417e:	d900      	bls.n	8004182 <__ssputs_r+0x72>
 8004180:	463e      	mov	r6, r7
 8004182:	4632      	mov	r2, r6
 8004184:	4641      	mov	r1, r8
 8004186:	6820      	ldr	r0, [r4, #0]
 8004188:	f000 faac 	bl	80046e4 <memmove>
 800418c:	2000      	movs	r0, #0
 800418e:	68a3      	ldr	r3, [r4, #8]
 8004190:	1b9b      	subs	r3, r3, r6
 8004192:	60a3      	str	r3, [r4, #8]
 8004194:	6823      	ldr	r3, [r4, #0]
 8004196:	4433      	add	r3, r6
 8004198:	6023      	str	r3, [r4, #0]
 800419a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800419e:	462a      	mov	r2, r5
 80041a0:	f000 fad8 	bl	8004754 <_realloc_r>
 80041a4:	4606      	mov	r6, r0
 80041a6:	2800      	cmp	r0, #0
 80041a8:	d1e0      	bne.n	800416c <__ssputs_r+0x5c>
 80041aa:	4650      	mov	r0, sl
 80041ac:	6921      	ldr	r1, [r4, #16]
 80041ae:	f7ff feb9 	bl	8003f24 <_free_r>
 80041b2:	230c      	movs	r3, #12
 80041b4:	f8ca 3000 	str.w	r3, [sl]
 80041b8:	89a3      	ldrh	r3, [r4, #12]
 80041ba:	f04f 30ff 	mov.w	r0, #4294967295
 80041be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041c2:	81a3      	strh	r3, [r4, #12]
 80041c4:	e7e9      	b.n	800419a <__ssputs_r+0x8a>
	...

080041c8 <_svfiprintf_r>:
 80041c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041cc:	4698      	mov	r8, r3
 80041ce:	898b      	ldrh	r3, [r1, #12]
 80041d0:	4607      	mov	r7, r0
 80041d2:	061b      	lsls	r3, r3, #24
 80041d4:	460d      	mov	r5, r1
 80041d6:	4614      	mov	r4, r2
 80041d8:	b09d      	sub	sp, #116	@ 0x74
 80041da:	d510      	bpl.n	80041fe <_svfiprintf_r+0x36>
 80041dc:	690b      	ldr	r3, [r1, #16]
 80041de:	b973      	cbnz	r3, 80041fe <_svfiprintf_r+0x36>
 80041e0:	2140      	movs	r1, #64	@ 0x40
 80041e2:	f7ff ff09 	bl	8003ff8 <_malloc_r>
 80041e6:	6028      	str	r0, [r5, #0]
 80041e8:	6128      	str	r0, [r5, #16]
 80041ea:	b930      	cbnz	r0, 80041fa <_svfiprintf_r+0x32>
 80041ec:	230c      	movs	r3, #12
 80041ee:	603b      	str	r3, [r7, #0]
 80041f0:	f04f 30ff 	mov.w	r0, #4294967295
 80041f4:	b01d      	add	sp, #116	@ 0x74
 80041f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041fa:	2340      	movs	r3, #64	@ 0x40
 80041fc:	616b      	str	r3, [r5, #20]
 80041fe:	2300      	movs	r3, #0
 8004200:	9309      	str	r3, [sp, #36]	@ 0x24
 8004202:	2320      	movs	r3, #32
 8004204:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004208:	2330      	movs	r3, #48	@ 0x30
 800420a:	f04f 0901 	mov.w	r9, #1
 800420e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004212:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80043ac <_svfiprintf_r+0x1e4>
 8004216:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800421a:	4623      	mov	r3, r4
 800421c:	469a      	mov	sl, r3
 800421e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004222:	b10a      	cbz	r2, 8004228 <_svfiprintf_r+0x60>
 8004224:	2a25      	cmp	r2, #37	@ 0x25
 8004226:	d1f9      	bne.n	800421c <_svfiprintf_r+0x54>
 8004228:	ebba 0b04 	subs.w	fp, sl, r4
 800422c:	d00b      	beq.n	8004246 <_svfiprintf_r+0x7e>
 800422e:	465b      	mov	r3, fp
 8004230:	4622      	mov	r2, r4
 8004232:	4629      	mov	r1, r5
 8004234:	4638      	mov	r0, r7
 8004236:	f7ff ff6b 	bl	8004110 <__ssputs_r>
 800423a:	3001      	adds	r0, #1
 800423c:	f000 80a7 	beq.w	800438e <_svfiprintf_r+0x1c6>
 8004240:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004242:	445a      	add	r2, fp
 8004244:	9209      	str	r2, [sp, #36]	@ 0x24
 8004246:	f89a 3000 	ldrb.w	r3, [sl]
 800424a:	2b00      	cmp	r3, #0
 800424c:	f000 809f 	beq.w	800438e <_svfiprintf_r+0x1c6>
 8004250:	2300      	movs	r3, #0
 8004252:	f04f 32ff 	mov.w	r2, #4294967295
 8004256:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800425a:	f10a 0a01 	add.w	sl, sl, #1
 800425e:	9304      	str	r3, [sp, #16]
 8004260:	9307      	str	r3, [sp, #28]
 8004262:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004266:	931a      	str	r3, [sp, #104]	@ 0x68
 8004268:	4654      	mov	r4, sl
 800426a:	2205      	movs	r2, #5
 800426c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004270:	484e      	ldr	r0, [pc, #312]	@ (80043ac <_svfiprintf_r+0x1e4>)
 8004272:	f000 fa61 	bl	8004738 <memchr>
 8004276:	9a04      	ldr	r2, [sp, #16]
 8004278:	b9d8      	cbnz	r0, 80042b2 <_svfiprintf_r+0xea>
 800427a:	06d0      	lsls	r0, r2, #27
 800427c:	bf44      	itt	mi
 800427e:	2320      	movmi	r3, #32
 8004280:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004284:	0711      	lsls	r1, r2, #28
 8004286:	bf44      	itt	mi
 8004288:	232b      	movmi	r3, #43	@ 0x2b
 800428a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800428e:	f89a 3000 	ldrb.w	r3, [sl]
 8004292:	2b2a      	cmp	r3, #42	@ 0x2a
 8004294:	d015      	beq.n	80042c2 <_svfiprintf_r+0xfa>
 8004296:	4654      	mov	r4, sl
 8004298:	2000      	movs	r0, #0
 800429a:	f04f 0c0a 	mov.w	ip, #10
 800429e:	9a07      	ldr	r2, [sp, #28]
 80042a0:	4621      	mov	r1, r4
 80042a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042a6:	3b30      	subs	r3, #48	@ 0x30
 80042a8:	2b09      	cmp	r3, #9
 80042aa:	d94b      	bls.n	8004344 <_svfiprintf_r+0x17c>
 80042ac:	b1b0      	cbz	r0, 80042dc <_svfiprintf_r+0x114>
 80042ae:	9207      	str	r2, [sp, #28]
 80042b0:	e014      	b.n	80042dc <_svfiprintf_r+0x114>
 80042b2:	eba0 0308 	sub.w	r3, r0, r8
 80042b6:	fa09 f303 	lsl.w	r3, r9, r3
 80042ba:	4313      	orrs	r3, r2
 80042bc:	46a2      	mov	sl, r4
 80042be:	9304      	str	r3, [sp, #16]
 80042c0:	e7d2      	b.n	8004268 <_svfiprintf_r+0xa0>
 80042c2:	9b03      	ldr	r3, [sp, #12]
 80042c4:	1d19      	adds	r1, r3, #4
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	9103      	str	r1, [sp, #12]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	bfbb      	ittet	lt
 80042ce:	425b      	neglt	r3, r3
 80042d0:	f042 0202 	orrlt.w	r2, r2, #2
 80042d4:	9307      	strge	r3, [sp, #28]
 80042d6:	9307      	strlt	r3, [sp, #28]
 80042d8:	bfb8      	it	lt
 80042da:	9204      	strlt	r2, [sp, #16]
 80042dc:	7823      	ldrb	r3, [r4, #0]
 80042de:	2b2e      	cmp	r3, #46	@ 0x2e
 80042e0:	d10a      	bne.n	80042f8 <_svfiprintf_r+0x130>
 80042e2:	7863      	ldrb	r3, [r4, #1]
 80042e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80042e6:	d132      	bne.n	800434e <_svfiprintf_r+0x186>
 80042e8:	9b03      	ldr	r3, [sp, #12]
 80042ea:	3402      	adds	r4, #2
 80042ec:	1d1a      	adds	r2, r3, #4
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	9203      	str	r2, [sp, #12]
 80042f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80042f6:	9305      	str	r3, [sp, #20]
 80042f8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80043b0 <_svfiprintf_r+0x1e8>
 80042fc:	2203      	movs	r2, #3
 80042fe:	4650      	mov	r0, sl
 8004300:	7821      	ldrb	r1, [r4, #0]
 8004302:	f000 fa19 	bl	8004738 <memchr>
 8004306:	b138      	cbz	r0, 8004318 <_svfiprintf_r+0x150>
 8004308:	2240      	movs	r2, #64	@ 0x40
 800430a:	9b04      	ldr	r3, [sp, #16]
 800430c:	eba0 000a 	sub.w	r0, r0, sl
 8004310:	4082      	lsls	r2, r0
 8004312:	4313      	orrs	r3, r2
 8004314:	3401      	adds	r4, #1
 8004316:	9304      	str	r3, [sp, #16]
 8004318:	f814 1b01 	ldrb.w	r1, [r4], #1
 800431c:	2206      	movs	r2, #6
 800431e:	4825      	ldr	r0, [pc, #148]	@ (80043b4 <_svfiprintf_r+0x1ec>)
 8004320:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004324:	f000 fa08 	bl	8004738 <memchr>
 8004328:	2800      	cmp	r0, #0
 800432a:	d036      	beq.n	800439a <_svfiprintf_r+0x1d2>
 800432c:	4b22      	ldr	r3, [pc, #136]	@ (80043b8 <_svfiprintf_r+0x1f0>)
 800432e:	bb1b      	cbnz	r3, 8004378 <_svfiprintf_r+0x1b0>
 8004330:	9b03      	ldr	r3, [sp, #12]
 8004332:	3307      	adds	r3, #7
 8004334:	f023 0307 	bic.w	r3, r3, #7
 8004338:	3308      	adds	r3, #8
 800433a:	9303      	str	r3, [sp, #12]
 800433c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800433e:	4433      	add	r3, r6
 8004340:	9309      	str	r3, [sp, #36]	@ 0x24
 8004342:	e76a      	b.n	800421a <_svfiprintf_r+0x52>
 8004344:	460c      	mov	r4, r1
 8004346:	2001      	movs	r0, #1
 8004348:	fb0c 3202 	mla	r2, ip, r2, r3
 800434c:	e7a8      	b.n	80042a0 <_svfiprintf_r+0xd8>
 800434e:	2300      	movs	r3, #0
 8004350:	f04f 0c0a 	mov.w	ip, #10
 8004354:	4619      	mov	r1, r3
 8004356:	3401      	adds	r4, #1
 8004358:	9305      	str	r3, [sp, #20]
 800435a:	4620      	mov	r0, r4
 800435c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004360:	3a30      	subs	r2, #48	@ 0x30
 8004362:	2a09      	cmp	r2, #9
 8004364:	d903      	bls.n	800436e <_svfiprintf_r+0x1a6>
 8004366:	2b00      	cmp	r3, #0
 8004368:	d0c6      	beq.n	80042f8 <_svfiprintf_r+0x130>
 800436a:	9105      	str	r1, [sp, #20]
 800436c:	e7c4      	b.n	80042f8 <_svfiprintf_r+0x130>
 800436e:	4604      	mov	r4, r0
 8004370:	2301      	movs	r3, #1
 8004372:	fb0c 2101 	mla	r1, ip, r1, r2
 8004376:	e7f0      	b.n	800435a <_svfiprintf_r+0x192>
 8004378:	ab03      	add	r3, sp, #12
 800437a:	9300      	str	r3, [sp, #0]
 800437c:	462a      	mov	r2, r5
 800437e:	4638      	mov	r0, r7
 8004380:	4b0e      	ldr	r3, [pc, #56]	@ (80043bc <_svfiprintf_r+0x1f4>)
 8004382:	a904      	add	r1, sp, #16
 8004384:	f3af 8000 	nop.w
 8004388:	1c42      	adds	r2, r0, #1
 800438a:	4606      	mov	r6, r0
 800438c:	d1d6      	bne.n	800433c <_svfiprintf_r+0x174>
 800438e:	89ab      	ldrh	r3, [r5, #12]
 8004390:	065b      	lsls	r3, r3, #25
 8004392:	f53f af2d 	bmi.w	80041f0 <_svfiprintf_r+0x28>
 8004396:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004398:	e72c      	b.n	80041f4 <_svfiprintf_r+0x2c>
 800439a:	ab03      	add	r3, sp, #12
 800439c:	9300      	str	r3, [sp, #0]
 800439e:	462a      	mov	r2, r5
 80043a0:	4638      	mov	r0, r7
 80043a2:	4b06      	ldr	r3, [pc, #24]	@ (80043bc <_svfiprintf_r+0x1f4>)
 80043a4:	a904      	add	r1, sp, #16
 80043a6:	f000 f87d 	bl	80044a4 <_printf_i>
 80043aa:	e7ed      	b.n	8004388 <_svfiprintf_r+0x1c0>
 80043ac:	08004a3e 	.word	0x08004a3e
 80043b0:	08004a44 	.word	0x08004a44
 80043b4:	08004a48 	.word	0x08004a48
 80043b8:	00000000 	.word	0x00000000
 80043bc:	08004111 	.word	0x08004111

080043c0 <_printf_common>:
 80043c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043c4:	4616      	mov	r6, r2
 80043c6:	4698      	mov	r8, r3
 80043c8:	688a      	ldr	r2, [r1, #8]
 80043ca:	690b      	ldr	r3, [r1, #16]
 80043cc:	4607      	mov	r7, r0
 80043ce:	4293      	cmp	r3, r2
 80043d0:	bfb8      	it	lt
 80043d2:	4613      	movlt	r3, r2
 80043d4:	6033      	str	r3, [r6, #0]
 80043d6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80043da:	460c      	mov	r4, r1
 80043dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80043e0:	b10a      	cbz	r2, 80043e6 <_printf_common+0x26>
 80043e2:	3301      	adds	r3, #1
 80043e4:	6033      	str	r3, [r6, #0]
 80043e6:	6823      	ldr	r3, [r4, #0]
 80043e8:	0699      	lsls	r1, r3, #26
 80043ea:	bf42      	ittt	mi
 80043ec:	6833      	ldrmi	r3, [r6, #0]
 80043ee:	3302      	addmi	r3, #2
 80043f0:	6033      	strmi	r3, [r6, #0]
 80043f2:	6825      	ldr	r5, [r4, #0]
 80043f4:	f015 0506 	ands.w	r5, r5, #6
 80043f8:	d106      	bne.n	8004408 <_printf_common+0x48>
 80043fa:	f104 0a19 	add.w	sl, r4, #25
 80043fe:	68e3      	ldr	r3, [r4, #12]
 8004400:	6832      	ldr	r2, [r6, #0]
 8004402:	1a9b      	subs	r3, r3, r2
 8004404:	42ab      	cmp	r3, r5
 8004406:	dc2b      	bgt.n	8004460 <_printf_common+0xa0>
 8004408:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800440c:	6822      	ldr	r2, [r4, #0]
 800440e:	3b00      	subs	r3, #0
 8004410:	bf18      	it	ne
 8004412:	2301      	movne	r3, #1
 8004414:	0692      	lsls	r2, r2, #26
 8004416:	d430      	bmi.n	800447a <_printf_common+0xba>
 8004418:	4641      	mov	r1, r8
 800441a:	4638      	mov	r0, r7
 800441c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004420:	47c8      	blx	r9
 8004422:	3001      	adds	r0, #1
 8004424:	d023      	beq.n	800446e <_printf_common+0xae>
 8004426:	6823      	ldr	r3, [r4, #0]
 8004428:	6922      	ldr	r2, [r4, #16]
 800442a:	f003 0306 	and.w	r3, r3, #6
 800442e:	2b04      	cmp	r3, #4
 8004430:	bf14      	ite	ne
 8004432:	2500      	movne	r5, #0
 8004434:	6833      	ldreq	r3, [r6, #0]
 8004436:	f04f 0600 	mov.w	r6, #0
 800443a:	bf08      	it	eq
 800443c:	68e5      	ldreq	r5, [r4, #12]
 800443e:	f104 041a 	add.w	r4, r4, #26
 8004442:	bf08      	it	eq
 8004444:	1aed      	subeq	r5, r5, r3
 8004446:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800444a:	bf08      	it	eq
 800444c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004450:	4293      	cmp	r3, r2
 8004452:	bfc4      	itt	gt
 8004454:	1a9b      	subgt	r3, r3, r2
 8004456:	18ed      	addgt	r5, r5, r3
 8004458:	42b5      	cmp	r5, r6
 800445a:	d11a      	bne.n	8004492 <_printf_common+0xd2>
 800445c:	2000      	movs	r0, #0
 800445e:	e008      	b.n	8004472 <_printf_common+0xb2>
 8004460:	2301      	movs	r3, #1
 8004462:	4652      	mov	r2, sl
 8004464:	4641      	mov	r1, r8
 8004466:	4638      	mov	r0, r7
 8004468:	47c8      	blx	r9
 800446a:	3001      	adds	r0, #1
 800446c:	d103      	bne.n	8004476 <_printf_common+0xb6>
 800446e:	f04f 30ff 	mov.w	r0, #4294967295
 8004472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004476:	3501      	adds	r5, #1
 8004478:	e7c1      	b.n	80043fe <_printf_common+0x3e>
 800447a:	2030      	movs	r0, #48	@ 0x30
 800447c:	18e1      	adds	r1, r4, r3
 800447e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004482:	1c5a      	adds	r2, r3, #1
 8004484:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004488:	4422      	add	r2, r4
 800448a:	3302      	adds	r3, #2
 800448c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004490:	e7c2      	b.n	8004418 <_printf_common+0x58>
 8004492:	2301      	movs	r3, #1
 8004494:	4622      	mov	r2, r4
 8004496:	4641      	mov	r1, r8
 8004498:	4638      	mov	r0, r7
 800449a:	47c8      	blx	r9
 800449c:	3001      	adds	r0, #1
 800449e:	d0e6      	beq.n	800446e <_printf_common+0xae>
 80044a0:	3601      	adds	r6, #1
 80044a2:	e7d9      	b.n	8004458 <_printf_common+0x98>

080044a4 <_printf_i>:
 80044a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044a8:	7e0f      	ldrb	r7, [r1, #24]
 80044aa:	4691      	mov	r9, r2
 80044ac:	2f78      	cmp	r7, #120	@ 0x78
 80044ae:	4680      	mov	r8, r0
 80044b0:	460c      	mov	r4, r1
 80044b2:	469a      	mov	sl, r3
 80044b4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80044b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80044ba:	d807      	bhi.n	80044cc <_printf_i+0x28>
 80044bc:	2f62      	cmp	r7, #98	@ 0x62
 80044be:	d80a      	bhi.n	80044d6 <_printf_i+0x32>
 80044c0:	2f00      	cmp	r7, #0
 80044c2:	f000 80d3 	beq.w	800466c <_printf_i+0x1c8>
 80044c6:	2f58      	cmp	r7, #88	@ 0x58
 80044c8:	f000 80ba 	beq.w	8004640 <_printf_i+0x19c>
 80044cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80044d4:	e03a      	b.n	800454c <_printf_i+0xa8>
 80044d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80044da:	2b15      	cmp	r3, #21
 80044dc:	d8f6      	bhi.n	80044cc <_printf_i+0x28>
 80044de:	a101      	add	r1, pc, #4	@ (adr r1, 80044e4 <_printf_i+0x40>)
 80044e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80044e4:	0800453d 	.word	0x0800453d
 80044e8:	08004551 	.word	0x08004551
 80044ec:	080044cd 	.word	0x080044cd
 80044f0:	080044cd 	.word	0x080044cd
 80044f4:	080044cd 	.word	0x080044cd
 80044f8:	080044cd 	.word	0x080044cd
 80044fc:	08004551 	.word	0x08004551
 8004500:	080044cd 	.word	0x080044cd
 8004504:	080044cd 	.word	0x080044cd
 8004508:	080044cd 	.word	0x080044cd
 800450c:	080044cd 	.word	0x080044cd
 8004510:	08004653 	.word	0x08004653
 8004514:	0800457b 	.word	0x0800457b
 8004518:	0800460d 	.word	0x0800460d
 800451c:	080044cd 	.word	0x080044cd
 8004520:	080044cd 	.word	0x080044cd
 8004524:	08004675 	.word	0x08004675
 8004528:	080044cd 	.word	0x080044cd
 800452c:	0800457b 	.word	0x0800457b
 8004530:	080044cd 	.word	0x080044cd
 8004534:	080044cd 	.word	0x080044cd
 8004538:	08004615 	.word	0x08004615
 800453c:	6833      	ldr	r3, [r6, #0]
 800453e:	1d1a      	adds	r2, r3, #4
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	6032      	str	r2, [r6, #0]
 8004544:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004548:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800454c:	2301      	movs	r3, #1
 800454e:	e09e      	b.n	800468e <_printf_i+0x1ea>
 8004550:	6833      	ldr	r3, [r6, #0]
 8004552:	6820      	ldr	r0, [r4, #0]
 8004554:	1d19      	adds	r1, r3, #4
 8004556:	6031      	str	r1, [r6, #0]
 8004558:	0606      	lsls	r6, r0, #24
 800455a:	d501      	bpl.n	8004560 <_printf_i+0xbc>
 800455c:	681d      	ldr	r5, [r3, #0]
 800455e:	e003      	b.n	8004568 <_printf_i+0xc4>
 8004560:	0645      	lsls	r5, r0, #25
 8004562:	d5fb      	bpl.n	800455c <_printf_i+0xb8>
 8004564:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004568:	2d00      	cmp	r5, #0
 800456a:	da03      	bge.n	8004574 <_printf_i+0xd0>
 800456c:	232d      	movs	r3, #45	@ 0x2d
 800456e:	426d      	negs	r5, r5
 8004570:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004574:	230a      	movs	r3, #10
 8004576:	4859      	ldr	r0, [pc, #356]	@ (80046dc <_printf_i+0x238>)
 8004578:	e011      	b.n	800459e <_printf_i+0xfa>
 800457a:	6821      	ldr	r1, [r4, #0]
 800457c:	6833      	ldr	r3, [r6, #0]
 800457e:	0608      	lsls	r0, r1, #24
 8004580:	f853 5b04 	ldr.w	r5, [r3], #4
 8004584:	d402      	bmi.n	800458c <_printf_i+0xe8>
 8004586:	0649      	lsls	r1, r1, #25
 8004588:	bf48      	it	mi
 800458a:	b2ad      	uxthmi	r5, r5
 800458c:	2f6f      	cmp	r7, #111	@ 0x6f
 800458e:	6033      	str	r3, [r6, #0]
 8004590:	bf14      	ite	ne
 8004592:	230a      	movne	r3, #10
 8004594:	2308      	moveq	r3, #8
 8004596:	4851      	ldr	r0, [pc, #324]	@ (80046dc <_printf_i+0x238>)
 8004598:	2100      	movs	r1, #0
 800459a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800459e:	6866      	ldr	r6, [r4, #4]
 80045a0:	2e00      	cmp	r6, #0
 80045a2:	bfa8      	it	ge
 80045a4:	6821      	ldrge	r1, [r4, #0]
 80045a6:	60a6      	str	r6, [r4, #8]
 80045a8:	bfa4      	itt	ge
 80045aa:	f021 0104 	bicge.w	r1, r1, #4
 80045ae:	6021      	strge	r1, [r4, #0]
 80045b0:	b90d      	cbnz	r5, 80045b6 <_printf_i+0x112>
 80045b2:	2e00      	cmp	r6, #0
 80045b4:	d04b      	beq.n	800464e <_printf_i+0x1aa>
 80045b6:	4616      	mov	r6, r2
 80045b8:	fbb5 f1f3 	udiv	r1, r5, r3
 80045bc:	fb03 5711 	mls	r7, r3, r1, r5
 80045c0:	5dc7      	ldrb	r7, [r0, r7]
 80045c2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80045c6:	462f      	mov	r7, r5
 80045c8:	42bb      	cmp	r3, r7
 80045ca:	460d      	mov	r5, r1
 80045cc:	d9f4      	bls.n	80045b8 <_printf_i+0x114>
 80045ce:	2b08      	cmp	r3, #8
 80045d0:	d10b      	bne.n	80045ea <_printf_i+0x146>
 80045d2:	6823      	ldr	r3, [r4, #0]
 80045d4:	07df      	lsls	r7, r3, #31
 80045d6:	d508      	bpl.n	80045ea <_printf_i+0x146>
 80045d8:	6923      	ldr	r3, [r4, #16]
 80045da:	6861      	ldr	r1, [r4, #4]
 80045dc:	4299      	cmp	r1, r3
 80045de:	bfde      	ittt	le
 80045e0:	2330      	movle	r3, #48	@ 0x30
 80045e2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80045e6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80045ea:	1b92      	subs	r2, r2, r6
 80045ec:	6122      	str	r2, [r4, #16]
 80045ee:	464b      	mov	r3, r9
 80045f0:	4621      	mov	r1, r4
 80045f2:	4640      	mov	r0, r8
 80045f4:	f8cd a000 	str.w	sl, [sp]
 80045f8:	aa03      	add	r2, sp, #12
 80045fa:	f7ff fee1 	bl	80043c0 <_printf_common>
 80045fe:	3001      	adds	r0, #1
 8004600:	d14a      	bne.n	8004698 <_printf_i+0x1f4>
 8004602:	f04f 30ff 	mov.w	r0, #4294967295
 8004606:	b004      	add	sp, #16
 8004608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800460c:	6823      	ldr	r3, [r4, #0]
 800460e:	f043 0320 	orr.w	r3, r3, #32
 8004612:	6023      	str	r3, [r4, #0]
 8004614:	2778      	movs	r7, #120	@ 0x78
 8004616:	4832      	ldr	r0, [pc, #200]	@ (80046e0 <_printf_i+0x23c>)
 8004618:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800461c:	6823      	ldr	r3, [r4, #0]
 800461e:	6831      	ldr	r1, [r6, #0]
 8004620:	061f      	lsls	r7, r3, #24
 8004622:	f851 5b04 	ldr.w	r5, [r1], #4
 8004626:	d402      	bmi.n	800462e <_printf_i+0x18a>
 8004628:	065f      	lsls	r7, r3, #25
 800462a:	bf48      	it	mi
 800462c:	b2ad      	uxthmi	r5, r5
 800462e:	6031      	str	r1, [r6, #0]
 8004630:	07d9      	lsls	r1, r3, #31
 8004632:	bf44      	itt	mi
 8004634:	f043 0320 	orrmi.w	r3, r3, #32
 8004638:	6023      	strmi	r3, [r4, #0]
 800463a:	b11d      	cbz	r5, 8004644 <_printf_i+0x1a0>
 800463c:	2310      	movs	r3, #16
 800463e:	e7ab      	b.n	8004598 <_printf_i+0xf4>
 8004640:	4826      	ldr	r0, [pc, #152]	@ (80046dc <_printf_i+0x238>)
 8004642:	e7e9      	b.n	8004618 <_printf_i+0x174>
 8004644:	6823      	ldr	r3, [r4, #0]
 8004646:	f023 0320 	bic.w	r3, r3, #32
 800464a:	6023      	str	r3, [r4, #0]
 800464c:	e7f6      	b.n	800463c <_printf_i+0x198>
 800464e:	4616      	mov	r6, r2
 8004650:	e7bd      	b.n	80045ce <_printf_i+0x12a>
 8004652:	6833      	ldr	r3, [r6, #0]
 8004654:	6825      	ldr	r5, [r4, #0]
 8004656:	1d18      	adds	r0, r3, #4
 8004658:	6961      	ldr	r1, [r4, #20]
 800465a:	6030      	str	r0, [r6, #0]
 800465c:	062e      	lsls	r6, r5, #24
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	d501      	bpl.n	8004666 <_printf_i+0x1c2>
 8004662:	6019      	str	r1, [r3, #0]
 8004664:	e002      	b.n	800466c <_printf_i+0x1c8>
 8004666:	0668      	lsls	r0, r5, #25
 8004668:	d5fb      	bpl.n	8004662 <_printf_i+0x1be>
 800466a:	8019      	strh	r1, [r3, #0]
 800466c:	2300      	movs	r3, #0
 800466e:	4616      	mov	r6, r2
 8004670:	6123      	str	r3, [r4, #16]
 8004672:	e7bc      	b.n	80045ee <_printf_i+0x14a>
 8004674:	6833      	ldr	r3, [r6, #0]
 8004676:	2100      	movs	r1, #0
 8004678:	1d1a      	adds	r2, r3, #4
 800467a:	6032      	str	r2, [r6, #0]
 800467c:	681e      	ldr	r6, [r3, #0]
 800467e:	6862      	ldr	r2, [r4, #4]
 8004680:	4630      	mov	r0, r6
 8004682:	f000 f859 	bl	8004738 <memchr>
 8004686:	b108      	cbz	r0, 800468c <_printf_i+0x1e8>
 8004688:	1b80      	subs	r0, r0, r6
 800468a:	6060      	str	r0, [r4, #4]
 800468c:	6863      	ldr	r3, [r4, #4]
 800468e:	6123      	str	r3, [r4, #16]
 8004690:	2300      	movs	r3, #0
 8004692:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004696:	e7aa      	b.n	80045ee <_printf_i+0x14a>
 8004698:	4632      	mov	r2, r6
 800469a:	4649      	mov	r1, r9
 800469c:	4640      	mov	r0, r8
 800469e:	6923      	ldr	r3, [r4, #16]
 80046a0:	47d0      	blx	sl
 80046a2:	3001      	adds	r0, #1
 80046a4:	d0ad      	beq.n	8004602 <_printf_i+0x15e>
 80046a6:	6823      	ldr	r3, [r4, #0]
 80046a8:	079b      	lsls	r3, r3, #30
 80046aa:	d413      	bmi.n	80046d4 <_printf_i+0x230>
 80046ac:	68e0      	ldr	r0, [r4, #12]
 80046ae:	9b03      	ldr	r3, [sp, #12]
 80046b0:	4298      	cmp	r0, r3
 80046b2:	bfb8      	it	lt
 80046b4:	4618      	movlt	r0, r3
 80046b6:	e7a6      	b.n	8004606 <_printf_i+0x162>
 80046b8:	2301      	movs	r3, #1
 80046ba:	4632      	mov	r2, r6
 80046bc:	4649      	mov	r1, r9
 80046be:	4640      	mov	r0, r8
 80046c0:	47d0      	blx	sl
 80046c2:	3001      	adds	r0, #1
 80046c4:	d09d      	beq.n	8004602 <_printf_i+0x15e>
 80046c6:	3501      	adds	r5, #1
 80046c8:	68e3      	ldr	r3, [r4, #12]
 80046ca:	9903      	ldr	r1, [sp, #12]
 80046cc:	1a5b      	subs	r3, r3, r1
 80046ce:	42ab      	cmp	r3, r5
 80046d0:	dcf2      	bgt.n	80046b8 <_printf_i+0x214>
 80046d2:	e7eb      	b.n	80046ac <_printf_i+0x208>
 80046d4:	2500      	movs	r5, #0
 80046d6:	f104 0619 	add.w	r6, r4, #25
 80046da:	e7f5      	b.n	80046c8 <_printf_i+0x224>
 80046dc:	08004a4f 	.word	0x08004a4f
 80046e0:	08004a60 	.word	0x08004a60

080046e4 <memmove>:
 80046e4:	4288      	cmp	r0, r1
 80046e6:	b510      	push	{r4, lr}
 80046e8:	eb01 0402 	add.w	r4, r1, r2
 80046ec:	d902      	bls.n	80046f4 <memmove+0x10>
 80046ee:	4284      	cmp	r4, r0
 80046f0:	4623      	mov	r3, r4
 80046f2:	d807      	bhi.n	8004704 <memmove+0x20>
 80046f4:	1e43      	subs	r3, r0, #1
 80046f6:	42a1      	cmp	r1, r4
 80046f8:	d008      	beq.n	800470c <memmove+0x28>
 80046fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004702:	e7f8      	b.n	80046f6 <memmove+0x12>
 8004704:	4601      	mov	r1, r0
 8004706:	4402      	add	r2, r0
 8004708:	428a      	cmp	r2, r1
 800470a:	d100      	bne.n	800470e <memmove+0x2a>
 800470c:	bd10      	pop	{r4, pc}
 800470e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004712:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004716:	e7f7      	b.n	8004708 <memmove+0x24>

08004718 <_sbrk_r>:
 8004718:	b538      	push	{r3, r4, r5, lr}
 800471a:	2300      	movs	r3, #0
 800471c:	4d05      	ldr	r5, [pc, #20]	@ (8004734 <_sbrk_r+0x1c>)
 800471e:	4604      	mov	r4, r0
 8004720:	4608      	mov	r0, r1
 8004722:	602b      	str	r3, [r5, #0]
 8004724:	f7fc fbba 	bl	8000e9c <_sbrk>
 8004728:	1c43      	adds	r3, r0, #1
 800472a:	d102      	bne.n	8004732 <_sbrk_r+0x1a>
 800472c:	682b      	ldr	r3, [r5, #0]
 800472e:	b103      	cbz	r3, 8004732 <_sbrk_r+0x1a>
 8004730:	6023      	str	r3, [r4, #0]
 8004732:	bd38      	pop	{r3, r4, r5, pc}
 8004734:	20000ad8 	.word	0x20000ad8

08004738 <memchr>:
 8004738:	4603      	mov	r3, r0
 800473a:	b510      	push	{r4, lr}
 800473c:	b2c9      	uxtb	r1, r1
 800473e:	4402      	add	r2, r0
 8004740:	4293      	cmp	r3, r2
 8004742:	4618      	mov	r0, r3
 8004744:	d101      	bne.n	800474a <memchr+0x12>
 8004746:	2000      	movs	r0, #0
 8004748:	e003      	b.n	8004752 <memchr+0x1a>
 800474a:	7804      	ldrb	r4, [r0, #0]
 800474c:	3301      	adds	r3, #1
 800474e:	428c      	cmp	r4, r1
 8004750:	d1f6      	bne.n	8004740 <memchr+0x8>
 8004752:	bd10      	pop	{r4, pc}

08004754 <_realloc_r>:
 8004754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004758:	4680      	mov	r8, r0
 800475a:	4615      	mov	r5, r2
 800475c:	460c      	mov	r4, r1
 800475e:	b921      	cbnz	r1, 800476a <_realloc_r+0x16>
 8004760:	4611      	mov	r1, r2
 8004762:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004766:	f7ff bc47 	b.w	8003ff8 <_malloc_r>
 800476a:	b92a      	cbnz	r2, 8004778 <_realloc_r+0x24>
 800476c:	f7ff fbda 	bl	8003f24 <_free_r>
 8004770:	2400      	movs	r4, #0
 8004772:	4620      	mov	r0, r4
 8004774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004778:	f000 f81a 	bl	80047b0 <_malloc_usable_size_r>
 800477c:	4285      	cmp	r5, r0
 800477e:	4606      	mov	r6, r0
 8004780:	d802      	bhi.n	8004788 <_realloc_r+0x34>
 8004782:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004786:	d8f4      	bhi.n	8004772 <_realloc_r+0x1e>
 8004788:	4629      	mov	r1, r5
 800478a:	4640      	mov	r0, r8
 800478c:	f7ff fc34 	bl	8003ff8 <_malloc_r>
 8004790:	4607      	mov	r7, r0
 8004792:	2800      	cmp	r0, #0
 8004794:	d0ec      	beq.n	8004770 <_realloc_r+0x1c>
 8004796:	42b5      	cmp	r5, r6
 8004798:	462a      	mov	r2, r5
 800479a:	4621      	mov	r1, r4
 800479c:	bf28      	it	cs
 800479e:	4632      	movcs	r2, r6
 80047a0:	f7ff fbb2 	bl	8003f08 <memcpy>
 80047a4:	4621      	mov	r1, r4
 80047a6:	4640      	mov	r0, r8
 80047a8:	f7ff fbbc 	bl	8003f24 <_free_r>
 80047ac:	463c      	mov	r4, r7
 80047ae:	e7e0      	b.n	8004772 <_realloc_r+0x1e>

080047b0 <_malloc_usable_size_r>:
 80047b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047b4:	1f18      	subs	r0, r3, #4
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	bfbc      	itt	lt
 80047ba:	580b      	ldrlt	r3, [r1, r0]
 80047bc:	18c0      	addlt	r0, r0, r3
 80047be:	4770      	bx	lr

080047c0 <_init>:
 80047c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047c2:	bf00      	nop
 80047c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047c6:	bc08      	pop	{r3}
 80047c8:	469e      	mov	lr, r3
 80047ca:	4770      	bx	lr

080047cc <_fini>:
 80047cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ce:	bf00      	nop
 80047d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047d2:	bc08      	pop	{r3}
 80047d4:	469e      	mov	lr, r3
 80047d6:	4770      	bx	lr
